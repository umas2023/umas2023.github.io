<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-07-05T18:45:07+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for my new site here. It will appear in my document head meta (for Google search results) and in my feed.xml site description.</subtitle><entry><title type="html">windows: obs+usb采集卡连接ps5/switch</title><link href="/windows/obs/" rel="alternate" type="text/html" title="windows: obs+usb采集卡连接ps5/switch" /><published>2023-07-05T18:34:06+08:00</published><updated>2023-07-05T18:34:06+08:00</updated><id>/windows/obs</id><content type="html" xml:base="/windows/obs/"><![CDATA[<ul>
  <li>首先安装obs
    <ul>
      <li>官网速度比较慢，推荐用steam安装</li>
    </ul>
  </li>
  <li>
    <p>采集卡连接好</p>
  </li>
  <li>
    <p>obs添加视频和音频采集设备
<img src="/image/windows/2023-07-05-obs/image_1.jpg" alt="引入图片" /></p>
  </li>
  <li>
    <p>视频输入选择采集卡
<img src="/image/windows/2023-07-05-obs/image_2.jpg" alt="引入图片" /></p>
  </li>
  <li>
    <p>拉到下面音频也设置成采集卡
<img src="/image/windows/2023-07-05-obs/image_3.jpg" alt="引入图片" /></p>
  </li>
  <li>添加音频采集设备（略）</li>
  <li>设置音频输出
<img src="/image/windows/2023-07-05-obs/image_4.jpg" alt="引入图片" />
<img src="/image/windows/2023-07-05-obs/image_5.jpg" alt="引入图片" /></li>
</ul>]]></content><author><name></name></author><category term="windows" /><summary type="html"><![CDATA[首先安装obs 官网速度比较慢，推荐用steam安装]]></summary></entry><entry><title type="html">windows: 连接opcua</title><link href="/windows/python/opcua/" rel="alternate" type="text/html" title="windows: 连接opcua" /><published>2023-07-05T15:50:52+08:00</published><updated>2023-07-05T15:50:52+08:00</updated><id>/windows/python/opcua</id><content type="html" xml:base="/windows/python/opcua/"><![CDATA[<h2 id="windows通过uaexpert连接">windows通过uaexpert连接</h2>

<ul>
  <li>网线连接设备，记下设备ip（192.168.0.112）</li>
  <li>电脑有线连接ipv4设置为与设备同一网段，随便定一个ip</li>
</ul>

<p><img src="/image/windows/2023-07-05-opcua/image_2.jpg" alt="引入图片" /></p>

<ul>
  <li>打开uaexpert，点击上方加号添加设备，端口4840</li>
</ul>

<p><img src="/image/windows/2023-07-05-opcua/image_1.jpg" alt="引入图片" /></p>

<ul>
  <li>流水线的参数在logic目录下，鼠标拖到右边可以查看，out型变量（气阀）可以在右边双击修改</li>
</ul>

<p><img src="/image/windows/2023-07-05-opcua/image_3.jpg" alt="引入图片" /></p>

<h2 id="前端node-opcuajs">前端node-opcua（js）</h2>

<ul>
  <li>node-opcua库
    <ul>
      <li>https://www.npmjs.com/package/node-opcua</li>
    </ul>
  </li>
  <li>安装</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i -s node-opcua
</code></pre></div></div>
<ul>
  <li>导入</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import * as opcua from "node-opcua";
</code></pre></div></div>

<ul>
  <li>经测试导入到vue项目之后有很多报错Can’t resolve xxx …</li>
  <li>放弃，改用后端连接opcua</li>
</ul>

<h2 id="后端opcuapython">后端opcua（python）</h2>

<ul>
  <li>
    <p>opcua库</p>
  </li>
  <li>
    <p>读取单个节点的例子</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">opcua</span> <span class="kn">import</span> <span class="n">Client</span>  <span class="c1"># pip install opcua
</span>
<span class="c1"># OPC UA 服务器地址
</span><span class="n">server_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">opc.tcp://192.168.0.112:4840</span><span class="sh">"</span>

<span class="c1"># 创建 OPC UA 客户端
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">Client</span><span class="p">(</span><span class="n">server_url</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="c1"># 连接到 OPC UA 服务器
</span>    <span class="n">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>

    <span class="c1"># 获取节点对象
</span>    <span class="n">var_node</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_node</span><span class="p">(</span><span class="sh">"</span><span class="s">ns=2;s=Application.PlcProg.in00</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">var_node</span><span class="p">.</span><span class="nf">get_value</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Variable value:</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

<span class="k">finally</span><span class="p">:</span>
    <span class="c1"># 断开与 OPC UA 服务器的连接
</span>    <span class="n">client</span><span class="p">.</span><span class="nf">disconnect</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>其中get_node函数中的id可以在uaexpert软件中看到，软件中选中然后ctrl+c即可复制id</li>
</ul>

<p><img src="/image/windows/2023-07-05-opcua/image_4.jpg" alt="引入图片" /></p>

<ul>
  <li>可以通过一个简单的字符串变换直接把uaexpert中复制来的id转换为python函数可以识别的形式</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 要修改的节点的 Node ID
</span><span class="n">node_id_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">NS2|String|Application.PlcProg.in00</span><span class="sh">"</span>

<span class="c1"># 解析 Node ID
</span><span class="n">namespace</span> <span class="o">=</span> <span class="n">node_id_str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">|</span><span class="sh">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">NS</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)</span>
<span class="n">identifier</span> <span class="o">=</span> <span class="n">node_id_str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">|</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">node_id</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">ns=</span><span class="si">{</span><span class="n">namespace</span><span class="si">}</span><span class="s">;s=</span><span class="si">{</span><span class="n">identifier</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 使用 Node ID 获取节点对象
</span><span class="n">node</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_node</span><span class="p">(</span><span class="n">node_id</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>遍历所有节点的例子</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">opcua</span> <span class="kn">import</span> <span class="n">Client</span>  <span class="c1"># pip install opcua
</span>
<span class="c1"># OPC UA 服务器地址
</span><span class="n">server_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">opc.tcp://192.168.0.112:4840</span><span class="sh">"</span>

<span class="c1"># 创建 OPC UA 客户端
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">Client</span><span class="p">(</span><span class="n">server_url</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">browse_nodes</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="c1"># 获取节点的子节点
</span>    <span class="n">child_nodes</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nf">get_children</span><span class="p">()</span>

    <span class="c1"># 遍历子节点
</span>    <span class="k">for</span> <span class="n">child_node</span> <span class="ow">in</span> <span class="n">child_nodes</span><span class="p">:</span>
        <span class="c1"># 打印节点的名称和节点 ID
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Node Name:</span><span class="sh">"</span><span class="p">,</span> <span class="n">child_node</span><span class="p">.</span><span class="nf">get_display_name</span><span class="p">().</span><span class="n">Text</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Node ID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">child_node</span><span class="p">.</span><span class="n">nodeid</span><span class="p">)</span>

        <span class="c1"># 递归遍历子节点的子节点
</span>        <span class="nf">browse_nodes</span><span class="p">(</span><span class="n">child_node</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="c1"># 连接到 OPC UA 服务器
</span>    <span class="n">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>

    <span class="c1"># 获取服务器上的根节点
</span>    <span class="n">root_node</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_root_node</span><span class="p">()</span>

    <span class="c1"># 递归遍历节点树
</span>    <span class="nf">browse_nodes</span><span class="p">(</span><span class="n">root_node</span><span class="p">)</span>

<span class="k">finally</span><span class="p">:</span>
    <span class="c1"># 断开与 OPC UA 服务器的连接
</span>    <span class="n">client</span><span class="p">.</span><span class="nf">disconnect</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>注意并不是所有节点都可以访问，一些节点受权限保护，报错：</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>opcua.ua.uaerrors._auto.BadNotReadable: "The access level does not allow reading or subscribing to the Node."(BadNotReadable)
</code></pre></div></div>

<ul>
  <li>修改节点的值通过set_value函数</li>
  <li>注意变量的类型要与设备需求一致比如这里的Boolean型不能写字符串”true”</li>
  <li>一个例子：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="n">opcua</span> <span class="kn">import</span> <span class="n">Client</span>  <span class="c1"># pip install opcua
</span>
<span class="c1"># OPC UA 服务器地址
</span><span class="n">server_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">opc.tcp://192.168.0.112:4840</span><span class="sh">"</span>

<span class="c1"># 创建 OPC UA 客户端
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">Client</span><span class="p">(</span><span class="n">server_url</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="c1"># 连接到 OPC UA 服务器
</span>    <span class="n">client</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>

    <span class="c1"># 要修改的节点的 Node ID
</span>    <span class="n">node_id_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">NS2|String|Application.PlcProg.out01</span><span class="sh">"</span>

    <span class="c1"># 解析 Node ID
</span>    <span class="n">namespace</span> <span class="o">=</span> <span class="n">node_id_str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">|</span><span class="sh">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">NS</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)</span>
    <span class="n">identifier</span> <span class="o">=</span> <span class="n">node_id_str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">|</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">node_id</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">ns=</span><span class="si">{</span><span class="n">namespace</span><span class="si">}</span><span class="s">;s=</span><span class="si">{</span><span class="n">identifier</span><span class="si">}</span><span class="sh">"</span>

    <span class="c1"># 使用 Node ID 获取节点对象
</span>    <span class="n">node</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_node</span><span class="p">(</span><span class="n">node_id</span><span class="p">)</span>

    <span class="c1"># 要设置的新值
</span>    <span class="n">new_value</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="c1"># 设置节点的新值
</span>    <span class="n">node</span><span class="p">.</span><span class="nf">set_value</span><span class="p">(</span><span class="n">new_value</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Node ID:</span><span class="sh">"</span><span class="p">,</span> <span class="n">node_id</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">New Value:</span><span class="sh">"</span><span class="p">,</span> <span class="n">new_value</span><span class="p">)</span>

<span class="k">finally</span><span class="p">:</span>
    <span class="c1"># 断开与 OPC UA 服务器的连接
</span>    <span class="n">client</span><span class="p">.</span><span class="nf">disconnect</span><span class="p">()</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="windows" /><category term="python" /><summary type="html"><![CDATA[windows通过uaexpert连接]]></summary></entry><entry><title type="html">python: pytesseract 配置</title><link href="/python/zip_pctools/pytesseract/" rel="alternate" type="text/html" title="python: pytesseract 配置" /><published>2023-07-04T11:25:22+08:00</published><updated>2023-07-04T11:25:22+08:00</updated><id>/python/zip_pctools/pytesseract</id><content type="html" xml:base="/python/zip_pctools/pytesseract/"><![CDATA[<h2 id="安装tesseract">安装tesseract</h2>
<ul>
  <li>https://github.com/tesseract-ocr/tesseract</li>
</ul>

<h2 id="加入环境变量">加入环境变量</h2>

<p><img src="/image/python/2023-07-04-pytesseract/image_1.jpg" alt="引入图片" /></p>

<h2 id="直接添加路径">直接添加路径</h2>
<ul>
  <li>实际使用发现添加环境变量不一定好用，依然会报错tesseract not installed</li>
  <li>这时候需要手动在pytesseract.py里添加tesseract安装路径</li>
  <li>我的包安装位置：</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d:/p-program/pctools_venv/venv/Lib/site-packages/pytesseract/pytesseract.py
</code></pre></div></div>

<ul>
  <li>打开pytesseract.py，搜索tesseract_cmd，替换为tesseract安装路径</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
</code></pre></div></div>

<h2 id="下面是写在电脑配件里的实例">下面是写在电脑配件里的实例</h2>

<ul>
  <li>截图函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">startShot</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">开始截图</span><span class="sh">'''</span>
    <span class="c1"># 获取屏幕截图
</span>    <span class="n">screenshot</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">pyautogui</span><span class="p">.</span><span class="nf">screenshot</span><span class="p">())</span>
    <span class="c1"># 将RGB模式的屏幕截图转换为BGR模式
</span>    <span class="n">screenshot</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">screenshot</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2BGR</span><span class="p">)</span>

    <span class="c1"># 创建全屏窗口
</span>    <span class="n">cv2</span><span class="p">.</span><span class="nf">namedWindow</span><span class="p">(</span><span class="sh">"</span><span class="s">Screenshot</span><span class="sh">"</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">WINDOW_NORMAL</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">setWindowProperty</span><span class="p">(</span><span class="sh">"</span><span class="s">Screenshot</span><span class="sh">"</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">WND_PROP_FULLSCREEN</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">WINDOW_FULLSCREEN</span><span class="p">)</span>

    <span class="c1"># 显示屏幕截图
</span>    <span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">"</span><span class="s">Screenshot</span><span class="sh">"</span><span class="p">,</span> <span class="n">screenshot</span><span class="p">)</span>

    <span class="c1"># 等待用户选择区域
</span>    <span class="n">region</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">selectROI</span><span class="p">(</span><span class="sh">"</span><span class="s">Screenshot</span><span class="sh">"</span><span class="p">,</span> <span class="n">screenshot</span><span class="p">,</span> <span class="n">fromCenter</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">showCrosshair</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>

    <span class="c1"># 获取用户选择的区域
</span>    <span class="n">left</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">region</span>

    <span class="c1"># 截取用户选择的区域
</span>    <span class="n">screenshot</span> <span class="o">=</span> <span class="n">screenshot</span><span class="p">[</span><span class="n">top</span><span class="p">:</span><span class="n">top</span> <span class="o">+</span> <span class="n">height</span><span class="p">,</span> <span class="n">left</span><span class="p">:</span><span class="n">left</span> <span class="o">+</span> <span class="n">width</span><span class="p">]</span>

    <span class="c1"># 保存截图
</span>    <span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">jpg_path</span><span class="p">,</span> <span class="n">screenshot</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>ocr函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pytesseract</span>  <span class="c1"># pip install pytesseract # 需要配置pytesseract路径
</span>
<span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">jpg_path</span><span class="p">,</span><span class="n">target</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">str</span><span class="p">:</span>
    <span class="sh">'''</span><span class="s">识别图片中的文字,返回去除空格和换行符的字符串</span><span class="sh">'''</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">jpg_path</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">pytesseract</span><span class="p">.</span><span class="nf">image_to_string</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="n">target</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">text</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">text</span>
</code></pre></div></div>

<ul>
  <li>谷歌翻译函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">deep_translator</span> <span class="kn">import</span> <span class="n">GoogleTranslator</span>  <span class="c1"># pip install deep-translator
</span>
<span class="k">def</span> <span class="nf">get_translate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">text</span><span class="p">,</span><span class="n">source</span><span class="p">,</span><span class="n">translate</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">str</span><span class="p">:</span>
    <span class="sh">'''</span><span class="s">调用谷歌接口翻译文本</span><span class="se">\n</span><span class="s">
    source = [</span><span class="sh">'</span><span class="s">ja</span><span class="sh">'</span><span class="s">]</span><span class="se">\n</span><span class="s">
    translate = [</span><span class="sh">'</span><span class="s">zh-CN</span><span class="sh">'</span><span class="s">]</span><span class="sh">'''</span>
    <span class="n">translated</span> <span class="o">=</span> <span class="nc">GoogleTranslator</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="n">source</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">translate</span><span class="p">).</span><span class="nf">translate</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="n">text</span><span class="p">)</span>  <span class="c1"># Chinese translation
</span>    <span class="k">return</span> <span class="n">translated</span>
</code></pre></div></div>

<ul>
  <li>日文注音函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pykakasi</span>  <span class="c1"># pip install Cython # pip install pykakasi
</span>
<span class="k">def</span> <span class="nf">get_romaji</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text_jp</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">'''</span><span class="s">将输入的日文转换为罗马音输出</span><span class="sh">'''</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">text_jp</span>
    <span class="n">kks</span> <span class="o">=</span> <span class="n">pykakasi</span><span class="p">.</span><span class="nf">kakasi</span><span class="p">()</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">kks</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="n">sentence</span> <span class="o">=</span> <span class="sh">""</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
        <span class="n">word</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="sh">'</span><span class="s">orig</span><span class="sh">'</span><span class="p">]</span><span class="o">+</span><span class="sh">"</span><span class="s">(%s)</span><span class="sh">"</span><span class="o">%</span><span class="n">item</span><span class="p">[</span><span class="sh">'</span><span class="s">hira</span><span class="sh">'</span><span class="p">]</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span><span class="p">[</span><span class="sh">'</span><span class="s">orig</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span>  <span class="n">item</span><span class="p">[</span><span class="sh">'</span><span class="s">hira</span><span class="sh">'</span><span class="p">]</span> <span class="k">else</span> <span class="n">item</span><span class="p">[</span><span class="sh">'</span><span class="s">orig</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">sentence</span><span class="o">+=</span><span class="n">word</span>
    <span class="k">return</span> <span class="n">sentence</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="python" /><category term="zip_pctools" /><summary type="html"><![CDATA[安装tesseract https://github.com/tesseract-ocr/tesseract]]></summary></entry><entry><title type="html">knowhow: ip地址基础知识</title><link href="/knowhow/ip/" rel="alternate" type="text/html" title="knowhow: ip地址基础知识" /><published>2023-07-01T12:41:49+08:00</published><updated>2023-07-01T12:41:49+08:00</updated><id>/knowhow/ip</id><content type="html" xml:base="/knowhow/ip/"><![CDATA[<h2 id="什么是ip地址">什么是ip地址</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://blog.csdn.net/hzhsan/article/details/44100215
</code></pre></div></div>

<ul>
  <li>xx.xx.xx.0/24 表示一个网段，并且24告诉了当前具体的子网掩码</li>
  <li>斜杠后面的数字就表示子网掩码，数字具体代表32位子网掩码（二进制形式）中前面的“1”的个数</li>
  <li>192.168.0.0/24”表示，这个网段的IP地址从192.168.0.1开始，到192.168.0.254结束，子网掩码是255.255.255.0</li>
  <li>IP地址是四个十进制数组成的，相当于32位二进制，子网掩码24表示32位中的前24位用”1”表示，后面8位用0表示，即11111111 11111111 11111111 00000000。将其转化为十进制，就是：255.255.255.0</li>
  <li>同理192.168.1.0/28表示的意思是网段是192.168.1.0，子网掩码为：255.255.255.240，虽然子网掩码不同，但网段与24相同</li>
  <li>24位说明网络位是24位，那么主机位就是32-24=8位了，则子网的IP个数是254个，即是从00000001到11111110，而28位说明网络位是28位，那么主机位4位，则子网的IP个数是14个，即是从00000001到00001110</li>
</ul>]]></content><author><name></name></author><category term="knowhow" /><summary type="html"><![CDATA[什么是ip地址]]></summary></entry><entry><title type="html">jekyll: build_upload 打包上传脚本</title><link href="/jekyll/python/build_upload/" rel="alternate" type="text/html" title="jekyll: build_upload 打包上传脚本" /><published>2023-07-01T12:13:20+08:00</published><updated>2023-07-01T12:13:20+08:00</updated><id>/jekyll/python/build_upload</id><content type="html" xml:base="/jekyll/python/build_upload/"><![CDATA[<ul>
  <li>写代码用了3分钟</li>
  <li>就是说这个脚本得至少跑60次才能回本</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 打包并上传Jekyll项目
</span>
<span class="n">commit_txt</span> <span class="o">=</span> <span class="sh">"</span><span class="s">add new</span><span class="sh">"</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="n">script_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">realpath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>
<span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">script_path</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">===== jekyll build =====</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">"</span><span class="s">jekyll build --source hello_umas --destination docs</span><span class="sh">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">===== push source =====</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">git</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">add</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">],</span> <span class="n">cwd</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">git</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">commit</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-m</span><span class="sh">"</span><span class="p">,</span> <span class="n">commit_txt</span><span class="p">],</span> <span class="n">cwd</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">git</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">push</span><span class="sh">"</span><span class="p">],</span> <span class="n">cwd</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>好的，现在只需要一个脚本就可以打包上传修改了</li>
  <li>至于为什么前面用os.system后面用subprocess，因为两段代码分别是从不同的脚本里拷过来的（所以只用了3分钟），两个命令在这里没什么区别</li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="python" /><summary type="html"><![CDATA[写代码用了3分钟 就是说这个脚本得至少跑60次才能回本]]></summary></entry><entry><title type="html">jekyll: add_new 添加新文章</title><link href="/jekyll/python/add_new/" rel="alternate" type="text/html" title="jekyll: add_new 添加新文章" /><published>2023-07-01T10:00:00+08:00</published><updated>2023-07-01T10:00:00+08:00</updated><id>/jekyll/python/add_new</id><content type="html" xml:base="/jekyll/python/add_new/"><![CDATA[<ul>
  <li>首先安装 jekyll-post插件
    <ul>
      <li>tmd根本没有这个插件，GPT就知道胡诌</li>
    </ul>
  </li>
  <li>没找到好用的插件，python写一个，也不算麻烦</li>
  <li>需求有以下几点；
    <ul>
      <li>按命名格式创建md文件</li>
      <li>md文件写入yaml头</li>
      <li>创建图片目录</li>
      <li>md文件预先写入一行图片，后面添加图片可以直接复制粘贴</li>
      <li>md文件预先写入raw代码</li>
    </ul>
  </li>
  <li>代码如下
    <ul>
      <li>注意因为代码里包含了{% raw %}{% endraw %}字符串，为了在页面展示所以原始md文件中使用了双大括号转义符，<strong><em>这段代码复制使用时需要替换raw和endraw部分</em></strong>（很奇怪为什么不转义会报错，但转移后的字符串在代码中并没有被解析）</li>
      <li>注意info和title的文本比较复杂，最好用双层引号，保证不会被转义</li>
    </ul>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
2023.7.1
创建新文章
- 每次新建文章都要手动按时间命名，还要添加yaml头，挺麻烦的
- 添加图片创建目录也很麻烦
- 所以做了这个
</span><span class="sh">'''</span>

<span class="c1"># 修改这里：md文件名
</span><span class="n">file_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">add_new_test</span><span class="sh">"</span>
<span class="c1"># 修改这里：md放在哪个目录下
</span><span class="nb">dir</span> <span class="o">=</span> <span class="sh">"</span><span class="s">jekyll</span><span class="sh">"</span>
<span class="c1"># 修改这里：文章标题
</span><span class="n">title</span> <span class="o">=</span> <span class="sh">"'</span><span class="s">title</span><span class="sh">'"</span>
<span class="c1"># 修改这里：文章介绍
</span><span class="n">info</span> <span class="o">=</span> <span class="sh">"'</span><span class="s">info</span><span class="sh">'"</span>
<span class="c1"># 修改这里：文章分类
</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">jekyll</span><span class="sh">"</span><span class="p">]</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="n">script_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">realpath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>
<span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">script_path</span><span class="p">)</span>

<span class="n">yaml</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">layout</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">post</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">info</span><span class="sh">'</span><span class="p">:</span> <span class="n">info</span><span class="p">,</span>
    <span class="c1"># 注意时间必须要有+0800才能正确识别
</span>    <span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d %H:%M:%S %z</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> +0800</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">categories</span><span class="sh">'</span><span class="p">:</span> <span class="n">categories</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">toc</span><span class="sh">'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1"># 创建md文件
</span><span class="n">file_name</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="o">+</span> <span class="n">file_name</span>
<span class="n">file_name_md</span> <span class="o">=</span> <span class="n">file_name</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.md</span><span class="sh">"</span>
<span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">script_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">hello_umas/_posts</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="p">,</span> <span class="n">file_name_md</span><span class="p">))</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w+</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">md</span><span class="p">:</span>
    <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">---</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">yaml</span><span class="p">:</span>
        <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="p">)</span>
        <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">yaml</span><span class="p">[</span><span class="n">key</span><span class="p">]))</span>
        <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">---</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># 写入一张图片
</span>    <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n\n</span><span class="s">![引入图片]({{site.url}}/image/%s/%s/image_1.png)</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">dir</span><span class="p">,</span> <span class="n">file_name</span><span class="p">))</span>
    <span class="c1"># 写入raw代码
</span>    <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n\n</span><span class="s">{{ </span><span class="sh">"</span><span class="p">{</span><span class="o">%</span> <span class="n">raw</span> <span class="sh">"</span><span class="s"> }}%}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">```</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">```</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">md</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">{{ </span><span class="sh">"</span><span class="p">{</span><span class="o">%</span> <span class="n">endraw</span> <span class="sh">"</span><span class="s"> }}%}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 创建图片目录
</span><span class="n">image_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">script_path</span><span class="p">,</span><span class="sh">"</span><span class="s">hello_umas/image</span><span class="sh">"</span><span class="p">,</span><span class="nb">dir</span><span class="p">,</span><span class="n">file_name</span><span class="p">))</span>
<span class="n">gitkeep</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">image_path</span><span class="p">,</span><span class="sh">"</span><span class="s">.gitkeep</span><span class="sh">"</span><span class="p">))</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">image_path</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">gitkeep</span><span class="p">,</span><span class="sh">"</span><span class="s">w+</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">keep</span><span class="p">:</span>
    <span class="k">pass</span>
</code></pre></div></div>

<ul>
  <li>
    <p>放在项目下add.py，使用前在代码里修改头部信息</p>
  </li>
  <li>
    <p>2023.7.5增加了两行代码，创建完成后自动打开新的md文件和图片文件夹</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 打开图片目录
</span><span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">"</span><span class="s">explorer.exe %s</span><span class="sh">"</span> <span class="o">%</span> <span class="n">image_path</span><span class="p">)</span>

<span class="c1"># 打开新md文件
# 注意路径有空格时需要在外层再套单引号
</span><span class="n">vscode</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'"</span><span class="s">D:\p-program\vscode\Microsoft VS Code\Code.exe</span><span class="sh">"'</span>
<span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">"</span><span class="s">%s %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">vscode</span><span class="p">,</span><span class="n">file_path</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="jekyll" /><category term="python" /><summary type="html"><![CDATA[首先安装 jekyll-post插件 tmd根本没有这个插件，GPT就知道胡诌]]></summary></entry><entry><title type="html">windows: redmi-ax6000路由器刷openwrt固件</title><link href="/windows/Redmi_openwrt/" rel="alternate" type="text/html" title="windows: redmi-ax6000路由器刷openwrt固件" /><published>2023-06-30T09:48:00+08:00</published><updated>2023-06-30T09:48:00+08:00</updated><id>/windows/Redmi_openwrt</id><content type="html" xml:base="/windows/Redmi_openwrt/"><![CDATA[<ul>
  <li>参考：
    <ul>
      <li>https://blog.csdn.net/sxf1061700625/article/details/130328437</li>
    </ul>
  </li>
  <li>路由器初始管理页面192.168.31.1</li>
  <li>
    <p>常用设置 - 系统设置 - 手动升级，选中刚才下载的redmi-ax6000-1.2.8.bin</p>
  </li>
  <li>管理页url可以看到stoc</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.31.1/cgi-bin/luci/;stok=2d884ca60cc3e0b7d0976cd02a662e41/web/setting/upgrade
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stok=2d884ca60cc3e0b7d0976cd02a662e41
</code></pre></div></div>

<ul>
  <li>开启调试模式：替换下面代码的stock，浏览器打开这个链接，返回{code:0}</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.31.1/cgi-bin/luci/;stok=2d884ca60cc3e0b7d0976cd02a662e41/api/misystem/set_sys_time?timezone=%20%27%20%3B%20zz%3D%24%28dd%20if%3D%2Fdev%2Fzero%20bs%3D1%20count%3D2%202%3E%2Fdev%2Fnull%29%20%3B%20printf%20%27%A5%5A%25c%25c%27%20%24zz%20%24zz%20%7C%20mtd%20write%20-%20crash%20%3B%20
</code></pre></div></div>

<ul>
  <li>请求重启</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.31.1/cgi-bin/luci/;stok=2d884ca60cc3e0b7d0976cd02a662e41/api/misystem/set_sys_time?timezone=%20%27%20%3b%20reboot%20%3b%20
</code></pre></div></div>

<ul>
  <li>开启telnet</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.31.1/cgi-bin/luci/;stok=05f781c1c50e025342246e4c9a4765e3/api/misystem/set_sys_time?timezone=%20%27%20%3B%20bdata%20set%20telnet_en%3D1%20%3B%20bdata%20set%20ssh_en%3D1%20%3B%20bdata%20set%20uart_en%3D1%20%3B%20bdata%20commit%20%3B%20
</code></pre></div></div>

<ul>
  <li>重启，等待白灯亮起</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.31.1/cgi-bin/luci/;stok=05f781c1c50e025342246e4c9a4765e3/api/misystem/set_sys_time?timezone=%20%27%20%3b%20reboot%20%3b%20
</code></pre></div></div>

<ul>
  <li>打开终端用telnet连接（windows默认没这个命令，可以用wsl）</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>telnet 192.168.31.1
</code></pre></div></div>

<ul>
  <li>连接后用下面的命令解锁ssh</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /tmp &amp;&amp; curl --silent -O https://fastly.jsdelivr.net/gh/miaoermua/unlock-redmi-ax6000@main/setup.sh &amp;&amp; chmod +x setup.sh &amp;&amp; ./setup.sh
</code></pre></div></div>

<ul>
  <li>通过ssh进入路由器，密码admin</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh root@192.168.31.1
</code></pre></div></div>

<ul>
  <li>下载uboot</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /tmp &amp;&amp; curl --silent -O https://fastly.jsdelivr.net/gh/miaoermua/unlock-redmi-ax6000@main/uboot.sh &amp;&amp; chmod +x uboot.sh &amp;&amp; ./uboot.sh
</code></pre></div></div>

<ul>
  <li>备份原系统</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp root@192.168.31.1:/tmp/mtd4_Factory.bin D:\s-workspace\ax6000\backup\
scp root@192.168.31.1:/tmp/mtd5_FIP.bin D:\s-workspace\ax6000\backup\
</code></pre></div></div>

<ul>
  <li>刷入uboot</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mtd erase FIP
mtd write /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIP
mtd verify /tmp/mt7986_redmi_ax6000-fip-fixed-parts.bin FIP
</code></pre></div></div>

<ul>
  <li>网线插入，网络和共享中心里修改以太网属性，ipv4</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IP 地址：192.168.31.2
子网掩码：255.255.255.0
网关地址：192.168.31.1
</code></pre></div></div>

<ul>
  <li>断电，按住reset后通电，至少按住15秒</li>
  <li>
    <p>访问http://192.168.31.1/可以看到固件升级页面</p>
  </li>
  <li>下载固件
    <ul>
      <li>https://github.com/miaoermua/CatWrt/releases/tag/v23.2-Wireless-mt7986a</li>
    </ul>
  </li>
  <li>
    <p>在固件升级页面中上传，点击update，等待complete或者白灯亮起，progess页面需要刷新才能显示complete，如果显示failed就再上传刷写一次</p>
  </li>
  <li>
    <p>之后记得把电脑的ipv4改为自动</p>
  </li>
  <li>
    <p>刷完之后从192.168.1.4进入openwrt管理页，账号root，密码password</p>
  </li>
  <li>openwrt设置：</li>
  <li>
    <p>网络 - 接口 - lan，修改ipv4网关192.168.1.4，ipv4广播192.168.1.0</p>
  </li>
  <li>
    <p>wan口里设置pppoe拨号</p>
  </li>
  <li>
    <p>wifi名和密码在 [网络 - 无线 - 接口配置] 里面修改</p>
  </li>
  <li>clash没有内核，需要手动下载然后scp</li>
</ul>]]></content><author><name></name></author><category term="windows" /><summary type="html"><![CDATA[参考： https://blog.csdn.net/sxf1061700625/article/details/130328437]]></summary></entry><entry><title type="html">ts: import TypeScript导入文件</title><link href="/ts/import/" rel="alternate" type="text/html" title="ts: import TypeScript导入文件" /><published>2023-06-29T15:20:00+08:00</published><updated>2023-06-29T15:20:00+08:00</updated><id>/ts/import</id><content type="html" xml:base="/ts/import/"><![CDATA[<ul>
  <li>
    <p>传统方法直接引入报错：无法找到模块“@/utils/api_config.js”的声明文件</p>
  </li>
  <li>
    <p>法1，使用require</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">get_wsurl</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">@/utils/api_config.js</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>法2，添加声明文件xxx.d.ts</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">@/utils/api_axios.js</span><span class="dl">"</span>
<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">@/utils/api_config.js</span><span class="dl">"</span>
<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">@/utils/api_usage.js</span><span class="dl">"</span>
<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">@/utils/utils_tools.js</span><span class="dl">"</span>
</code></pre></div></div>

<ul>
  <li>法3，js改为ts，这时可能会报错An import path can only end with a ‘.ts’ extension when ‘allowImportingTsExtensions’ is enabled.</li>
  <li>修改tsconfig.json，根据提示添加：</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">allowImportingTsExtensions</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">noEmit</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</code></pre></div></div>

<ul>
  <li>这个方法有可能报错Unknown compiler option ‘allowImportingTsExtensions’.</li>
</ul>]]></content><author><name></name></author><category term="ts" /><summary type="html"><![CDATA[传统方法直接引入报错：无法找到模块“@/utils/api_config.js”的声明文件]]></summary></entry><entry><title type="html">jekyll: count 文章和类别计数</title><link href="/jekyll/count/" rel="alternate" type="text/html" title="jekyll: count 文章和类别计数" /><published>2023-06-29T15:10:00+08:00</published><updated>2023-06-29T15:10:00+08:00</updated><id>/jekyll/count</id><content type="html" xml:base="/jekyll/count/"><![CDATA[<h2 id="实现">实现</h2>

<ul>
  <li>这一行添加在了home.html里，显示在所有文章前面第一行</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;h3&gt;</span>Articles: {{ site.posts.size }} , Categories: {{ site.categories | size }}<span class="nt">&lt;/h3&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[实现]]></summary></entry><entry><title type="html">bash: rpi_status 树莓派状态监控脚本</title><link href="/bash/raspberry_pi/rpi_status/" rel="alternate" type="text/html" title="bash: rpi_status 树莓派状态监控脚本" /><published>2023-06-29T14:45:00+08:00</published><updated>2023-06-29T14:45:00+08:00</updated><id>/bash/raspberry_pi/rpi_status</id><content type="html" xml:base="/bash/raspberry_pi/rpi_status/"><![CDATA[<ul>
  <li>简单介绍项目需求
    <ul>
      <li>略</li>
    </ul>
  </li>
  <li>sh脚本</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#! /bin/bash</span>

<span class="c"># ### - rpi_status.sh [显示树莓派状态：温度]</span>
<span class="c"># - 脚本调用  </span>
<span class="c"># ```./show.sh```</span>


<span class="k">while</span> <span class="o">[</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>

    <span class="c"># 输出时间</span>
    <span class="nb">date</span>

    <span class="c"># cpu温度</span>
    <span class="nv">get_temp</span><span class="o">=</span><span class="sb">`</span><span class="nb">cat</span> /sys/class/thermal/thermal_zone0/temp<span class="sb">`</span>
    <span class="nv">temprature</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="s2">"scale=3; </span><span class="nv">$get_temp</span><span class="s2">/1000"</span> | bc<span class="sb">`</span>
    <span class="nb">echo</span> <span class="s2">"temperature: </span><span class="nv">$temprature</span><span class="s2"> C"</span>

    <span class="c"># 网络监控</span>
    <span class="nb">cat</span> /proc/net/dev

    <span class="c"># cpu占用</span>
    

    <span class="c"># 内存占用</span>


    <span class="c"># 睡眠1秒，清屏</span>
    /bin/sleep 1
    clear
<span class="k">done</span>


</code></pre></div></div>]]></content><author><name></name></author><category term="bash" /><category term="raspberry_pi" /><summary type="html"><![CDATA[简单介绍项目需求 略]]></summary></entry></feed>