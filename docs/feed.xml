<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-07-10T13:35:21+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for my new site here. It will appear in my document head meta (for Google search results) and in my feed.xml site description.</subtitle><entry><title type="html">windows: 华为云terraria云服务器</title><link href="/windows/terraria/" rel="alternate" type="text/html" title="windows: 华为云terraria云服务器" /><published>2023-07-10T12:44:47+08:00</published><updated>2023-07-10T12:44:47+08:00</updated><id>/windows/terraria</id><content type="html" xml:base="/windows/terraria/"><![CDATA[<h2 id="参考">参考</h2>

<ul>
  <li>官方
    <ul>
      <li>https://terraria.fandom.com/wiki/Server</li>
    </ul>
  </li>
  <li>https://zhuanlan.zhihu.com/p/94570876</li>
</ul>

<h2 id="下载服务器">下载服务器</h2>

<ul>
  <li>安装必备工具</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> wget tmux unzip
</code></pre></div></div>

<ul>
  <li>下载服务器
    <ul>
      <li>所有版本：https://terraria.fandom.com/wiki/Server#Downloads</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://terraria.org/api/download/pc-dedicated-server/terraria-server-1449.zip
</code></pre></div></div>

<ul>
  <li>解压</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unzip terraria-server<span class="k">*</span>
</code></pre></div></div>

<h2 id="启动服务器">启动服务器</h2>

<ul>
  <li>启动</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>1449/Linux
<span class="nb">chmod</span> +x TerrariaServer.bin.x86_64
./TerrariaServer.bin.x86_64 
</code></pre></div></div>

<ul>
  <li>配置服务器
    <ul>
      <li>服务器启动成功后进入选择界面</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error Logging Enabled.
Terraria Server v1.4.4.9

n		New World
d &lt;number&gt;	Delete World

Choose World: 
</code></pre></div></div>

<ul>
  <li>输入数字选择已有世界、n为创建新世界、d+数字为删除对应编号的世界</li>
  <li>之后就是跟着提示选就行了（略）</li>
  <li>等待进度条跑完之后会回到Choose World，这时候再选择刚刚创建好的世界，进行一些配置之后等到下面这个界面就好了</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Terraria Server v1.4.4.9

Listening on port 4090
Type <span class="s1">'help'</span> <span class="k">for </span>a list of commands.

: Server started
</code></pre></div></div>

<ul>
  <li>测试端口连通性用telnet工具（windows需要在启用或关闭windows功能里开启telnet客户端）（或者直接用wsl就好了）</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>telnet <span class="o">[</span>ip] <span class="o">[</span>port]
</code></pre></div></div>

<ul>
  <li>
    <p>记得在华为云安全组里把这个端口开放（安全组 - 配置规则 - 入方向规则 - 添加4090）</p>
  </li>
  <li>4090不好操作，改成默认7777了</li>
  <li>
    <p>服务器IP：<code class="language-plaintext highlighter-rouge">123.249.20.87</code>，端口<code class="language-plaintext highlighter-rouge">7777</code></p>
  </li>
  <li>一条命令运行服务器</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"1</span><span class="se">\n\n\n\n\n</span><span class="s2">"</span> | /root/terraria/1449/Linux/TerrariaServer.bin.x86_64
</code></pre></div></div>

<ul>
  <li>后台运行</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">nohup </span>bash <span class="nt">-c</span> <span class="s1">'echo -e "1\n\n\n\n\n" | /root/terraria/1449/Linux/TerrariaServer.bin.x86_64'</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1 &amp;
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>

<!-- ![引入图片](/image/windows/2023-07-10-terraria/image_1.jpg) -->]]></content><author><name></name></author><category term="windows" /><summary type="html"><![CDATA[参考]]></summary></entry><entry><title type="html">git: 添加ssh公钥</title><link href="/git/git_ssh/" rel="alternate" type="text/html" title="git: 添加ssh公钥" /><published>2023-07-10T12:39:59+08:00</published><updated>2023-07-10T12:39:59+08:00</updated><id>/git/git_ssh</id><content type="html" xml:base="/git/git_ssh/"><![CDATA[<ul>
  <li>添加ssh公钥
    <ul>
      <li>gitee: https://gitee.com/profile/sshkeys</li>
      <li>github: https://github.com/settings/keys</li>
    </ul>
  </li>
  <li>电脑生成公钥</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"1970313791@qq.com"</span>  
<span class="nb">cat</span> ~/.ssh/id_ed25519.pub

git config <span class="nt">--global</span> user.email <span class="s2">"1970313791@qq.com"</span>
git config <span class="nt">--global</span> user.name <span class="s2">"umas"</span>
</code></pre></div></div>

<ul>
  <li>git由http改为ssh</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote <span class="nb">rm </span>origin 
git remote add origin git@gitee.com:umas/iiir-server-node.git
git push <span class="nt">--set-upstream</span> origin develop
</code></pre></div></div>
<ul>
  <li>测试</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh -T git@gitee.com
ssh -T git@github.com
</code></pre></div></div>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[添加ssh公钥 gitee: https://gitee.com/profile/sshkeys github: https://github.com/settings/keys]]></summary></entry><entry><title type="html">git: hello_world</title><link href="/git/hello_world/" rel="alternate" type="text/html" title="git: hello_world" /><published>2023-07-10T12:34:42+08:00</published><updated>2023-07-10T12:34:42+08:00</updated><id>/git/hello_world</id><content type="html" xml:base="/git/hello_world/"><![CDATA[<h2 id="基操push-add">基操push add</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"xxx"</span>
git push
</code></pre></div></div>

<h2 id="查看切换分支">查看/切换分支</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">-a</span>
git checkout xxx
</code></pre></div></div>

<h2 id="撤销commit和add">撤销commit和add</h2>

<ul>
  <li>首先查看记录（q键退出）</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log
</code></pre></div></div>

<ul>
  <li>回退到上一个commit</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--soft</span> &lt;上一个的id&gt;
</code></pre></div></div>

<ul>
  <li>撤销add</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset &lt;文件名&gt;
</code></pre></div></div>

<h2 id="删除项目所有内容">删除项目所有内容</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nb">rm</span> <span class="nt">-r</span> <span class="nb">.</span>
<span class="c"># 这将递归删除所有文件和文件夹，包括 `.git` 文件夹。</span>
git commit <span class="nt">-m</span> <span class="s2">"Remove all files"</span>
git push origin main
</code></pre></div></div>

<h2 id="清空历史记录">清空历史记录</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">--orphan</span> latest_branch
git add <span class="nt">-A</span>
git commit <span class="nt">-am</span> <span class="s2">"Initial commit"</span>
git branch <span class="nt">-D</span> main
git branch <span class="nt">-m</span> main
git push <span class="nt">-f</span> origin main
</code></pre></div></div>

<ul>
  <li>上述命令的作用是创建一个新的分支 <code class="language-plaintext highlighter-rouge">latest_branch</code>，将所有文件添加到该分支并提交一个新的空的初始提交，然后删除 <code class="language-plaintext highlighter-rouge">main</code> 分支并将 <code class="language-plaintext highlighter-rouge">latest_branch</code> 分支重命名为 <code class="language-plaintext highlighter-rouge">main</code> 分支。最后，使用 <code class="language-plaintext highlighter-rouge">git push -f</code> 命令强制推送到远程仓库。</li>
</ul>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[基操push add]]></summary></entry><entry><title type="html">docker: 添加国内镜像</title><link href="/docker/mirror/" rel="alternate" type="text/html" title="docker: 添加国内镜像" /><published>2023-07-10T12:26:32+08:00</published><updated>2023-07-10T12:26:32+08:00</updated><id>/docker/mirror</id><content type="html" xml:base="/docker/mirror/"><![CDATA[<h2 id="ubuntu">ubuntu</h2>

<ul>
  <li>编辑配置文件</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/docker/daemon.json
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
    <span class="s2">"registry-mirrors"</span>: <span class="o">[</span>
        <span class="s2">"https://ung2thfc.mirror.aliyuncs.com"</span>,
        <span class="s2">"https://registry.docker-cn.com"</span>,
        <span class="s2">"http://hub-mirror.c.163.com"</span>,
        <span class="s2">"https://docker.mirrors.ustc.edu.cn"</span>
    <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>重启docker</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart docker
</code></pre></div></div>

<ul>
  <li>查看</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker info
</code></pre></div></div>

<h2 id="windows">windows</h2>

<ul>
  <li>阿里云加速
    <ul>
      <li>https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</li>
    </ul>
  </li>
</ul>

<p><img src="/image/docker/2023-07-10-mirror/image_1.jpg" alt="引入图片" /></p>

<p><img src="/image/docker/2023-07-10-mirror/image_2.jpg" alt="引入图片" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"registry-mirrors":["https://xxxxxx.mirror.aliyuncs.com"]
</code></pre></div></div>]]></content><author><name></name></author><category term="docker" /><summary type="html"><![CDATA[ubuntu]]></summary></entry><entry><title type="html">css: display:flex</title><link href="/css/css_flex/" rel="alternate" type="text/html" title="css: display:flex" /><published>2023-07-10T10:57:59+08:00</published><updated>2023-07-10T10:57:59+08:00</updated><id>/css/css_flex</id><content type="html" xml:base="/css/css_flex/"><![CDATA[<h2 id="参考">参考</h2>

<ul>
  <li>https://css-tricks.com/snippets/css/a-guide-to-flexbox/</li>
</ul>

<h2 id="来看看">来看看</h2>

<p><img src="/image/css/2023-07-10-css_flex/image_1.png" alt="引入图片" />
<img src="/image/css/2023-07-10-css_flex/image_2.png" alt="引入图片" /></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span> <span class="c">/* or inline-flex */</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="排序">排序</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_3.png" alt="引入图片" /></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item1</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="c">/* default is 0 */</span>
<span class="p">}</span>
<span class="nc">.item2</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span> <span class="c">/* default is 0 */</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="方向">方向</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_4.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span> <span class="o">|</span> <span class="n">row-reverse</span> <span class="o">|</span> <span class="n">column</span> <span class="o">|</span> <span class="n">column-reverse</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// row（默认值）：在 ;从右到左ltrrtl</span>
<span class="c1">// row-reverse：从右到左;从左到右ltrrtl</span>
<span class="c1">// column：与上相同，但从上到下row</span>
<span class="c1">// column-reverse：与相同，但从下到上row-reverse</span>
</code></pre></div></div>

<h3 id="换行">换行</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_5.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">nowrap</span> <span class="o">|</span> <span class="n">wrap</span> <span class="o">|</span> <span class="n">wrap-reverse</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// nowrap（默认值）：所有弹性项目都将在一行上</span>
<span class="c1">// wrap：弹性项目将从上到下换行到多行。</span>
<span class="c1">// wrap-reverse：弹性项目将从下到上换行到多行</span>
</code></pre></div></div>

<h3 id="宽度">宽度</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_6.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item1</span> <span class="p">{</span>
    <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="cm">/* default 0 */</span>
<span class="p">}</span>
<span class="nc">.item2</span> <span class="p">{</span>
    <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span> <span class="cm">/* default 0 */</span>
<span class="p">}</span>
<span class="nc">.item3</span> <span class="p">{</span>
    <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="cm">/* default 0 */</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="位置">位置</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_7.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="n">space-between</span> <span class="o">|</span> <span class="n">space-around</span> <span class="o">|</span> <span class="n">space-evenly</span> <span class="o">|</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="nb">left</span> <span class="o">|</span> <span class="nb">right</span> <span class="o">...</span> <span class="o">+</span> <span class="n">safe</span> <span class="o">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="对齐子元素">对齐（子元素）</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_8.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
    <span class="nl">align-self</span><span class="p">:</span> <span class="nb">auto</span> <span class="o">|</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="对齐父元素">对齐（父元素）</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_9.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">first</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">last</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="n">self-start</span> <span class="o">|</span> <span class="n">self-end</span> <span class="o">+</span> <span class="o">...</span> <span class="n">safe</span> <span class="o">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="对齐内容">对齐（内容）</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_9.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">align-content</span><span class="p">:</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="n">space-between</span> <span class="o">|</span> <span class="n">space-around</span> <span class="o">|</span> <span class="n">space-evenly</span> <span class="o">|</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">first</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">last</span> <span class="nb">baseline</span> <span class="o">+</span> <span class="o">...</span> <span class="n">safe</span> <span class="o">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="间距">间距</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_9.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="err">...
    </span><span class="na">gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="na">gap</span><span class="p">:</span> <span class="m">10px</span> <span class="m">20px</span><span class="p">;</span> <span class="cm">/* row-gap column gap */</span>
    <span class="na">row-gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="nl">column-gap</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="css" /><summary type="html"><![CDATA[参考]]></summary></entry><entry><title type="html">css: 文字样式</title><link href="/css/css_text/" rel="alternate" type="text/html" title="css: 文字样式" /><published>2023-07-10T10:47:43+08:00</published><updated>2023-07-10T10:47:43+08:00</updated><id>/css/css_text</id><content type="html" xml:base="/css/css_text/"><![CDATA[<h2 id="基本语法">基本语法</h2>

<ul>
  <li>文字不换行</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>white-space: nowrap
</code></pre></div></div>

<!-- ![引入图片](/image/css/2023-07-10-css_text/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="css" /><summary type="html"><![CDATA[基本语法]]></summary></entry><entry><title type="html">electron: 打包改名改图标</title><link href="/electron/build_icon/" rel="alternate" type="text/html" title="electron: 打包改名改图标" /><published>2023-07-10T10:28:43+08:00</published><updated>2023-07-10T10:28:43+08:00</updated><id>/electron/build_icon</id><content type="html" xml:base="/electron/build_icon/"><![CDATA[<h2 id="解决左上角图标不显示">解决左上角图标不显示：</h2>
<ul>
  <li>网上说是生成的ico文件格式不对</li>
  <li>解决方法：改用png，像素还是256</li>
  <li>新问题：左上角图标显示了一半（？？？）</li>
  <li>改用png之后自动生成了dist/.icon-ico/icon.ico，有帖子说用这个ico，也不行</li>
  <li>放大缩小重新生成了几次ico，问题没解决</li>
  <li>
    <p>第二天发现下面任务栏的图标也只显示一半了（？？？）</p>
  </li>
  <li>2022.8.28图标修好了
    <ul>
      <li>正确的配置是在background.ts里设置图标，打包之后因为路径问题没有成功加载，像python脚本那样直接拷贝出来，区分开发环境和生产环境的路径</li>
    </ul>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">icon</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">development</span><span class="dl">"</span> <span class="c1">// 图标路径在打包之后不能识别，使用extraResources单独拷贝出来</span>
<span class="p">?</span> <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nf">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">public/static/icon/mati_ei_256.ico</span><span class="dl">"</span><span class="p">)</span>
<span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nf">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">resources/static/icon/mati_ei_256.ico</span><span class="dl">"</span><span class="p">),</span>
</code></pre></div></div>

<ul>
  <li>之前可能是因为asar压缩导致只显示一半？Vue.config.js里的win.icon也要配置，这个是exe文件自己的图标</li>
</ul>

<h2 id="打包后左上角名称">打包后左上角名称</h2>

<ul>
  <li>尝试修改打包后的左上角名称也失败</li>
  <li>方法1：直接在package.json中修改name，这个方法改中文会报错，而且不被推荐</li>
  <li>方法2：require(‘electron’).app.setName(name)
    <ul>
      <li>setName是官方文档中出现的方法</li>
      <li>setName不管加在哪都不行，有时候可以看到启动瞬间名字被改掉了但马上就变回来</li>
      <li>参考了官方所有打包参数：
        <ul>
          <li>https://www.electron.build/configuration/configuration</li>
          <li>没有找到定义左上角name的键</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>把package.json的name删了，再使用setName就不会变了</li>
  <li>后面buid时候会报错</li>
  <li>2022.8.28改好了</li>
  <li>setName函数无论如何都会被刷掉，正确的修改方法是找到public/index.html</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;title&gt;</span>电脑的配件<span class="nt">&lt;/title&gt;</span>
</code></pre></div></div>

<ul>
  <li>这里的优先级是最高的</li>
</ul>

<!-- ![引入图片](/image/electron/2023-07-10-build_icon/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="electron" /><summary type="html"><![CDATA[解决左上角图标不显示： 网上说是生成的ico文件格式不对 解决方法：改用png，像素还是256 新问题：左上角图标显示了一半（？？？） 改用png之后自动生成了dist/.icon-ico/icon.ico，有帖子说用这个ico，也不行 放大缩小重新生成了几次ico，问题没解决 第二天发现下面任务栏的图标也只显示一半了（？？？） 2022.8.28图标修好了 正确的配置是在background.ts里设置图标，打包之后因为路径问题没有成功加载，像python脚本那样直接拷贝出来，区分开发环境和生产环境的路径]]></summary></entry><entry><title type="html">electron: js调用python</title><link href="/electron/python/js_py/" rel="alternate" type="text/html" title="electron: js调用python" /><published>2023-07-10T10:16:29+08:00</published><updated>2023-07-10T10:16:29+08:00</updated><id>/electron/python/js_py</id><content type="html" xml:base="/electron/python/js_py/"><![CDATA[<h2 id="参考">参考</h2>

<ul>
  <li>
    <p>https://www.skcript.com/svr/how-to-execute-python-scripts-in-electron-and-nodejs</p>
  </li>
  <li>
    <p>官方：</p>
    <ul>
      <li>https://www.npmjs.com/package/python-shell</li>
    </ul>
  </li>
</ul>

<h2 id="安装">安装</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>python-shell <span class="nt">--save</span>
</code></pre></div></div>

<h2 id="一个简单的例子">一个简单的例子</h2>

<ul>
  <li>使用new PythonShell调用脚本</li>
  <li>on message捕获python所有的stdout输出</li>
  <li>（注意到使用subprocess.run调出一个新的terminal不能成功）</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">PythonShell</span> <span class="p">}</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">python-shell</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">pyshell</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PythonShell</span><span class="p">(</span>
    <span class="dl">"</span><span class="s2">src/views/test_call_py/py_script/hello_world.py</span><span class="dl">"</span>
<span class="p">);</span>
<span class="nx">pyshell</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">js_input_1</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">pyshell</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">js_input_2</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">pyshell</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">pyshell</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">finished</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="解决打包后路径错误问题">解决打包后路径错误问题</h2>

<ul>
  <li>使用相对路径</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">__static</span><span class="p">,</span> <span class="dl">"</span><span class="s2">static/test/data.txt</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>其中__static从public开始定位</li>
  <li>vue.config.js添加规则</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pluginOptions</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">electronBuilder</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">builderOptions</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">extraResources</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public/static</span><span class="dl">'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="dl">'</span><span class="s1">static</span><span class="dl">'</span> <span class="p">}</span>
<span class="p">],</span>
</code></pre></div></div>

<ul>
  <li>
    <p>观察发现txt读取时使用的目录是
dist_electron\win-unpacked\resources\app.asar\static\test\data.txt</p>
  </li>
  <li>python也从asar文件中读取，但txt能找到，python找不到，config中添加的直接拷贝目录并没有被使用</li>
  <li>安装asar解包工具</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --engine-strict asar --location=global
asar e app.asar app
</code></pre></div></div>
<ul>
  <li>解包后发现python文件已经被正确复制进去了</li>
  <li>查阅资料发现打包在asar文件内的python确实不能运行，采用planB，不打包py文件</li>
  <li>config添加不打包目录</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">builderOptions</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">asar</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">asarUnpack</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
            <span class="dl">"</span><span class="s2">public/static/python</span><span class="dl">"</span>
<span class="p">],</span>
</code></pre></div></div>

<ul>
  <li>如果工作正常，在app.asar可用看到unpacked 目录
    <ul>
      <li>我没看到</li>
    </ul>
  </li>
  <li>直接”asar”: false,正常应该能看到/app目录
    <ul>
      <li>这个能行，app.asar变成/app了</li>
      <li>但是__static默认访问的是app.asar</li>
    </ul>
  </li>
  <li>__static只能定位到asar打包的目录，改用process.cwd()可以定位到安装目录/开发目录</li>
  <li>这样的话理论上最佳方案应该是unpack，这个日后再说</li>
  <li>使用process.cwd()之后的改动：
    <ul>
      <li>因为改了路径拼接方法，所以asar还是可以接着用的</li>
      <li>“asar”: true,</li>
      <li>将python静态资源单独拷贝出来</li>
    </ul>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">extraResources</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span> <span class="na">from</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public/static/python</span><span class="dl">'</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="dl">'</span><span class="s1">static/python</span><span class="dl">'</span> <span class="p">}</span> <span class="c1">// 静态资源拷贝目录</span>
        <span class="p">],</span>
</code></pre></div></div>

<ul>
  <li>这时存在一个问题，开发环境下路径是public/static/python，但生产环境中路径是resources/static/python</li>
  <li>进行一步三元表达式环境区分：</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">py_path</span> <span class="o">=</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">development</span><span class="dl">"</span>
        <span class="p">?</span> <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nf">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">public/static/python</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nf">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">resources/static/python</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<!-- ![引入图片](/image/electron/2023-07-10-js_py/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="electron" /><category term="python" /><summary type="html"><![CDATA[参考]]></summary></entry><entry><title type="html">amtc: 本地前端</title><link href="/amtc/nginx/rpi_frontend/" rel="alternate" type="text/html" title="amtc: 本地前端" /><published>2023-07-10T09:14:54+08:00</published><updated>2023-07-10T09:14:54+08:00</updated><id>/amtc/nginx/rpi_frontend</id><content type="html" xml:base="/amtc/nginx/rpi_frontend/"><![CDATA[<h2 id="网页打包">网页打包</h2>

<ul>
  <li>简化部署，树莓派上就不配置开发环境了</li>
  <li>只把build完的dist文件夹放进去</li>
</ul>

<h2 id="配置nginx">配置nginx</h2>

<ul>
  <li>安装</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>nginx
</code></pre></div></div>

<ul>
  <li>修改/etc/nginx/nginx.conf中的user为root</li>
  <li>添加配置 /etc/nginx/conf.d/localfront.conf</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 一个简单的frontend.conf</span>
server <span class="o">{</span>
listen 4080<span class="p">;</span>
server_name localfront<span class="p">;</span> 
root /home/amtc/lf_localfront/lfdist<span class="p">;</span>
index index.html<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>启动服务</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service nginx start
或：
nginx <span class="nt">-s</span> reload
查看状态：
service nginx status
</code></pre></div></div>

<h2 id="设置开机自启">设置开机自启</h2>

<ul>
  <li>方法同上一页配置opcua时添加的后端</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vim /etc/systemd/system/start_localfront.service
</code></pre></div></div>

<ul>
  <li>写入以下内容</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>Unit]
<span class="nv">Description</span><span class="o">=</span>Nginx HTTP Server
<span class="nv">After</span><span class="o">=</span>network.target

<span class="o">[</span>Service]
<span class="nv">Type</span><span class="o">=</span>forking
<span class="nv">ExecStart</span><span class="o">=</span>/usr/sbin/nginx
<span class="nv">ExecReload</span><span class="o">=</span>/usr/sbin/nginx <span class="nt">-s</span> reload
<span class="nv">ExecStop</span><span class="o">=</span>/usr/sbin/nginx <span class="nt">-s</span> stop
<span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>

<span class="o">[</span>Install]
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div></div>

<ul>
  <li>控制</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 启动服务</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>start_localfront.service
<span class="c"># 查看状态</span>
<span class="nb">sudo </span>systemctl status start_localfront.service
</code></pre></div></div>

<ul>
  <li>访问:192.168.1.101:4080</li>
</ul>

<!-- ![引入图片](/image/amtc/2023-07-10-py_type/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="amtc" /><category term="nginx" /><summary type="html"><![CDATA[网页打包]]></summary></entry><entry><title type="html">python: 类型定义</title><link href="/python/py_type/" rel="alternate" type="text/html" title="python: 类型定义" /><published>2023-07-09T23:52:43+08:00</published><updated>2023-07-09T23:52:43+08:00</updated><id>/python/py_type</id><content type="html" xml:base="/python/py_type/"><![CDATA[<ul>
  <li>函数输入输出类型。函数类型的输入参数并不是function而是Callable，可以指定输入输出参数的类型（回头再查）</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Callable</span>
<span class="k">def</span> <span class="nf">filter_entrance</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">image_paths</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">feature_func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">func_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">list</span><span class="p">:</span>
</code></pre></div></div>

<!-- ![引入图片](/image/python/2023-07-09-py_type/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[函数输入输出类型。函数类型的输入参数并不是function而是Callable，可以指定输入输出参数的类型（回头再查）]]></summary></entry></feed>