<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-08-23T23:47:50+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for my new site here. It will appear in my document head meta (for Google search results) and in my feed.xml site description.</subtitle><entry><title type="html">django: token认证</title><link href="/django/token/" rel="alternate" type="text/html" title="django: token认证" /><published>2023-08-23T22:21:32+08:00</published><updated>2023-08-23T22:21:32+08:00</updated><id>/django/token</id><content type="html" xml:base="/django/token/"><![CDATA[<h2 id="准备">准备</h2>

<ul>
  <li>安装
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install djangorestframework
</code></pre></div>    </div>
  </li>
  <li>settins.py</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># ...
</span>    <span class="sh">'</span><span class="s">rest_framework</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">rest_framework.authtoken</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 添加 Token 认证应用
</span>    <span class="c1"># ...
</span><span class="p">]</span>

<span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">DEFAULT_AUTHENTICATION_CLASSES</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span>
        <span class="sh">'</span><span class="s">rest_framework.authentication.TokenAuthentication</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 使用 Token 认证
</span>    <span class="p">],</span>
    <span class="sh">'</span><span class="s">DEFAULT_PERMISSION_CLASSES</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span>
        <span class="sh">'</span><span class="s">rest_framework.permissions.IsAuthenticated</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 限制只有认证用户能访问
</span>    <span class="p">],</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="生成token">生成token</h2>

<ul>
  <li>HMAC 是一种基于哈希函数和密钥的消息认证码算法。在生成 Token 时，Django 使用用户的密钥（通常是用户的密码的哈希值）与当前时间戳来计算 Token 的值</li>
  <li>默认生成的token是永久有效的，定期更新有空再说</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="n">rest_framework.authtoken.models</span> <span class="kn">import</span> <span class="n">Token</span>

<span class="k">def</span> <span class="nf">login_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c1"># 处理用户登录逻辑
</span>    <span class="c1"># ...
</span>
    <span class="c1"># 为已登录用户生成 Token
</span>    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">token</span><span class="p">,</span> <span class="n">created</span> <span class="o">=</span> <span class="n">Token</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get_or_create</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">)</span>
    <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">({</span><span class="sh">'</span><span class="s">token</span><span class="sh">'</span><span class="p">:</span> <span class="n">token</span><span class="p">.</span><span class="n">key</span><span class="p">})</span>
</code></pre></div></div>

<h2 id="验证token">验证token</h2>

<ul>
  <li>从数据库中获取与给定用户和给定 Token 键匹配的 Token 对象。如果找不到符合条件的 Token，将会引发 Token.DoesNotExist 异常。如果找到符合条件的 Token，它将被返回。
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">rest_framework.authtoken.models</span> <span class="kn">import</span> <span class="n">Token</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">Token</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">token_key</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>一个简单的例子</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 验证token
</span><span class="n">token_key</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">META</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">HTTP_AUTHORIZATION</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span> 
<span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">)</span>
<span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">Token</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">token_key</span><span class="p">)</span>
<span class="k">except</span> <span class="n">Token</span><span class="p">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
    <span class="k">return</span> <span class="nc">HttpResponse</span><span class="p">(</span><span class="sh">"</span><span class="s">authentication failed</span><span class="sh">"</span><span class="p">,</span><span class="n">status</span><span class="o">=</span><span class="mi">401</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>前端发送请求时，以postman为例，需要在headers添加</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "Authorization" : "Bearer [token here]"
}
</code></pre></div></div>

<ul>
  <li>axios发送时需要配置headers，注意后端要允许跨域请求中包含 “Authorization” 字段</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// js</span>
<span class="nx">headers</span><span class="p">:</span> <span class="p">{</span> 
<span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bearer [token here]</span><span class="dl">'</span><span class="p">,</span> 
<span class="p">},</span>
</code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># py
</span><span class="n">CORS_ALLOW_HEADERS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># ...
</span>    <span class="sh">'</span><span class="s">Authorization</span><span class="sh">'</span><span class="p">,</span>
    <span class="c1"># ...
</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="django" /><summary type="html"><![CDATA[准备]]></summary></entry><entry><title type="html">django: 用户认证</title><link href="/django/mysql_user/" rel="alternate" type="text/html" title="django: 用户认证" /><published>2023-08-23T14:21:32+08:00</published><updated>2023-08-23T14:21:32+08:00</updated><id>/django/mysql_user</id><content type="html" xml:base="/django/mysql_user/"><![CDATA[<h2 id="验证用户的一个例子">验证用户的一个例子</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>
<span class="kn">from</span> <span class="n">django.http</span> <span class="kn">import</span> <span class="n">JsonResponse</span>

<span class="k">def</span> <span class="nf">login_check</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">user</span> <span class="o">=</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
            <span class="n">response_data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">token</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">generated_token</span><span class="sh">"</span><span class="p">}</span>
            <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">(</span><span class="n">response_data</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">({</span><span class="sh">'</span><span class="s">error</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Invalid credentials</span><span class="sh">'</span><span class="p">},</span> <span class="n">status</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span>

</code></pre></div></div>

<ul>
  <li>postman发送请求时在body里选择”x-www-form-urlencoded”并添加key</li>
  <li>(因为使用postman时csrf报错不知道怎么解决所以在settings的MIDDLEWARE里先禁用了)</li>
  <li>前端axios数据发送时data字段使用qs.stringify而不是JSON.stringify，前者用于构造 URL 查询字符串
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// npm i -s qs</span>
<span class="c1">// import qs from 'qs';</span>
<span class="nx">inputData</span><span class="p">:</span> <span class="nx">qs</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span>
          <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span><span class="nx">username</span><span class="p">,</span>
          <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">:</span><span class="nx">password</span>
      <span class="p">})</span>
<span class="c1">// 结果："username=user123&amp;password=pass456"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="部分官方文档搬运">部分官方文档搬运</h2>

<ul>
  <li>参考：
    <ul>
      <li>https://docs.djangoproject.com/en/4.2/topics/auth/default/</li>
    </ul>
  </li>
  <li>创建用户</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">create_user</span><span class="p">(</span><span class="sh">"</span><span class="s">john</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lennon@thebeatles.com</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">johnpassword</span><span class="sh">"</span><span class="p">)</span>
<span class="n">user</span><span class="p">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Lennon</span><span class="sh">"</span>
<span class="n">ser</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>创建super用户</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py createsuperuser --username=joe --email=joe@example.com
</code></pre></div></div>

<ul>
  <li>修改密码</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="n">u</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="sh">"</span><span class="s">john</span><span class="sh">"</span><span class="p">)</span>
<span class="n">u</span><span class="p">.</span><span class="nf">set_password</span><span class="p">(</span><span class="sh">"</span><span class="s">new password</span><span class="sh">"</span><span class="p">)</span>
<span class="n">u</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>身份验证</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span>

<span class="n">user</span> <span class="o">=</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="sh">"</span><span class="s">john</span><span class="sh">"</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">secret</span><span class="sh">"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="c1"># A backend authenticated the credentials
</span>    <span class="bp">...</span>
<span class="k">else</span><span class="p">:</span>
    <span class="c1"># No backend authenticated the credentials
</span>    <span class="bp">...</span>
</code></pre></div></div>

<ul>
  <li>权限和用户组
    <ul>
      <li>略，参见官方文档</li>
    </ul>
  </li>
  <li>登录</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>


<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">user</span> <span class="o">=</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nf">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
        <span class="c1"># Redirect to a success page.
</span>        <span class="bp">...</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Return an 'invalid login' error message.
</span>        <span class="bp">...</span>
</code></pre></div></div>

<ul>
  <li>注销</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">logout</span>


<span class="k">def</span> <span class="nf">logout_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="nf">logout</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="c1"># Redirect to a success page.
</span></code></pre></div></div>

<ul>
  <li>使用装饰器来限制仅登录用户访问</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">login_required</span>

<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">xxx</span> <span class="bp">...</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="django" /><summary type="html"><![CDATA[验证用户的一个例子]]></summary></entry><entry><title type="html">django: mysql数据库增删改查基本操作</title><link href="/django/mysql_func/" rel="alternate" type="text/html" title="django: mysql数据库增删改查基本操作" /><published>2023-08-23T13:21:32+08:00</published><updated>2023-08-23T13:21:32+08:00</updated><id>/django/mysql_func</id><content type="html" xml:base="/django/mysql_func/"><![CDATA[<h2 id="准备">准备</h2>

<ul>
  <li>mysql安装启动(ubuntu)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装</span>
apt <span class="nb">install </span>mysql-server mysql-client
<span class="c"># 查看初始密码</span>
<span class="nb">sudo cat</span> /etc/mysql/debian.cnf
<span class="c"># 启动</span>
<span class="nb">sudo </span>service mysql start
<span class="c"># 登录</span>
mysql <span class="nt">-u</span><span class="o">[</span>用户名] <span class="nt">-p</span><span class="o">[</span>密码]
</code></pre></div></div>

<ul>
  <li>修改密码(sql)</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ALTER</span> <span class="k">USER</span> <span class="s1">'root'</span><span class="o">@</span><span class="s1">'localhost'</span> <span class="n">IDENTIFIED</span>  <span class="k">BY</span> <span class="s1">'123456'</span><span class="p">;</span>
<span class="n">flush</span> <span class="k">privileges</span><span class="p">;</span>
<span class="n">quit</span><span class="p">;</span> 
</code></pre></div></div>

<ul>
  <li>创建数据库(sql)</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">database</span> <span class="n">ubk</span> <span class="k">default</span> <span class="n">charset</span><span class="o">=</span><span class="n">utf8</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="创建一个带用户认证的model">创建一个带用户认证的model</h2>

<ul>
  <li>新增一个app</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py startapp app_model
</code></pre></div></div>

<ul>
  <li>settings.py中添加这个app</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="o">***</span>
    <span class="sh">'</span><span class="s">app_model</span><span class="sh">'</span>
<span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>在 @/app_model/models.py中添加数据模型</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="n">django.db.models</span> <span class="kn">import</span> <span class="n">JSONField</span>

<span class="c1"># 类名ModelRec对应数据库中的Tabel名是app_model_modelrec
</span>
<span class="k">class</span> <span class="nc">ModelRec</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">date</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">amount</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">'</span><span class="s">amount</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">commit</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">'</span><span class="s">commit</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">tag</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">'</span><span class="s">tag</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>迁移数据库（django）</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py makemigrations
python manage.py migrate

<span class="c"># 如果对model进行了大量修改导致migrate冲突，可以把数据库Tables内所有表全部删除后重新migrate</span>
</code></pre></div></div>

<h2 id="新增用户的一个示例app">新增用户的一个示例app</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="kn">from</span> <span class="n">app_model.models</span> <span class="kn">import</span> <span class="n">ModelRec</span>
<span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="kn">import</span> <span class="n">json</span>

<span class="k">def</span> <span class="nf">add_user</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">basic response test</span><span class="sh">'''</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">user_name</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">user_name</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">user_name</span><span class="p">).</span><span class="nf">exists</span><span class="p">():</span>
        <span class="k">return</span> <span class="nc">HttpResponse</span><span class="p">(</span><span class="sh">"</span><span class="s">User already exists.</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">username</span> <span class="o">=</span> <span class="n">user_name</span><span class="p">)</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">set_password</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="n">user</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
    
    <span class="k">return</span> <span class="nc">HttpResponse</span><span class="p">(</span><span class="sh">"</span><span class="s">Success.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>postman发送请求；在body中添加json</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "user_name":"admin",
    "password":"1234"
}
</code></pre></div></div>

<ul>
  <li>新增的用户可以在数据库Tabels/auth_user中看到</li>
</ul>

<h2 id="添加数据的一个示例app">添加数据的一个示例app</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="n">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>

<span class="kn">from</span> <span class="n">app_model.models</span> <span class="kn">import</span> <span class="n">ModelRec</span>
<span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="kn">import</span> <span class="n">json</span>


<span class="k">def</span> <span class="nf">add_data</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">basic response test</span><span class="sh">'''</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">body</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">user_name</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">user_name</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">date</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">amount</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">amount</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">commit</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">commit</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">tag</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">tag</span><span class="sh">'</span><span class="p">]</span>

    <span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="n">user_id</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">user_name</span><span class="p">)</span>

    <span class="n">new_object</span> <span class="o">=</span> <span class="nc">ModelRec</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user_id</span><span class="p">,</span> <span class="n">date</span><span class="o">=</span><span class="n">date</span><span class="p">,</span> <span class="n">amount</span><span class="o">=</span><span class="n">amount</span><span class="p">,</span> <span class="n">commit</span><span class="o">=</span><span class="n">commit</span><span class="p">,</span> <span class="n">tag</span><span class="o">=</span><span class="n">tag</span><span class="p">)</span>
    <span class="n">new_object</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>

    <span class="k">return</span> <span class="nc">HttpResponse</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello world </span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div>

<ul>
  <li>postman发送请求；在body中添加json</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "user_name":"admin",
    "date":"20230823",
    "amount":"7225",
    "commit":"api test",
    "tag":"test"
}
</code></pre></div></div>

<ul>
  <li>新增的用户可以在数据库Tabels/app_model_modelrec中看到</li>
</ul>]]></content><author><name></name></author><category term="django" /><summary type="html"><![CDATA[准备]]></summary></entry><entry><title type="html">vue: 使用axios和后端通信</title><link href="/vue/vue_axios/" rel="alternate" type="text/html" title="vue: 使用axios和后端通信" /><published>2023-08-21T14:27:00+08:00</published><updated>2023-08-21T14:27:00+08:00</updated><id>/vue/vue_axios</id><content type="html" xml:base="/vue/vue_axios/"><![CDATA[<h2 id="引入">引入</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i -s axios
</code></pre></div></div>

<h2 id="在电脑配件里写的通用axios函数">在电脑配件里写的通用axios函数</h2>

<ul>
  <li>重试次数引入了额外的包axiosRetry</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">axios</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">axiosRetry</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">axios-retry</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/**
 * axios基本函数, 接收任意url
 * @param {string}  inputUrl        ip地址
 * @param {object}  inputHeaders    请求头；default = {}
 * @param {string}  inputApi        api名, 带斜杠, 如"oi_r/"
 * @param {string}  inputMethod     "get" / "put" / "post" ...
 * @param {int}     inputTimeout    超时时长；default = 5000 (set in conf)
 * @param {int}     inputRetry      重试次数；default = 1
 * @param {object}  inputData       body；default = {}
 * @param {function} inputFuncGetRes callback, 获取返回值；default = printRes()
 * @param {function} inputFuncGetErr callback, 获取错误信息；default = printRes()
 */</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nf">use_axios</span><span class="p">({</span>
  <span class="nx">inputUrl</span><span class="p">,</span>
  <span class="nx">inputHeaders</span><span class="p">,</span>
  <span class="nx">inputApi</span><span class="p">,</span>
  <span class="nx">inputMethod</span><span class="p">,</span>
  <span class="nx">inputTimeout</span> <span class="o">=</span> <span class="mi">5000</span><span class="p">,</span>
  <span class="nx">inputRetry</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">inputData</span> <span class="o">=</span> <span class="p">{},</span>
  <span class="nx">inputFuncGetRes</span> <span class="o">=</span> <span class="nx">printRes</span><span class="p">,</span>
  <span class="nx">inputFuncGetErr</span> <span class="o">=</span> <span class="nx">printRes</span><span class="p">,</span>
<span class="p">})</span> <span class="p">{</span>
  <span class="c1">// 设置重试次数和等待时间</span>
  <span class="nf">axiosRetry</span><span class="p">(</span><span class="nx">axios</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">retries</span><span class="p">:</span> <span class="nx">inputRetry</span><span class="p">,</span> <span class="c1">// 设置自动发送请求次数</span>
    <span class="na">retryDelay</span><span class="p">:</span> <span class="p">(</span><span class="nx">retryCount</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">retryCount</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// 重复请求延迟</span>
    <span class="p">},</span>
    <span class="na">shouldResetTimeout</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">//  重置超时时间</span>
    <span class="na">retryCondition</span><span class="p">:</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">//true为打开自动发送请求, false为关闭自动发送请求</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="dl">"</span><span class="s2">timeout</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">},</span>
  <span class="p">});</span>

  <span class="c1">// 发送请求</span>
  <span class="nf">axios</span><span class="p">({</span>
    <span class="na">method</span><span class="p">:</span> <span class="nx">inputMethod</span><span class="p">,</span>
    <span class="c1">// url: inputUrl + inputApi + "/", //不加斜杠报错301</span>
    <span class="na">url</span><span class="p">:</span> <span class="nx">inputUrl</span> <span class="o">+</span> <span class="nx">inputApi</span><span class="p">,</span> <span class="c1">// 有些api不要斜杠, 如user_id</span>
    <span class="na">data</span><span class="p">:</span> <span class="nx">inputData</span><span class="p">,</span>
    <span class="na">headers</span><span class="p">:</span> <span class="nx">inputHeaders</span><span class="p">,</span>
    <span class="na">timeout</span><span class="p">:</span> <span class="nx">inputTimeout</span><span class="p">,</span>
  <span class="p">})</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">inputFuncGetRes</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">api_axios get error : </span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
      <span class="nf">inputFuncGetErr</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/image/vue/2023-08-21-vue_axiso/image_1.jpg" alt="引入图片" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="vue" /><summary type="html"><![CDATA[引入]]></summary></entry><entry><title type="html">python: 传值调用、传引用调用</title><link href="/python/value_refer/" rel="alternate" type="text/html" title="python: 传值调用、传引用调用" /><published>2023-07-17T14:01:41+08:00</published><updated>2023-07-17T14:01:41+08:00</updated><id>/python/value_refer</id><content type="html" xml:base="/python/value_refer/"><![CDATA[<ul>
  <li>
    <p>在 Python 中，参数传递的方式分为传值调用和传引用调用两种方式。</p>
  </li>
  <li>
    <p>对于不可变对象，如数字、字符串、元组等，Python 采用的是传值调用的方式。这意味着，在将这些对象作为参数传递给函数或方法时，其实是将对象的值复制一份传递给了函数或方法，而不是对象本身。因此，在函数或方法内部修改参数的值，不会影响到原始对象。</p>
  </li>
  <li>
    <p>对于可变对象，如列表、字典等，则采用的是传引用调用的方式。这意味着，在将这些对象作为参数传递给函数或方法时，其实是将对象的引用（即指向对象的内存地址）传递给了函数或方法。因此，在函数或方法内部修改参数的值，将会影响到原始对象。</p>
  </li>
  <li>
    <p>例子：</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AutoPlay</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">stop_flag</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">...</span>

    <span class="k">def</span> <span class="nf">auto_run</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">i</span><span class="o">=</span><span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">INTERVAL</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">stop_flag</span><span class="p">:</span>
                <span class="k">break</span>

<span class="c1"># 调用：
</span><span class="n">stop_flag</span> <span class="o">=</span> <span class="bp">False</span>
<span class="nc">AutoPlay</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">stop_flag</span><span class="o">=</span><span class="n">stop_flag</span><span class="p">).</span><span class="nf">auto_run_th</span><span class="p">()</span>

<span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">stop_flag</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>

<ul>
  <li>以上程序不会在3秒后停下</li>
  <li>要想实现外部控制程序停止，可以改成数组（call by reference）</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stop_flag</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span>
<span class="n">stop_flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[在 Python 中，参数传递的方式分为传值调用和传引用调用两种方式。]]></summary></entry><entry><title type="html">jekyll: 内嵌vue页面</title><link href="/jekyll/inner_vue/" rel="alternate" type="text/html" title="jekyll: 内嵌vue页面" /><published>2023-07-16T14:43:34+08:00</published><updated>2023-07-16T14:43:34+08:00</updated><id>/jekyll/inner_vue</id><content type="html" xml:base="/jekyll/inner_vue/"><![CDATA[<h2 id="尝试1">尝试1</h2>

<ul>
  <li>jekyll项目右上角的导航栏是通过目录下的html文件生成的</li>
  <li>把vue项目打包后放在jekyll目录下应该可以直接嵌入</li>
  <li>注意右上角导航的顺序是按照html文件名排序，可以用数字来排序</li>
</ul>

<p><img src="/image/jekyll/2023-07-16-inner_vue/image_1.jpg" alt="引入图片" />
<img src="/image/jekyll/2023-07-16-inner_vue/image_2.jpg" alt="引入图片" /></p>

<ul>
  <li>创建项目</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vue create inner_vue
</code></pre></div></div>

<ul>
  <li>
    <p>(编辑vue)</p>
  </li>
  <li>
    <p>修改vue.config.js，修改输出index.html的文件名</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@vue/cli-service</span><span class="dl">'</span><span class="p">)</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nf">defineConfig</span><span class="p">({</span>
  <span class="na">transpileDependencies</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">pages</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">home</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">entry</span><span class="p">:</span> <span class="dl">'</span><span class="s1">src/main.ts</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">template</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public/index.html</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">c99_inner.html</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>↑如果按照上面的方法修改，npm run serve会报错</li>
  <li>
    <p>直接把public/index.html改名为public/c99_inner.html就行了</p>
  </li>
  <li>打包</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run build
</code></pre></div></div>

<ul>
  <li>打包之后直接放到jekyll目录下，给html添加yaml头，可以正常识别</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: page
permalink: /inner/
---
</code></pre></div></div>

<ul>
  <li>写一个build_vue.py脚本来自动化以上过程：打包 -&gt; 拷贝 -&gt; 添加头</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
打包vue子页面并添加到jekyll
</span><span class="sh">'''</span>


<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">shutil</span>
<span class="kn">import</span> <span class="n">subprocess</span>


<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">===== vue build =====</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">npm</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">build</span><span class="sh">"</span><span class="p">],</span> <span class="n">cwd</span><span class="o">=</span><span class="sh">"</span><span class="s">./inner_vue</span><span class="sh">"</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>


<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">===== copy vue dist =====</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="n">src_dir</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">"</span><span class="s">./inner_vue/dist</span><span class="sh">"</span>
<span class="n">dst_dir</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">"</span><span class="s">./hello_umas</span><span class="sh">"</span>
<span class="c1"># 遍历源目录下的所有文件和子目录
</span><span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">walk</span><span class="p">(</span><span class="n">src_dir</span><span class="p">):</span>
    <span class="c1"># 计算出每个文件在目标目录中的路径
</span>    <span class="n">dst_root</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">dst_dir</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">relpath</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">src_dir</span><span class="p">))</span>
    <span class="c1"># 如果目标目录不存在，则先创建目标目录
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">dst_root</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">dst_root</span><span class="p">)</span>
    <span class="c1"># 遍历当前目录下的所有文件
</span>    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="n">src_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
        <span class="n">dst_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">dst_root</span><span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
        <span class="c1"># 如果目标文件已经存在，则先删除目标文件
</span>        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">dst_file</span><span class="p">):</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">dst_file</span><span class="p">)</span>
        <span class="c1"># 复制文件
</span>        <span class="n">shutil</span><span class="p">.</span><span class="nf">copy</span><span class="p">(</span><span class="n">src_file</span><span class="p">,</span> <span class="n">dst_file</span><span class="p">)</span>



<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">===== edit yaml header =====</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">./hello_umas/c99_inner.html</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">r+</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="c1"># 将文件指针移到文件开头
</span>    <span class="n">f</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="c1"># 插入需要添加的内容
</span>    <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">---</span><span class="se">\n</span><span class="s">layout: page</span><span class="se">\n</span><span class="s">permalink: /inner/</span><span class="se">\n</span><span class="s">---</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="n">content</span><span class="p">)</span>

</code></pre></div></div>

<ul>
  <li>效果：
    <ul>
      <li>（title不能删掉，后面再想办法）</li>
      <li>而且发现右上角字体变粗了，可能是有哪里少了scope</li>
    </ul>
  </li>
</ul>

<p><img src="/image/jekyll/2023-07-16-inner_vue/image_3.jpg" alt="引入图片" /></p>

<ul>
  <li>对vue进行一些修改之后发现jekyll里显示不出来了</li>
  <li>正在找问题</li>
</ul>

<h2 id="尝试2">尝试2</h2>

<ul>
  <li>dist放在jekyll根目录下，重命名为vue</li>
  <li>c3_inner.md</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: page
permalink: /vue/
title: Vue
---
{% include_relative vue/index.html %}
</code></pre></div></div>

<ul>
  <li>vue打包后的引用路径要一致</li>
  <li>参考search.js可以看到引用路径从根目录开始，进入vue页之后内容全部在/vue之下，所以直接重命名为vue</li>
</ul>

<p><img src="/image/jekyll/2023-07-16-inner_vue/image_4.jpg" alt="引入图片" /></p>

<ul>
  <li>确认打包后的index.html的引用路径是相对路径</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">defer=</span><span class="s">"defer"</span> <span class="na">src=</span><span class="s">"/js/chunk-vendors.4e859eba.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<ul>
  <li>改为：</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">defer=</span><span class="s">"defer"</span> <span class="na">src=</span><span class="s">"js/chunk-vendors.4e859eba.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<ul>
  <li>还是不行，router没有生效，放弃了</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[尝试1]]></summary></entry><entry><title type="html">leetcode: 2.两数相加</title><link href="/leetcode/leetcode_2/" rel="alternate" type="text/html" title="leetcode: 2.两数相加" /><published>2023-07-14T14:56:52+08:00</published><updated>2023-07-14T14:56:52+08:00</updated><id>/leetcode/leetcode_2</id><content type="html" xml:base="/leetcode/leetcode_2/"><![CDATA[<h2 id="自解1">自解1</h2>

<ul>
  <li>
    <p>没有用过链表，思路是先把链表转换为普通列表，再转化为数字，计算完之后再转换回去</p>
  </li>
  <li>
    <p>补充：链表</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>
</code></pre></div></div>

<ul>
  <li>首先定义四个函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 链表转列表
</span><span class="k">def</span> <span class="nf">node2list</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">]</span>
    <span class="k">while</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">node2list</span><span class="p">(</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))))</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 列表转链表
</span><span class="k">def</span> <span class="nf">list2node</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
    <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">list_in</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">list_in</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">item</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="n">node</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">node</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 列表转数字
</span><span class="k">def</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span><span class="nb">list</span><span class="p">)</span><span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">index</span><span class="p">,</span><span class="n">num</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">list_in</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">num</span><span class="o">*</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="n">index</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">list2number</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]))</span>
<span class="c1"># 5321
</span></code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 数字转列表
</span><span class="k">def</span> <span class="nf">number2list</span><span class="p">(</span><span class="n">number</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">list</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="nf">str</span><span class="p">(</span><span class="n">number</span><span class="p">)]</span>
</code></pre></div></div>

<ul>
  <li>击败5%的代码</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span>


<span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">l2</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>

        <span class="k">def</span> <span class="nf">node2list</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">]</span>
            <span class="k">while</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">res</span>

        <span class="k">def</span> <span class="nf">list2node</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">list_in</span><span class="p">):</span>
                <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">item</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="n">node</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">node</span>

        <span class="k">def</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">list_in</span><span class="p">):</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="n">num</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="n">index</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">res</span>

        <span class="k">def</span> <span class="nf">number2list</span><span class="p">(</span><span class="n">number</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="nf">str</span><span class="p">(</span><span class="n">number</span><span class="p">)]</span>

        <span class="c1"># 链表转为列表
</span>        <span class="n">l1_list</span> <span class="o">=</span> <span class="nf">node2list</span><span class="p">(</span><span class="n">l1</span><span class="p">)</span>
        <span class="n">l2_list</span> <span class="o">=</span> <span class="nf">node2list</span><span class="p">(</span><span class="n">l2</span><span class="p">)</span>

        <span class="c1"># 倒序列表拼接为一个数字
</span>        <span class="n">l1_number</span> <span class="o">=</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">l1_list</span><span class="p">)</span>
        <span class="n">l2_number</span> <span class="o">=</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">l2_list</span><span class="p">)</span>

        <span class="c1"># 计算并输出结果
</span>        <span class="n">res_number</span> <span class="o">=</span> <span class="n">l1_number</span> <span class="o">+</span> <span class="n">l2_number</span>
        <span class="n">res_list</span> <span class="o">=</span> <span class="nf">number2list</span><span class="p">(</span><span class="n">res_number</span><span class="p">)</span>
        <span class="nf">return</span><span class="p">(</span><span class="nf">list2node</span><span class="p">(</span><span class="n">res_list</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>


<span class="n">l1</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>
<span class="n">l2</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>

<span class="n">ans</span> <span class="o">=</span> <span class="nc">Solution</span><span class="p">().</span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span><span class="o">=</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="o">=</span><span class="n">l2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="答案">答案</h2>
<ul>
  <li>妈的看完题解之后感觉刚才的自己脑子简直秀逗</li>
  <li>因为py并没有链表和指针，所以并不容易定义结果的类型，可以把结果存放在l1或l2中，如果计算中发现l1长度小于l2，可以交换l1和l2</li>
  <li>递归函数！</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span>


<span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="c1"># l1 和 l2 为当前遍历的节点，carry 为进位
</span>    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">l2</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">carry</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">l1</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">l2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># 递归边界：l1 和 l2 都是空节点
</span>            <span class="k">return</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">carry</span><span class="p">)</span> <span class="k">if</span> <span class="n">carry</span> <span class="k">else</span> <span class="bp">None</span>  <span class="c1"># 如果进位了，就额外创建一个节点
</span>        <span class="k">if</span> <span class="n">l1</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># 如果 l1 是空的，那么此时 l2 一定不是空节点
</span>            <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l1</span>  <span class="c1"># 交换 l1 与 l2，保证 l1 非空，从而简化代码
</span>        <span class="n">carry</span> <span class="o">+=</span> <span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="p">(</span><span class="n">l2</span><span class="p">.</span><span class="n">val</span> <span class="k">if</span> <span class="n">l2</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># 节点值和进位加在一起
</span>        <span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">carry</span> <span class="o">%</span> <span class="mi">10</span>  <span class="c1"># 每个节点保存一个数位
</span>        <span class="n">l1</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span> <span class="k">if</span> <span class="n">l2</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span> <span class="n">carry</span> <span class="o">//</span> <span class="mi">10</span><span class="p">)</span>  <span class="c1"># 进位
</span>        <span class="k">return</span> <span class="n">l1</span>


<span class="n">l1</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>
<span class="n">l2</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>

<span class="n">ans</span> <span class="o">=</span> <span class="nc">Solution</span><span class="p">().</span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span><span class="o">=</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="o">=</span><span class="n">l2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>



</code></pre></div></div>]]></content><author><name></name></author><category term="leetcode" /><summary type="html"><![CDATA[自解1]]></summary></entry><entry><title type="html">leetcode: 1.两数之和</title><link href="/leetcode/leetcode_1/" rel="alternate" type="text/html" title="leetcode: 1.两数之和" /><published>2023-07-14T14:16:17+08:00</published><updated>2023-07-14T14:16:17+08:00</updated><id>/leetcode/leetcode_1</id><content type="html" xml:base="/leetcode/leetcode_1/"><![CDATA[<h2 id="自解">自解</h2>

<ul>
  <li>除了两层循环之外根本想不到其他解法</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">index_1</span><span class="p">,</span> <span class="n">number_1</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">index_2</span><span class="p">,</span> <span class="n">number_2</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">index_1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]):</span>
                <span class="k">if</span> <span class="n">number_1</span> <span class="o">+</span> <span class="n">number_2</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                    <span class="k">return</span> <span class="p">[</span><span class="n">index_1</span><span class="p">,</span> <span class="n">index_1</span> <span class="o">+</span> <span class="n">index_2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">twoSum</span><span class="p">(</span><span class="n">nums</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">target</span><span class="o">=</span><span class="mi">9</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="答案">答案</h2>

<ul>
  <li>我的天哈希表居然这么简单就实现了，我是傻逼</li>
  <li>在第二遍循环里寻找 number_2 = target - number_1，而不是 number_2 + number_1 = target，后者很难想到hash</li>
  <li>利用字典中键不能重复的特点创建hash表</li>
  <li>修改一下自己的代码：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">hash_table</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">index_1</span><span class="p">,</span> <span class="n">number_1</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">-</span> <span class="n">number_1</span> <span class="ow">in</span> <span class="n">hash_table</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">hash_table</span><span class="p">[</span><span class="n">target</span> <span class="o">-</span> <span class="n">number_1</span><span class="p">],</span><span class="n">index_1</span><span class="p">]</span>
            <span class="n">hash_table</span><span class="p">[</span><span class="n">number_1</span><span class="p">]</span> <span class="o">=</span> <span class="n">index_1</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">twoSum</span><span class="p">(</span><span class="n">nums</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">target</span><span class="o">=</span><span class="mi">9</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="leetcode" /><summary type="html"><![CDATA[自解]]></summary></entry><entry><title type="html">linux: samba局域网文件共享</title><link href="/linux/samba/" rel="alternate" type="text/html" title="linux: samba局域网文件共享" /><published>2023-07-13T14:35:51+08:00</published><updated>2023-07-13T14:35:51+08:00</updated><id>/linux/samba</id><content type="html" xml:base="/linux/samba/"><![CDATA[<ul>
  <li>下载配置</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>samba
<span class="nb">sudo </span>vim /etc/samba/smb.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>share]
path <span class="o">=</span> /media/xf
valid <span class="nb">users</span> <span class="o">=</span> xf
writable <span class="o">=</span> <span class="nb">yes</span>
</code></pre></div></div>

<ul>
  <li>
    <p>↑share为samba显示的文件名，可以添加多个</p>
  </li>
  <li>
    <p>启动</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>smbpasswd <span class="nt">-a</span> umas
<span class="nb">sudo </span>service smbd restart
</code></pre></div></div>

<ul>
  <li>偶尔不能自动挂载</li>
  <li>手动挂载 sudo mount /dev/sda1 /media/xf/manuell-1T</li>
  <li>查看硬盘 sudo fdisk -l</li>
</ul>

<!-- ![引入图片](/image/linux/2023-07-13-samba/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[下载配置]]></summary></entry><entry><title type="html">linux: apt改国内源</title><link href="/linux/apt_source/" rel="alternate" type="text/html" title="linux: apt改国内源" /><published>2023-07-13T14:33:32+08:00</published><updated>2023-07-13T14:33:32+08:00</updated><id>/linux/apt_source</id><content type="html" xml:base="/linux/apt_source/"><![CDATA[<ul>
  <li>这里可以找到源：
    <ul>
      <li>阿里源：https://developer.aliyun.com/mirror/</li>
      <li>清华源：https://mirrors.tuna.tsinghua.edu.cn/</li>
      <li>华科源：http://mirrors.ustc.edu.cn/</li>
      <li>网易源：http://mirrors.163.com/</li>
    </ul>
  </li>
  <li>查看linux版本</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /etc/issue
<span class="c"># 返回</span>
Debian GNU/Linux 11 <span class="se">\n</span> <span class="se">\l</span>
</code></pre></div></div>

<ul>
  <li>debian换国内源，修改/etc/apt/sources.list文件</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s@http://deb.debian.org@https://mirrors.163.com@g"</span> /etc/apt/sources.list
</code></pre></div></div>

<ul>
  <li>
    <p>补充ubuntu改源</p>
  </li>
  <li>
    <p>备份原文件</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak
vim /etc/apt/sources.list
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
</code></pre></div></div>

<ul>
  <li>更新软件列表</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
</code></pre></div></div>

<!-- ![引入图片](/image/linux/2023-07-13-apt_source/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[这里可以找到源： 阿里源：https://developer.aliyun.com/mirror/ 清华源：https://mirrors.tuna.tsinghua.edu.cn/ 华科源：http://mirrors.ustc.edu.cn/ 网易源：http://mirrors.163.com/]]></summary></entry></feed>