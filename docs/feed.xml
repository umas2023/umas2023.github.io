<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-10-11T17:18:10+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for his new site here. It will appear in his document head meta (for Google search results) and in his feed.xml site description.</subtitle><entry><title type="html">leetcode: 58同城前年笔试</title><link href="/leetcode/js/python/is/" rel="alternate" type="text/html" title="leetcode: 58同城前年笔试" /><published>2023-10-11T14:01:57+08:00</published><updated>2023-10-11T14:01:57+08:00</updated><id>/leetcode/js/python/is</id><content type="html" xml:base="/leetcode/js/python/is/"><![CDATA[<ul>
  <li>链接：https://www.nowcoder.com/exam/test/74802082/detail?pid=36048429&amp;examPageSource=Company&amp;testCallback=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fcompany%3FcurrentTab%3Drecommand%26jobId%3D100%26keyword%3D58%E5%90%8C%E5%9F%8E%26selectStatus%3D0&amp;testclass=%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91</li>
</ul>

<h2 id="选择题">选择题</h2>

<ol>
  <li>以下代码输出</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nf">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">].</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">));</span>
</code></pre></div></div>

<ul>
  <li>答案</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">]</span>
<span class="p">[</span> <span class="mi">2</span> <span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>解析</li>
</ul>

<p>使用 splice() 方法会改变原始数组，返回被删除的元素组成的数组。<br />
起始索引为 1，要删除的元素数量为 2（即删除了索引位置 1 和 2 的元素），并在该位置插入元素 [3, 4, 5]。splice() 方法返回被删除的元素组成的数组，所以输出结果是 [2, 3]，表示被删除的元素为 2 和 3。</p>

<p>slice() 方法用于从数组中提取指定范围的元素，返回一个新数组，不会修改原始数组。它接受两个参数：
第一个参数 1 表示起始索引，指定了要提取的起始位置。
第二个参数表示要提取的结束位置。结束位置为 2,3,4,5（但 slice() 方法只接受两个参数，多余的参数会被忽略）</p>

<hr />
<hr />

<ol>
  <li>root元素的高 (通过getComputedStyle(root).height计算) 为？</li>
</ol>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"root"</span> <span class="na">style=</span><span class="s">"border:1px solid red;"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"width:10px;height:10px;margin:10px;"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"width:10px;height:10px;margin:20px;"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<ul>
  <li>直接在console打印结果是70px</li>
  <li>(10 + 10x2) + (10 + 20x2) - 10px</li>
  <li>根据CSS规范中的外边距合并（Margin Collapsing）规则，当两个垂直相邻的元素具有外边距时，它们的外边距会发生合并，产生一个新的外边距。合并后的外边距的大小取决于两个元素中较大的外边距值。</li>
  <li>上面div的下边距10被合并到下面div的上边距20中了，所以要减去10</li>
  <li>由结果来看border边框是不计入高度的</li>
</ul>

<hr />
<hr />

<ol>
  <li>假定某次上线，1小时内出bug的概率为50%，那么3小时内出bug的概率是？</li>
</ol>

<ul>
  <li>答案：87.5</li>
  <li>解析：</li>
</ul>

<p>P3 = 在3小时内出现bug
noP3 = 在3小时内没有出现bug</p>

<p>P1b = 第1小时内 …
P1n = 第1 …</p>

<p>则 P3b = 1 - noP3 = 1 - ( P1n x P2n x P3n ) = 1 - 0.5x0.5x0.5 = 0.875</p>

<hr />
<hr />

<ol>
  <li>以下代码执行返回？</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">parseInt</span><span class="p">(</span><span class="dl">'</span><span class="s1">0x111</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>答案：273</li>
  <li>
    <p>解析：当字符串以 ‘0x’ 开头时，它被解释为十六进制数</p>
  </li>
  <li>补充：其他转换16进制的方法</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">.</span><span class="nf">parseInt</span><span class="p">(</span><span class="dl">'</span><span class="s1">0x111</span><span class="dl">'</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nc">Number</span><span class="p">(</span><span class="dl">'</span><span class="s1">0x111</span><span class="dl">'</span><span class="p">).</span><span class="nf">valueOf</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="o">+</span><span class="p">(</span><span class="dl">'</span><span class="s1">0x111</span><span class="dl">'</span><span class="p">))</span>
</code></pre></div></div>

<hr />
<hr />

<ol>
  <li>下边关于https描述正确的是:</li>
</ol>

<p>A 客户端会对服务器下发的证书进行域名校验
B 客户端和服务器交互使用的是服务器下发的私钥
C 黑客拦截服务器下发的证书后就可以伪造服务器和客户端进行通信
D 手机只信任CA颁发的证书</p>

<ul>
  <li>答案A</li>
  <li>解析：</li>
</ul>

<p>A：HTTPS 使用了公钥加密和证书来确保通信的机密性和身份验证。在建立 HTTPS 连接时，服务器会发送一个包含公钥的数字证书给客户端。客户端会对这个证书进行域名校验，以确保证书上的域名与客户端请求的域名匹配。这是为了防止中间人攻击，确保客户端与正确的服务器进行通信。</p>

<p>B：服务器使用私钥进行解密，客户端使用服务器的公钥进行加密。在 HTTPS 连接建立过程中，服务器会发送一个数字证书给客户端。这个证书包含了服务器的公钥以及其他相关信息，如证书的颁发机构、有效期等。</p>

<p>客户端在收到证书后，会使用证书中的公钥来加密生成一个对称密钥（也称为会话密钥或对话密钥）。这个对称密钥用于后续的通信加密和解密。</p>

<p>客户端随后将加密后的对称密钥发送给服务器。服务器在接收到加密的对称密钥后，使用自己的私钥进行解密，获取到对称密钥。</p>

<p>接下来的通信过程中，客户端和服务器会使用这个对称密钥来进行加密和解密，以保证通信的机密性和完整性。</p>

<p>C：如果黑客能够拦截服务器的证书，但无法伪造有效的证书，他们仍然无法成功伪造服务器和客户端之间的通信。证书的有效性取决于其由受信任的证书颁发机构（CA）签署。如果黑客试图伪造服务器和客户端之间的通信，他们需要拦截服务器的私钥，以便使用私钥解密客户端发送的对称密钥。但是，私钥是服务器保密的，并且应该妥善保护。只有服务器才能使用私钥进行解密操作。</p>

<p>D：手机或其他设备可以配置信任的根证书颁发机构列表，这些根证书颁发机构的证书将被信任。因此，不仅限于 CA 颁发的证书可以被手机信任。</p>

<hr />
<hr />

<ol>
  <li>下边关于XSS描述正确的是</li>
</ol>

<p>A XSS又名跨站脚本攻击，是利用服务器查询漏洞，在提交数据中注入sql语句，从而破坏网站数据</p>

<p>B 防范XSS攻击只要前端对数据进行Base64就可以解决</p>

<p>C XSS攻击需要也服务器对接口进行防护</p>

<p>D XSS攻击仅在表单提交时使用</p>

<ul>
  <li>答案：C</li>
  <li>解析：</li>
</ul>

<p>A. XSS（跨站脚本攻击）是一种利用网站漏洞，向用户的浏览器注入恶意脚本的攻击方式。A这是对 SQL 注入攻击的描述，不是 XSS 攻击。SQL 注入是通过在用户输入中注入恶意 SQL 语句来攻击数据库。</p>

<p>B. Base64 编码可以用于在数据传输过程中对数据进行编码，但它并不能完全解决 XSS 攻击。XSS 攻击是在网站中插入恶意脚本，而 Base64 编码只是一种编码方式，无法阻止恶意脚本的注入。</p>

<p>D. XSS 攻击并不仅限于表单提交。XSS 可以发生在任何用户输入的地方，包括 URL 参数、Cookie、HTTP 头和其他用户可控制的数据输入点。</p>

<ul>
  <li>补充：关于XSS</li>
</ul>

<p>XSS（跨站脚本攻击）是一种常见的网络安全漏洞，攻击者通过在受信任的网页中插入恶意脚本，使其在用户的浏览器上执行。这种攻击利用了网页应用程序对用户输入的不充分过滤和验证。</p>

<p>XSS 攻击的原理是攻击者将恶意的脚本代码注入到网页的输出内容中，当用户浏览该页面时，浏览器会执行这些恶意脚本，导致攻击者可以获取用户的敏感信息、篡改网页内容、劫持用户会话等恶意行为。</p>

<p>XSS 攻击可以分为三种类型：</p>

<p>存储型 XSS：攻击者将恶意脚本注入到目标网站的数据库中，当用户浏览受影响的页面时，恶意脚本从数据库中被提取并执行。</p>

<p>反射型 XSS：攻击者将恶意脚本作为参数附加在 URL 中，当用户点击包含恶意脚本的链接时，网站会将恶意脚本作为响应返回并在用户浏览器上执行。</p>

<p>DOM 型 XSS：攻击者利用 JavaScript 动态修改网页的 DOM 结构，将恶意脚本注入到页面中，当用户浏览该页面时，恶意脚本被执行。</p>

<p>防范 XSS 攻击的关键在于对用户输入进行有效的过滤和转义。以下是一些常见的防御措施：</p>

<p>1.输入验证和过滤：对用户输入进行严格的验证和过滤，确保只接受预期的数据格式，并剔除潜在的恶意脚本。</p>

<p>2.输出转义：在将用户输入插入到网页内容中之前，对特殊字符进行转义，确保它们被当作文本而不是脚本代码处理。</p>

<p>3.使用安全的编码方式：对于特定的上下文，使用适当的编码方式，如 HTML 实体编码、URL 编码等，以防止脚本被解析执行。</p>

<p>4.设置安全响应头：通过设置合适的安全响应头，如 Content-Security-Policy (CSP)，可以限制脚本的执行和资源加载，提供额外的安全保护。</p>

<p>5.定期更新和修复漏洞：及时更新和修复网站的软件和组件，以减少存在已知漏洞的风险。</p>

<hr />
<hr />

<ol>
  <li>以下运行结果:</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>答案：10个10</li>
  <li>这题我会，不用解析了</li>
</ul>

<hr />
<hr />

<ol>
  <li>在跨域请求中，下列请求头中哪种content-type一定会触发cors预检查</li>
</ol>

<p>A text/plain</p>

<p>B multipart/form-data</p>

<p>C application/x-www-form-unlencoded</p>

<p>D application/json</p>

<ul>
  <li>答案：D</li>
  <li>解析：如果 Content-Type 不属于以下几种类型之一，就会触发 CORS 预检查：</li>
</ul>

<p>1.application/x-www-form-urlencoded
2.multipart/form-data
3.text/plain</p>

<hr />
<hr />

<ol>
  <li>下面代码输出结果正确的是</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Setcount</span><span class="p">(</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="nx">count</span>
<span class="p">}</span>

<span class="nx">Setcount</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">printCount</span> <span class="o">=</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Setcount</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">200</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">300</span>
<span class="nx">a</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nf">printCount</span><span class="p">()</span>
<span class="nx">a</span><span class="p">.</span><span class="nf">printCount</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>答案：300,200</li>
  <li>解析：</li>
</ul>

<p>调用 a._proto__.printCount() 会输出 300，因为在 printCount 方法中，this.count 引用的是原型对象上的 count 属性，而原型对象的 count 属性已经被修改为 300</p>

<p>调用 a.printCount() 会输出 200，因为在 printCount 方法中，this.count 引用的是实例对象 a 上的 count 属性，而实例对象的 count 属性值为 200。</p>

<hr />
<hr />

<ol>
  <li>关于position定位，下列说法正确的是</li>
</ol>

<p>A  relative，absolute, fixed都会脱离当前文档流，并相对于当前位置设置偏移量</p>

<p>B absolute元素如果其父级设置了fixed属性，则其会相对于浏览器窗口设置偏移</p>

<p>C z-index属性对元素position属性为relative，absolute, fixed都可以做层级设置</p>

<p>D relative元素以它原来的位置为基准偏移，在其移动后，原来的位置不再占据空间</p>

<ul>
  <li>
    <p>答案：C</p>
  </li>
  <li>
    <p>解析：</p>
  </li>
</ul>

<p>A. 这个说法是不正确的。虽然relative、absolute和fixed定位可以脱离当前文档流，并相对于当前位置设置偏移量，但它们之间的具体行为和影响是不同的。</p>

<p>relative（相对定位）：</p>

<p>相对于元素在文档流中的原始位置进行定位。
通过设置top、right、bottom和left属性来指定相对于原始位置的偏移量。
元素在文档流中保留其原有的空间，其他元素不会填充该元素的位置。
相对定位不会影响其他元素的布局。</p>

<p>absolute（绝对定位）：</p>

<p>相对于最近的具有定位属性（relative、absolute或fixed）的祖先元素进行定位。
通过设置top、right、bottom和left属性来指定相对于定位祖先的偏移量。
元素从文档流中脱离，不保留原有的空间，其他元素会填充该元素的位置。
绝对定位会影响其他元素的布局，其他元素会根据绝对定位元素的位置进行调整。</p>

<p>fixed（固定定位）：</p>

<p>相对于浏览器窗口进行定位。
通过设置top、right、bottom和left属性来指定相对于窗口的偏移量。
元素从文档流中脱离，不保留原有的空间，其他元素会填充该元素的位置。
固定定位会影响其他元素的布局，其他元素会根据固定定位元素的位置进行调整。
固定定位的元素会随着页面滚动而保持在固定的位置，不受滚动影响。</p>

<p>B. 这个说法是不正确的。absolute定位元素的偏移是相对于最近的具有定位属性（relative、absolute或fixed）的祖先元素，而不是相对于浏览器窗口设置偏移。父级fixed不一定是浏览器窗口</p>

<p>C. 这个说法是正确的。z-index属性用于控制元素的层级关系，可以应用于position属性为relative、absolute和fixed的元素，以确定元素在堆叠顺序中的显示顺序。</p>

<p>D. 这个说法是不正确的。relative定位元素以它原来的位置为基准进行偏移，但是在其移动后，原来的位置仍然会占据空间。也就是说，相对定位的元素在文档流中仍然保留其原来的空间，不会被其他元素填充。</p>

<hr />
<hr />

<ol>
  <li>请选择console打印的正确值</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Object</span><span class="dl">'</span><span class="p">;</span>
<span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Function</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">function</span> <span class="nf">Animal</span> <span class="p">()</span> <span class="p">{};</span>
<span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Animal</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">cat</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">Animal</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>
    <p>答案：Object Function</p>
  </li>
  <li>
    <p>解析：</p>
  </li>
</ul>

<p>在 JavaScript 中，创建对象的方式有多种，包括使用构造函数、字面量、Object.create() 等。不同的创建方式会影响对象的原型链。</p>

<p>对于 Animal 函数来说，它是一个构造函数，同时也是一个函数对象。函数对象在 JavaScript 中有一个特殊的原型 Function.prototype。所以 Animal 的原型链是 Animal -&gt; Function.prototype -&gt; Object.prototype -&gt; null。</p>

<p>由于 Animal 函数本身没有 foo 属性，JavaScript 会在原型链上查找。首先查找 Animal.prototype，再查找 Function.prototype</p>

<p>对于 cat 对象来说，它的原型链是 cat -&gt; Animal.prototype -&gt; Object.prototype -&gt; null。这是因为在创建 cat 对象时，使用了 new Animal()，这会将 Animal.prototype 设置为 cat 对象的原型。而 Animal.prototype 的原型是 Object.prototype。Animal.prototype 的原型是 Object.prototype，这是因为在 JavaScript 中，构造函数的原型对象默认继承自 Object.prototype</p>

<p>由于 cat 对象本身没有 foo 属性，JavaScript 会在原型链上查找。首先查找 Animal.prototype，再查找 Object.prototype</p>

<hr />
<hr />

<ol>
  <li>请选择正确的输出结果</li>
</ol>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> 
<span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">bar</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">setTimeout</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>答案 123和333</p>
  </li>
  <li>
    <p>这题我会</p>
  </li>
</ul>

<hr />
<hr />

<ol>
  <li>下列哪个属性不会引起浏览器重排（reflow）:</li>
</ol>

<p>A</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">@keyframes</span> <span class="n">animate</span> <span class="p">{</span>
        <span class="err">0</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
            <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="err">25</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
            <span class="nl">left</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="err">50</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">top</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
            <span class="nl">left</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="err">75</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">top</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
            <span class="nl">left</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>B</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">@keyframes</span> <span class="n">animate</span> <span class="p">{</span>
        <span class="err">0</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="err">25</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">200px</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="err">50</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">200px</span><span class="p">,</span> <span class="m">200px</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="err">75</span><span class="o">%</span> <span class="p">{</span>
            <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">200px</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>C</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.hide</span> <span class="p">{</span>
        <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>D</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">.hide</span> <span class="p">{</span>
        <span class="nl">visibility</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>答案：B</li>
  <li>解析：使用 transform 属性的动画不会引起浏览器重排（reflow）</li>
</ul>

<p>transform 属性是通过 GPU 加速进行处理的，不会引起浏览器重排。</p>

<p>GPU（图形处理单元）加速是一种利用计算机的图形处理硬件来加速图形渲染和动画的技术。在Web开发中，通过使用一些特定的CSS属性，如transform、opacity、filter等，可以触发GPU加速。</p>

<p>当使用GPU加速时，浏览器会将特定的渲染操作委托给GPU来处理，而不是由CPU来计算和渲染。由于GPU在处理图形计算方面具有强大的性能和并行处理能力，因此能够更快地完成渲染操作，提高动画的流畅性和性能。</p>

<hr />
<hr />

<p>14.关于javascript，以下选项描述错误的是哪几个</p>

<p>A 在原型上扩展的可枚举方法，会被for in循环出来
B 通过hasOwnProperty可判断一个对象以及其原型链上是否具有指定名称的属性
C 每个函数对象都有prototype属性，返回对象类型原型的引用
D For循环是按顺序的，for in 循环是不一定按顺序的
E for…of 循环可遍历普通对象，如{a:’1’, b:2}</p>

<ul>
  <li>答案：E</li>
  <li>解析：for…of 循环不能直接遍历普通对象（plain object）</li>
</ul>

<p>A. 在原型上扩展的可枚举方法会被 for…in 循环遍历出来。for…in 循环会遍历对象自身和继承的可枚举属性（包括原型链上的属性）。</p>

<p>B. 通过 hasOwnProperty 方法可以判断一个对象是否具有指定名称的属性，并且该属性必须是对象自身拥有的，不包括继承的属性。</p>

<p>C. 每个函数对象都有 prototype 属性，它是一个指向该函数类型的原型对象的引用。该原型对象包含了函数类型所创建的对象实例共享的属性和方法。</p>

<p>D. for 循环是按顺序迭代的，而 for…in 循环是不保证按顺序迭代的，它可能会以任意顺序遍历对象的属性。比如for…in 循环在遍历对象属性时，不保证按照特定顺序进行迭代，这是因为 JavaScript 中对象的属性没有固定的顺序。</p>

<p>E. 正确的是，for…of 循环不能直接遍历普通对象（plain object）。for…of 循环适用于可迭代对象（iterable objects），如数组、字符串、Set、Map 等，可以按顺序遍历它们的元素值。但普通对象并不是可迭代对象，所以无法使用 for…of 循环遍历普通对象的属性。</p>

<hr />
<hr />

<p>15.下列关于js事件的描述中，正确的有哪些</p>

<p>A 事件冒泡是指当一个元素上的事件被触发的时候，比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。
B 不支持冒泡的事件有blur、focus、load、resize、mouseleave
C 事件委托不依赖于事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。
D 通过addEventListener方法给Dom添加事件监听，addEventListener形参中的第三个参数控制是捕获传递触发还是冒泡传递触发。</p>

<ul>
  <li>
    <p>答案：ACD</p>
  </li>
  <li>
    <p>解析：</p>
  </li>
</ul>

<p>A. 事件冒泡是指当一个元素上的事件被触发时，同样的事件将在该元素的所有祖先元素中被触发。事件会从最内层的元素开始触发，然后逐级向上冒泡至最外层的元素。</p>

<p>选项 B 描述错误，因为 blur、focus、load、resize、mouseleave 等事件是支持冒泡的，它们可以在父元素中触发相应的事件处理程序。</p>

<p>C. 事件委托不依赖于事件冒泡，它指的是将事件处理程序绑定到父元素（或更上层元素），通过事件冒泡的机制来管理某一类型的所有子元素的事件。这样可以减少事件处理程序的数量，提高性能和代码简洁性。</p>

<p>D. 通过 addEventListener 方法给 DOM 添加事件监听，其中形参中的第三个参数控制是捕获传递触发还是冒泡传递触发。该参数是一个布尔值，为 true 表示使用捕获传递，为 false（默认值）表示使用冒泡传递。</p>

<ul>
  <li>补充：捕获传递（Capture Phase）和冒泡传递（Bubbling Phase）是指在事件处理过程中，事件在 DOM 树中传递的两个阶段。</li>
</ul>

<p>捕获传递（Capture Phase）：
在捕获阶段，事件从文档根节点开始向下传递，直到达到目标元素的父级元素。在这个阶段，父级元素的事件处理程序有机会先于目标元素的事件处理程序被调用。捕获传递阶段的目的是为了在事件到达目标元素之前进行一些前置处理。</p>

<p>目标阶段（Target Phase）：
当事件到达目标元素时，即触发了事件的元素本身，进入目标阶段。在目标阶段，目标元素上绑定的事件处理程序被调用。</p>

<p>冒泡传递（Bubbling Phase）：
在冒泡阶段，事件从目标元素开始向上冒泡，依次触发目标元素的父级元素的事件处理程序，直到达到文档根节点。在这个阶段，父级元素的事件处理程序有机会对事件进行响应或进一步处理。</p>

<p>一个例子：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"outer"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"inner"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"button"</span><span class="nt">&gt;</span>Click me<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">outer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">outer</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">inner</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">inner</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">outer</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Capture Phase: Outer</span><span class="dl">'</span><span class="p">);</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">// 使用捕获传递</span>

<span class="nx">inner</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Capture Phase: Inner</span><span class="dl">'</span><span class="p">);</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">// 使用捕获传递</span>

<span class="nx">button</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Target Phase: Button</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">inner</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Bubble Phase: Inner</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span> <span class="c1">// 默认使用冒泡传递</span>

<span class="nx">outer</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Bubble Phase: Outer</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span> <span class="c1">// 默认使用冒泡传递</span>
</code></pre></div></div>

<ul>
  <li>点击按钮时</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Capture Phase: Outer
Capture Phase: Inner
Target Phase: Button
Bubble Phase: Inner
Bubble Phase: Outer
</code></pre></div></div>

<p>可以看到，事件首先经过捕获阶段，从外层容器元素（outer）开始，然后逐级向下传递到内层容器元素（inner），最后到达目标元素（button）。接着，事件进入目标阶段，触发了目标元素上的事件处理程序。最后，事件进入冒泡阶段，从内层容器元素（inner）开始向上冒泡，直到外层容器元素（outer）。</p>

<hr />
<hr />

<p>16.css中哪些属性可以继承</p>

<p>A font-size
B margin
C border
D color</p>

<ul>
  <li>答案：ABD</li>
  <li>解析：</li>
</ul>

<p>A. font-size（字体大小）：子元素会继承父元素的字体大小，除非子元素自身定义了自己的字体大小。</p>

<p>B. margin（外边距）：垂直方向的外边距（margin-top、margin-bottom）会被子元素继承。水平方向的外边距（margin-left、margin-right）不会被继承。</p>

<p>D. color（文本颜色）：子元素会继承父元素的文本颜色，除非子元素自身定义了自己的文本颜色。</p>

<p>所以，选项 A、B、D 中的属性可以被继承，而选项 C 中的 border（边框）属性不会被继承。</p>

<hr />
<hr />

<p>17.BFC（Block Formatting Context）格式化上下文，是Web页面中盒模型布局的CSS渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。形成BFC的条件有哪些</p>

<p>A display 为以下其中之一的值 inline-block，table-cell，table-caption、flex
B 浮动元素，float 除 none 以外的值
C overflow 除了 visible 以外的值（hidden，auto，scroll）
D 绝对定位元素，position（absolute，fixed）</p>

<ul>
  <li>答案：ABCD</li>
  <li>
    <p>解析：无</p>
  </li>
  <li>补充：BFC作用</li>
</ul>

<p>清除浮动：当父元素包含浮动元素时，会导致父元素塌陷或无法正确包裹浮动元素。通过创建 BFC，可以使父元素包含浮动元素的高度得到正确计算，从而解决浮动问题。</p>

<p>防止边距重叠：在普通流中，相邻的垂直边距会发生重叠现象，导致边距计算不符合预期。在 BFC 中，垂直边距会被隔离，不会重叠。</p>

<p>自适应两栏布局：通过在容器中创建 BFC，可以使得容器内的两个元素分别处于左右两栏，实现自适应的两栏布局。</p>

<p>阻止文字环绕：当元素浮动时，周围的文字会环绕在其周围。通过创建 BFC，可以阻止文字环绕浮动元素，让其他内容不会受到浮动元素的影响。</p>

<p>控制元素的布局方式：BFC 中的元素按照一定的规则进行布局，例如，块级元素会垂直排列，宽度自动撑开，不与浮动元素重叠等。</p>

<ul>
  <li>补充：什么是浮动元素</li>
</ul>

<p>浮动元素是指通过设置 CSS 属性 float 为除 none 以外的值，使元素脱离正常的文档流，并沿着其容器的左侧或右侧浮动。浮动元素可以向左或向右浮动，周围的内容会环绕在其周围。</p>

<p>浮动元素常用于创建多栏布局、图像排列等情况。当元素浮动时，其宽度会根据内容自动收缩，使得其他元素可以占据其原本的位置。浮动元素会影响其他非浮动元素的布局，导致它们围绕浮动元素重新排列。</p>

<ul>
  <li>补充：高度塌陷</li>
</ul>

<p>高度塌陷（或称为“坍塌”）指的是当一个父元素（容器）包含了浮动元素，并且没有设置明确的高度或清除浮动的机制时，父元素的高度无法正确地包裹其内部的浮动元素，导致父元素的高度变为零或异常小。</p>

<p>高度塌陷的原因是，浮动元素脱离了文档流，不再占据正常的空间，而父元素没有考虑浮动元素的高度，因此无法正确计算父元素的高度。</p>

<hr />
<hr />

<p>18.下列会导致页面回流reflow的操作有哪些</p>

<p>A 添加或者删除可见的DOM元素
B 仅修改DOM元素的字体颜色、背景色
C resize浏览器窗口
D 设置可见元素为display: none
E 读取元素的属性offsetWidth和offsetHeight</p>

<ul>
  <li>
    <p>答案：ADE</p>
  </li>
  <li>
    <p>解析：</p>
  </li>
</ul>

<p>A. 添加或删除可见的 DOM 元素：当添加或删除可见的 DOM 元素时，会影响页面的布局，导致页面回流。</p>

<p>D. 设置可见元素为 display: none：将可见元素的 CSS 属性 display 设置为 none，会导致元素从页面中消失，从而影响整个页面的布局，触发页面回流。</p>

<p>E. 读取元素的属性 offsetWidth 和 offsetHeight：当读取元素的尺寸属性（如 offsetWidth 和 offsetHeight）时，浏览器需要计算元素的大小，并可能触发页面回流。</p>

<p>选项 B（仅修改字体颜色、背景色）和 C（resize 浏览器窗口）不会直接引起页面回流，但可能会触发其他的重绘操作（repaint），从而影响页面的性能。</p>

<ul>
  <li>补充：页面回流</li>
</ul>

<p>页面回流（reflow）是指浏览器为了重新计算元素的几何属性（如位置、尺寸等），而导致整个页面布局发生变化的过程。当页面中的元素发生改变，需要重新计算它们的位置和大小时，浏览器会执行回流操作。</p>

<p>页面回流是一种相对耗费计算资源的操作，因为它需要对页面的每个可见元素进行重新布局计算。当页面中的元素发生变化时，浏览器会进行回流操作来确保元素的几何属性正确计算和渲染。</p>

<hr />
<hr />

<p>19.关于position定位，下列说法正确的是哪些</p>

<p>A absolute的元素，如果它的父容器设置了position属性，并且position的属性值为absolute或者relative，那么就会依据父容器进行偏移
B relative元素以它原来的位置为基准偏移，在其移动后，原来的位置不再占据空间
C fixed元素，可定位于相对于浏览器窗口的指定坐标，它始终是以 body 为依据
D relative元素是参照父级的原始点为原始点，无父级则以BODY的原始点为原始点，配合TOP、RIGHT、BOTTOM、LEFT进行定位，当父级内有padding等CSS属性时，当前级的原始点则参照父级内容区的原始点进行定位</p>

<ul>
  <li>答案：ACD</li>
  <li>解析：</li>
</ul>

<p>absolute 元素能够根据其最近的已定位的祖先元素进行偏移，relative 元素以其原来的位置为基准进行偏移，fixed 元素相对于浏览器窗口进行定位。</p>

<p>relative 元素会参考父级元素的原始点进行定位，如果没有父级元素，则以 body 元素为依据。当父级元素有 padding 等 CSS 属性时，relative 元素的原始点参考的是父级内容区的原始点进行定位。</p>

<p>relative 元素在移动后，仍然占据原来的位置，不会改变其他元素的布局。它的偏移会影响其他元素的位置，但原来的位置仍然会保留，占据空间。</p>

<p>在这里，移动指的是通过设置 relative 元素的偏移属性（如 top、right、bottom、left）来改变其在页面上的位置。</p>

<hr />
<hr />

<p>20.请选择结果为真的表达式</p>

<p>A null instanceof Object
B null === undefined
C null == undefined
D undefined === undefined
E null == null
F null === null</p>

<ul>
  <li>答案：BCEF</li>
  <li>解析：</li>
</ul>

<p>在 JavaScript 中，null 表示一个空值，而 undefined 表示一个未定义的值。</p>

<p>A. null instanceof Object 的结果为假。instanceof 运算符用于检查对象是否属于某个类或构造函数的实例。null 不是任何类或构造函数的实例，因此结果为假。</p>

<p>B. null === undefined 的结果为假。=== 严格相等运算符要求值和类型都相等，null 和 undefined 的类型不同，因此结果为假。</p>

<p>C. null == undefined 的结果为真。== 相等运算符在进行比较时会进行类型转换，null 和 undefined 在进行类型转换后会被视为相等，因此结果为真。</p>

<p>D. undefined === undefined 的结果为真。=== 严格相等运算符要求值和类型都相等，undefined 的类型是 undefined，因此结果为真。</p>

<p>E. null == null 的结果为真。null 和它自身是相等的，因此结果为真。</p>

<p>F. null === null 的结果为真。null 和它自身是严格相等的，因此结果为真。</p>

<hr />
<hr />

<h2 id="编程题">编程题</h2>

<p>21.统计一个字符串出现最多的字母</p>

<p>输入例子：
aab
输出例子：
a</p>

<p>22.查找字符串中的最长公共前缀</p>

<p>输入例子：
flower,flow,flight
输出例子：
fl
例子说明：
fl为数组中最长公共前缀字符串</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-11-is/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="js" /><category term="python" /><summary type="html"><![CDATA[链接：https://www.nowcoder.com/exam/test/74802082/detail?pid=36048429&amp;examPageSource=Company&amp;testCallback=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fcompany%3FcurrentTab%3Drecommand%26jobId%3D100%26keyword%3D58%E5%90%8C%E5%9F%8E%26selectStatus%3D0&amp;testclass=%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91]]></summary></entry><entry><title type="html">leetcode: 携程笔试</title><link href="/leetcode/python/xiecheng/" rel="alternate" type="text/html" title="leetcode: 携程笔试" /><published>2023-10-11T12:04:54+08:00</published><updated>2023-10-11T12:04:54+08:00</updated><id>/leetcode/python/xiecheng</id><content type="html" xml:base="/leetcode/python/xiecheng/"><![CDATA[<h2 id="三位回文串">三位回文串</h2>

<p>01串，修改一位，包含尽可能多的长度为3的回文子串<br />
输入 01101 <br />
输出 2<br />
解释 11101包含111和101</p>

<p>通过率23%</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 暴力遍历
</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="k">def</span> <span class="nf">sub_count</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">计算回文子串的数量</span><span class="sh">'''</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]:</span>
            <span class="n">count</span> <span class="o">+=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">count</span>

<span class="k">def</span> <span class="nf">change</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">s</span><span class="o">==</span><span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span>

<span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span> <span class="o">==</span> <span class="p">[]</span> <span class="p">:</span> <span class="nf">exit</span><span class="p">()</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">num</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
        <span class="n">a_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
        <span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">change</span><span class="p">(</span><span class="n">a_list</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">new_a</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="nf">sub_count</span><span class="p">(</span><span class="n">new_a</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="坐标排序">坐标排序</h2>

<p>n个坐标点，查找第x个</p>

<p>排序：横坐标从小到大，纵坐标从小到大，拆分两部分（左比右少），查找x在做还是右，返回：左L右R<br />
排序：纵坐标从小到大，横坐标从小到大。。。返回LR<br />
循环<br />
只剩一个时结束，输出O<br />
4 2
-1 3
3 5
2 6
4 3
输出RRO</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sorted函数直接对二维数组进行二维排序
# 要先对纵坐标排序时，把原数组横纵坐标对调就行了
</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="n">input_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">ans_str</span> <span class="o">=</span> <span class="sh">""</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="p">[]:</span>
        <span class="k">break</span>
    <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="nf">int</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nf">int</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])])</span>

<span class="n">n</span> <span class="o">=</span> <span class="n">input_list</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">input_list</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
<span class="n">point_list</span> <span class="o">=</span> <span class="n">input_list</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
<span class="n">target</span> <span class="o">=</span> <span class="n">point_list</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">point_list</span><span class="p">)</span><span class="o">!=</span><span class="mi">1</span><span class="p">:</span>
    <span class="n">point_list</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">point_list</span><span class="p">)</span>
    <span class="n">half</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">point_list</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">left_list</span> <span class="o">=</span> <span class="n">point_list</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">half</span><span class="p">]</span>
    <span class="n">right_list</span> <span class="o">=</span> <span class="n">point_list</span><span class="p">[</span><span class="n">half</span><span class="p">:</span><span class="nf">len</span><span class="p">(</span><span class="n">point_list</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">left_list</span><span class="p">:</span>
        <span class="n">ans_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s">L</span><span class="sh">"</span>
        <span class="n">point_list</span> <span class="o">=</span> <span class="n">left_list</span>
    <span class="k">elif</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">right_list</span><span class="p">:</span>
        <span class="n">ans_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s">R</span><span class="sh">"</span>
        <span class="n">point_list</span> <span class="o">=</span> <span class="n">right_list</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">error: target not find</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">point_list</span> <span class="o">=</span> <span class="p">[[</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">]</span> <span class="ow">in</span> <span class="n">point_list</span><span class="p">]</span>
    <span class="n">target</span> <span class="o">=</span> <span class="p">[</span><span class="n">target</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">target</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>

<span class="n">ans_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s">O</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans_str</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="字符串相邻不等">字符串相邻不等</h2>

<p>字符串，每次把一个字符改为字母表上相邻的字符（左或右）
修改结果每个相邻字符串都不相等
求最少操作多少次</p>

<p>输入 aabcc</p>

<p>输出
2
babcb</p>

<p>因为我的结果是babdc所以判挂了，但理论上没问题，不知道有没有人工判卷 ← 大概不可能吧</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 每个字母修改次数只能是1次或2次，不存在需要修改3次的情况
# 考虑两种情况：aab和baa，在遍历到当前字母和后面一位字母相同时，要根据情况判断修改当前一位还是后面一位
</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="p">[]:</span>
        <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">str_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">get_replace_list</span><span class="p">(</span><span class="n">letter</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">返回一次改变可能的字母列表</span><span class="sh">'''</span>
    <span class="n">letter_num</span> <span class="o">=</span> <span class="nf">ord</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">letter_num</span> <span class="o">&lt;=</span> <span class="mi">97</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="sh">"</span><span class="s">b</span><span class="sh">"</span><span class="p">]</span>
    <span class="k">elif</span> <span class="n">letter_num</span> <span class="o">&gt;=</span> <span class="mi">122</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">chr</span><span class="p">(</span><span class="n">letter_num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nf">chr</span><span class="p">(</span><span class="n">letter_num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">get_replace_list_deep</span><span class="p">(</span><span class="n">letter</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">返回两次改变后可能的字母列表</span><span class="sh">'''</span>
    <span class="n">replace_list_deep</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">replace_list</span> <span class="o">=</span> <span class="nf">get_replace_list</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">replace_list</span><span class="p">:</span>
        <span class="n">replace_list_deep</span> <span class="o">+=</span> <span class="nf">get_replace_list</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">replace_list_deep</span>


<span class="n">ans_num</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">str_list</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">str_list</span><span class="p">):</span>
        <span class="k">break</span>
    <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="n">str_list</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
        <span class="c1"># 改本项
</span>        <span class="n">both_side</span> <span class="o">=</span> <span class="p">[</span><span class="n">str_list</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span> <span class="k">if</span> <span class="n">index</span> <span class="o">==</span><span class="mi">0</span> <span class="k">else</span> <span class="p">[</span><span class="n">str_list</span><span class="p">[</span><span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">str_list</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span>
        <span class="n">replace_list</span> <span class="o">=</span> <span class="nf">get_replace_list</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
        <span class="n">replace_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">replace_list</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">both_side</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">replace_list</span> <span class="o">==</span> <span class="p">[]:</span>
            <span class="n">ans_num</span> <span class="o">+=</span><span class="mi">1</span>
            <span class="n">str_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">replace_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="k">continue</span>
        <span class="c1"># 改后项
</span>        <span class="n">both_side</span> <span class="o">=</span> <span class="p">[</span><span class="n">str_list</span><span class="p">[</span><span class="n">index</span><span class="p">]]</span> <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">str_list</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span> <span class="k">else</span> <span class="p">[</span><span class="n">str_list</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">str_list</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]]</span>
        <span class="n">replace_list</span> <span class="o">=</span> <span class="nf">get_replace_list</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
        <span class="n">replace_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">replace_list</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">both_side</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">replace_list</span> <span class="o">==</span> <span class="p">[]:</span>
            <span class="n">ans_num</span> <span class="o">+=</span> <span class="mi">2</span>
            <span class="n">replace_list</span> <span class="o">=</span> <span class="nf">get_replace_list_deep</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
            <span class="n">replace_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">replace_list</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">both_side</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ans_num</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">str_list</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">replace_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="n">ans_num</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">str_list</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="三色树">三色树</h2>

<p>树的每个节点被染为rgb三色，求删掉一条边，满足分成两个连通块都恰好包含三种颜色的边的数量</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>示例
7
rgbrgbg
1 2
2 3
3 4
4 5
5 6
6 7

1
</code></pre></div></div>

<p>因为到这里时间不多了，所以没做</p>

<p>贴一个网上的思路：统计子树中含有的rgb的数量，判断是否包含三种颜色，然后再用总的rgb数减去子树中的rgb数量，判断是否包含三种颜色。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-11-xiecheng/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[三位回文串]]></summary></entry><entry><title type="html">leetcode: 得物笔试</title><link href="/leetcode/js/dewu/" rel="alternate" type="text/html" title="leetcode: 得物笔试" /><published>2023-10-10T17:45:01+08:00</published><updated>2023-10-10T17:45:01+08:00</updated><id>/leetcode/js/dewu</id><content type="html" xml:base="/leetcode/js/dewu/"><![CDATA[<ul>
  <li>接受一个以Promise形式提供的任务列表和一个表示同时发起的任务数量的参数，所有任务完成后把结果按序放入数组返回</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="kd">function</span> <span class="nf">processTasks</span><span class="p">(</span><span class="nx">taskList</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">let</span> <span class="nx">currentIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="c1">// 执行单个任务</span>
    <span class="k">async</span> <span class="kd">function</span> <span class="nf">runTask</span><span class="p">(</span><span class="nx">task</span><span class="p">,</span> <span class="nx">taskIndex</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">task</span><span class="p">();</span>
        <span class="nx">results</span><span class="p">[</span><span class="nx">taskIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 滑动窗口</span>
    <span class="k">async</span> <span class="kd">function</span> <span class="nf">runTasksInWindow</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">while </span><span class="p">(</span><span class="nx">currentIndex</span> <span class="o">&lt;</span> <span class="nx">taskList</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">taskIndex</span> <span class="o">=</span> <span class="nx">currentIndex</span><span class="o">++</span><span class="p">;</span>
            <span class="kd">const</span> <span class="nx">task</span> <span class="o">=</span> <span class="nx">taskList</span><span class="p">[</span><span class="nx">taskIndex</span><span class="p">];</span>
            <span class="k">await</span> <span class="nf">runTask</span><span class="p">(</span><span class="nx">task</span><span class="p">,</span> <span class="nx">taskIndex</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 并行任务</span>
    <span class="kd">const</span> <span class="nx">runningTasks</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">runningTasks</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nf">runTasksInWindow</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="nx">runningTasks</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">results</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 示例使用</span>

<span class="kd">const</span> <span class="nx">delay</span> <span class="o">=</span> <span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nf">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">));</span>

<span class="kd">const</span> <span class="nx">createTask</span> <span class="o">=</span> <span class="p">(</span><span class="nx">taskName</span><span class="p">,</span> <span class="nx">duration</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`starting task </span><span class="p">${</span><span class="nx">taskName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
        <span class="nf">delay</span><span class="p">(</span><span class="nx">duration</span><span class="p">).</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`complete task </span><span class="p">${</span><span class="nx">taskName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
            <span class="nf">resolve</span><span class="p">(</span><span class="nx">taskName</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">taskList</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">createTask</span><span class="p">(</span><span class="dl">"</span><span class="s2">task1</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">createTask</span><span class="p">(</span><span class="dl">"</span><span class="s2">task2</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">createTask</span><span class="p">(</span><span class="dl">"</span><span class="s2">task3</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span>
    <span class="p">()</span> <span class="o">=&gt;</span> <span class="nf">createTask</span><span class="p">(</span><span class="dl">"</span><span class="s2">task4</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1000</span><span class="p">),</span>
<span class="p">];</span>

<span class="c1">//这段代码是一个立即执行的异步函数表达式（Immediately Invoked Async Function Expression，IIFE）</span>
<span class="c1">// 在这里，定义了一个匿名的异步函数，并立即执行它</span>
<span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">results</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">processTasks</span><span class="p">(</span><span class="nx">taskList</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
<span class="p">})();</span>
</code></pre></div></div>

<ul>
  <li>调用js</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node.exe .\test.js
</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-10-dewu/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="js" /><summary type="html"><![CDATA[接受一个以Promise形式提供的任务列表和一个表示同时发起的任务数量的参数，所有任务完成后把结果按序放入数组返回]]></summary></entry><entry><title type="html">leetcode: 途虎笔试</title><link href="/leetcode/tuhu/" rel="alternate" type="text/html" title="leetcode: 途虎笔试" /><published>2023-10-09T20:33:56+08:00</published><updated>2023-10-09T20:33:56+08:00</updated><id>/leetcode/tuhu</id><content type="html" xml:base="/leetcode/tuhu/"><![CDATA[<ul>
  <li>一般来说hr拿到笔试分数之后不可能去仔细看你的代码</li>
  <li>所以这几道笔试题就显得很弱鸡</li>
  <li>（这几道算法题真的配得上前面的逆天选择题吗）</li>
</ul>

<h2 id="js把秒数格式化为000232格式">js,把秒数格式化为”00:02:32”格式</h2>

<ul>
  <li>这题还好，作为第一题刚刚合适</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">formatTime</span><span class="p">(</span> <span class="nx">seconds</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>
    <span class="kd">let</span> <span class="nx">ss</span> <span class="o">=</span> <span class="nx">seconds</span> <span class="o">%</span> <span class="mi">60</span>
    <span class="kd">let</span> <span class="nx">mm</span> <span class="o">=</span>  <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">seconds</span> <span class="o">%</span> <span class="mi">3600</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">hh</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">seconds</span> <span class="o">/</span> <span class="mi">3600</span><span class="p">)</span>
    <span class="nx">ss</span> <span class="o">=</span> <span class="nx">ss</span><span class="p">.</span><span class="nf">toString</span><span class="p">().</span><span class="nf">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">mm</span> <span class="o">=</span> <span class="nx">mm</span><span class="p">.</span><span class="nf">toString</span><span class="p">().</span><span class="nf">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">hh</span> <span class="o">=</span> <span class="nx">hh</span><span class="p">.</span><span class="nf">toString</span><span class="p">().</span><span class="nf">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">hh</span><span class="o">+</span><span class="dl">"</span><span class="s2">:</span><span class="dl">"</span><span class="o">+</span><span class="nx">mm</span><span class="o">+</span><span class="dl">"</span><span class="s2">:</span><span class="dl">"</span><span class="o">+</span><span class="nx">ss</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">formatTime</span> <span class="p">:</span> <span class="nx">formatTime</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="两字符串str1str2其中str2由str1乱序重排后随机添加一个字符找出这个字符">两字符串str1,str2,其中str2由str1乱序重排后随机添加一个字符，找出这个字符</h2>

<ul>
  <li>这题就完全意义不明</li>
  <li>我选择直接遍历</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findTheDifference</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">str1</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">str2</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">str2</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">str1</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">char</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">str1</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">char</span><span class="p">,</span><span class="sh">""</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">findTheDifference</span><span class="p">(</span><span class="sh">"</span><span class="s">aa</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">aaa</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="找车胎">找车胎</h2>

<ul>
  <li>题目给了一个场景，从一堆车胎里找胎</li>
  <li>list1是车胎宽度</li>
  <li>list2是宽度对应的数量</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[145,175,215,235],[8,7,2,10]

排序list1
max(list1) = a
找出list2中max所在index对应list1中的数值b
输出[排序list1][a,b]
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">searchTreadWidth</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">treadWidths</span><span class="p">,</span> <span class="n">tireCounts</span><span class="p">):</span>
        <span class="n">maxCount</span> <span class="o">=</span> <span class="n">treadWidths</span><span class="p">[</span><span class="n">tireCounts</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">tireCounts</span><span class="p">))]</span>
        <span class="n">treadWidthsSort</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">treadWidths</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">treadWidthsSort</span><span class="p">,[</span><span class="n">treadWidthsSort</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">maxCount</span><span class="p">]]</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">searchTreadWidth</span><span class="p">([</span><span class="mi">155</span><span class="p">,</span><span class="mi">175</span><span class="p">,</span><span class="mi">165</span><span class="p">,</span><span class="mi">195</span><span class="p">,</span><span class="mi">215</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">2</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-09-tuhu/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><summary type="html"><![CDATA[一般来说hr拿到笔试分数之后不可能去仔细看你的代码 所以这几道笔试题就显得很弱鸡 （这几道算法题真的配得上前面的逆天选择题吗）]]></summary></entry><entry><title type="html">js: 列表扩展</title><link href="/js/list_unshift/" rel="alternate" type="text/html" title="js: 列表扩展" /><published>2023-10-08T14:39:03+08:00</published><updated>2023-10-08T14:39:03+08:00</updated><id>/js/list_unshift</id><content type="html" xml:base="/js/list_unshift/"><![CDATA[<ul>
  <li>unshift函数扩展列表，三点（扩展运算符）拆分列表</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">show_list</span><span class="p">.</span><span class="nf">unshift</span><span class="p">(...</span><span class="nx">image_urls</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>关于扩展运算符</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">array1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span> <span class="c1">// [1, 2, 3, 4, 5]</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bar</span><span class="dl">'</span><span class="p">,</span> <span class="na">x</span><span class="p">:</span> <span class="mi">42</span> <span class="p">};</span>
<span class="kd">const</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">obj1</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="mi">10</span> <span class="p">};</span> <span class="c1">// { foo: 'bar', x: 42, y: 10 }</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/js/2023-10-08-list_unshift/image_1.jpg) -->]]></content><author><name></name></author><category term="js" /><summary type="html"><![CDATA[unshift函数扩展列表，三点（扩展运算符）拆分列表]]></summary></entry><entry><title type="html">vue: 读取router参数</title><link href="/vue/router_parameter/" rel="alternate" type="text/html" title="vue: 读取router参数" /><published>2023-10-08T14:36:17+08:00</published><updated>2023-10-08T14:36:17+08:00</updated><id>/vue/router_parameter</id><content type="html" xml:base="/vue/router_parameter/"><![CDATA[<ul>
  <li>
    <p>vue读取router参数</p>
  </li>
  <li>比如通过这样的链接访问网页：http://localhost:8080/#/home?id_input=10001</li>
  <li>希望读取到id_input的值并赋给变量</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">vue-router</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nf">useRouter</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">currentRoute</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id_input</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>在 Vue 3 中，router.currentRoute.value.query 返回的是一个包含查询参数的对象，其中每个查询参数的值是一个字符串数组（string[]）或单个字符串（string）</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">id_input</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">currentRoute</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">id_input</span> <span class="k">as</span> <span class="nx">string</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/vue/2023-10-08-router_parameter/image_1.jpg) -->]]></content><author><name></name></author><category term="vue" /><summary type="html"><![CDATA[vue读取router参数]]></summary></entry><entry><title type="html">leetcode: 记某鱼笔试的5道题</title><link href="/leetcode/python/duozhuayu/" rel="alternate" type="text/html" title="leetcode: 记某鱼笔试的5道题" /><published>2023-10-06T16:14:24+08:00</published><updated>2023-10-06T16:14:24+08:00</updated><id>/leetcode/python/duozhuayu</id><content type="html" xml:base="/leetcode/python/duozhuayu/"><![CDATA[<ul>
  <li>据说这个公司每年都用这5道，所以不写公司名了</li>
</ul>

<h2 id="1-good-word">1. Good Word</h2>
<p>字符串中出现最多的字符数量m<br />
字符串中出现最少的字符数量n<br />
m/n = 整数且&gt;1
满足条件为Good Word</p>

<ul>
  <li>暴力求解：创建了一个dic，记录所有字母出现的次数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isGoodWord</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">word</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="c1"># write code here
</span>        <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">letter</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">letter</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">dic</span> <span class="k">else</span> <span class="n">dic</span><span class="p">[</span><span class="n">letter</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span>
        <span class="n">ct</span> <span class="o">=</span> <span class="p">[</span><span class="n">dic</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="n">dic</span> <span class="p">]</span>
        <span class="n">maxn</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
        <span class="n">minn</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">maxn</span> <span class="o">%</span> <span class="n">minn</span> <span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">maxn</span><span class="o">/</span><span class="n">minn</span> <span class="o">&gt;</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>


<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">isGoodWord</span><span class="p">(</span><span class="sh">"</span><span class="s">duozhuayu</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="2-升序链表合并">2. 升序链表合并</h2>

<ul>
  <li>
    <p>合并结果仍为升序链表</p>
  </li>
  <li>
    <p>遍历就完了</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span><span class="n">next_node</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span><span class="n">ListNode</span> <span class="o">=</span> <span class="n">next_node</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">merge_orders</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">a</span><span class="p">:</span><span class="n">ListNode</span> <span class="p">,</span> <span class="n">b</span><span class="p">:</span><span class="n">ListNode</span> <span class="p">)</span> <span class="o">-&gt;</span><span class="n">ListNode</span><span class="p">:</span>
        <span class="c1"># write code here
</span>        <span class="n">ans</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="bp">None</span><span class="p">)</span>
        <span class="n">pointer</span> <span class="o">=</span> <span class="n">ans</span>
        <span class="k">while</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">b</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">a</span><span class="p">.</span><span class="n">val</span><span class="o">&lt;=</span><span class="n">b</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">pointer</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">a</span>
                <span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">pointer</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">b</span>
                <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">pointer</span> <span class="o">=</span> <span class="n">pointer</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">a</span><span class="p">:</span>
            <span class="n">pointer</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">a</span>
        <span class="k">if</span> <span class="n">b</span><span class="p">:</span>
            <span class="n">pointer</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">b</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">.</span><span class="nb">next</span>


<span class="n">ln1</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nc">ListNode</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nc">ListNode</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="bp">None</span><span class="p">)))</span>
<span class="n">ln2</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nc">ListNode</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="bp">None</span><span class="p">))</span>
<span class="n">ans</span> <span class="o">=</span> <span class="nc">Solution</span><span class="p">().</span><span class="nf">merge_orders</span><span class="p">(</span><span class="n">ln1</span><span class="p">,</span><span class="n">ln2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="3-解压缩字符串">3. 解压缩字符串</h2>
<p>aabb =&gt; a(2)b(2)<br />
aabbaabb =&gt; (a(2)b(2))2<br />
只出现一次的字母不压缩</p>

<ul>
  <li>
    <p>这里我下面写的程序通过率只有60%</p>
  </li>
  <li>暴力求解：创建了一个函数get_cp，返回每个前括号对应的后括号的位置（list形式）</li>
  <li>本来应该在更新字符串时同步更新上面那个list，但有点错位懒得改了，每次循环都调用一遍get_cp</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">decompress</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">compressed_str</span><span class="p">:</span><span class="nb">str</span> <span class="p">):</span>
        <span class="c1"># write code here
</span>        <span class="k">def</span> <span class="nf">get_cp</span><span class="p">(</span><span class="n">str_in</span><span class="p">):</span>
            <span class="n">cp_index</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">compressed_str</span><span class="p">)</span>
            <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">letter</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">compressed_str</span><span class="p">)</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">letter</span> <span class="o">==</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">elif</span> <span class="n">letter</span> <span class="o">==</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">cp_index</span><span class="p">[</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>
                    <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">cp_index</span>

        <span class="n">cp_index</span> <span class="o">=</span> <span class="nf">get_cp</span><span class="p">(</span><span class="n">compressed_str</span><span class="p">)</span>
        <span class="k">while</span> <span class="nf">sum</span><span class="p">(</span><span class="n">cp_index</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">cp</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cp_index</span><span class="p">)</span> <span class="p">:</span>
                <span class="k">if</span> <span class="n">cp</span><span class="p">:</span>
                    <span class="n">multi</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">compressed_str</span><span class="p">[</span><span class="n">cp</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
                    <span class="n">compressed_str</span> <span class="o">=</span> <span class="n">compressed_str</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">i</span><span class="p">]</span><span class="o">+</span> <span class="n">compressed_str</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">cp</span><span class="p">]</span> <span class="o">*</span><span class="n">multi</span> <span class="o">+</span><span class="n">compressed_str</span><span class="p">[</span><span class="n">cp</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="nf">len</span><span class="p">(</span><span class="n">compressed_str</span><span class="p">)]</span>
                    <span class="n">cp_index</span> <span class="o">=</span> <span class="nf">get_cp</span><span class="p">(</span><span class="n">compressed_str</span><span class="p">)</span>
                    <span class="k">break</span>
        <span class="k">return</span> <span class="n">compressed_str</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">decompress</span><span class="p">(</span><span class="sh">"</span><span class="s">((a)2(b)2(c)2)2</span><span class="sh">"</span><span class="p">))</span>
<span class="c1"># print(Solution().decompress("((a)2)2"))
</span>
</code></pre></div></div>

<h2 id="4-货架编号">4. 货架编号</h2>
<p>（类似N字排序，但没找到规律，所以还是用了暴力解法）</p>

<p>等边直角三角形，左上起始，逆时针螺旋排序</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 6 5
2 4
3
</code></pre></div></div>

<p>输入三角形维度，输出横向遍历排序结果</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; 3
&lt;&lt; [1,6,5,2,4,3]
</code></pre></div></div>

<ul>
  <li>
    <p>在本子上写了几圈，没找到统一的规律，决定用暴力解法，新建n维空矩阵，三个函数fill_down、fill_rightup、fill_left分别向三个方向填入数据，循环到填满左上区域为止</p>
  </li>
  <li>
    <p>这里通过率只有85%</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numberOfShelves</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">N</span> <span class="p">):</span>
        <span class="c1"># write code here
</span>        <span class="n">mt</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">N</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
        <span class="k">def</span> <span class="nf">fill_down</span><span class="p">(</span><span class="n">num</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">pos1</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">pos2</span><span class="p">:</span><span class="nb">int</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
            <span class="k">while</span> <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">==</span><span class="mi">0</span> <span class="p">:</span>
                <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                <span class="n">num</span> <span class="o">+=</span><span class="mi">1</span>
                <span class="n">pos1</span> <span class="o">+=</span><span class="mi">1</span>
                <span class="k">if</span> <span class="n">pos1</span><span class="o">&gt;=</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">)</span> <span class="ow">or</span> <span class="n">pos2</span><span class="o">&gt;=</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
                    <span class="n">pos1</span> <span class="o">-=</span><span class="mi">1</span>
                    <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
            <span class="n">pos1</span> <span class="o">-=</span><span class="mi">1</span>
            <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
        
        <span class="k">def</span> <span class="nf">fill_rightup</span><span class="p">(</span><span class="n">num</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">pos1</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">pos2</span><span class="p">:</span><span class="nb">int</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
            <span class="k">while</span> <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">==</span><span class="mi">0</span> <span class="p">:</span>
                <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                <span class="n">num</span> <span class="o">+=</span><span class="mi">1</span>
                <span class="n">pos1</span> <span class="o">-=</span><span class="mi">1</span>
                <span class="n">pos2</span> <span class="o">+=</span><span class="mi">1</span>
                <span class="k">if</span> <span class="n">pos1</span><span class="o">&gt;=</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">)</span> <span class="ow">or</span> <span class="n">pos2</span><span class="o">&gt;=</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
                    <span class="n">pos1</span> <span class="o">+=</span><span class="mi">1</span>
                    <span class="n">pos2</span> <span class="o">-=</span><span class="mi">1</span>
                    <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
            <span class="n">pos1</span> <span class="o">+=</span><span class="mi">1</span>
            <span class="n">pos2</span> <span class="o">-=</span><span class="mi">1</span>    
            <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
        
        <span class="k">def</span> <span class="nf">fill_left</span><span class="p">(</span><span class="n">num</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">pos1</span><span class="p">:</span><span class="nb">int</span><span class="p">,</span><span class="n">pos2</span><span class="p">:</span><span class="nb">int</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
            <span class="k">while</span> <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">==</span><span class="mi">0</span> <span class="p">:</span>
                <span class="n">mt</span><span class="p">[</span><span class="n">pos1</span><span class="p">][</span><span class="n">pos2</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
                <span class="n">num</span> <span class="o">+=</span><span class="mi">1</span>
                <span class="n">pos2</span> <span class="o">-=</span><span class="mi">1</span>
                <span class="k">if</span> <span class="n">pos1</span><span class="o">&gt;=</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">)</span> <span class="ow">or</span> <span class="n">pos2</span><span class="o">&gt;=</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">mt</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
                    <span class="n">pos2</span> <span class="o">+=</span><span class="mi">1</span>
                    <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
            <span class="n">pos2</span> <span class="o">+=</span><span class="mi">1</span>
            <span class="k">return</span> <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span>
        
        <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">num0</span> <span class="o">=</span> <span class="n">num</span>
            <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span> <span class="o">=</span> <span class="nf">fill_down</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">pos2</span><span class="p">)</span>
            <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span> <span class="o">=</span> <span class="nf">fill_rightup</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">pos2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span> <span class="o">=</span> <span class="nf">fill_left</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">pos1</span><span class="p">,</span><span class="n">pos2</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

            

            <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="n">num0</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">if</span> <span class="n">pos1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">pos2</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="k">break</span>

        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">mt</span><span class="p">:</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">i</span>

        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">mt</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ans</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">x</span> <span class="o">==</span><span class="mi">0</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">numberOfShelves</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>


</code></pre></div></div>

<h2 id="5-bgp树">5. BGP树</h2>
<ul>
  <li>2^N字符串由01构成</li>
  <li>字符串中全为0，节点value设为B</li>
  <li>全1为P</li>
  <li>都有为G</li>
  <li>判定完当前节点后将字符串等分两半继续判定，到字符串无法二分为止</li>
  <li>输出二叉树后序遍历结果</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"10001101"
"PBGBBBGPPPBPGGG"
</code></pre></div></div>

<ul>
  <li>这题显然是有规律可循的，题解里都没给TreeNode定义</li>
  <li>但还是写了个暴力解法</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">val</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">left</span><span class="p">:</span><span class="n">TreeNode</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">right</span><span class="p">:</span><span class="n">TreeNode</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">bpg</span><span class="p">(</span><span class="n">self</span> <span class="p">,</span> <span class="n">s</span> <span class="p">):</span>
        <span class="c1"># write code here
</span>
        <span class="k">def</span> <span class="nf">bpg_str</span><span class="p">(</span><span class="n">bpgs</span><span class="p">):</span>
            <span class="sh">'''</span><span class="s">判断BPG</span><span class="sh">'''</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">bpgs</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span>
            <span class="k">elif</span> <span class="ow">not</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">bpgs</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">"</span><span class="s">P</span><span class="sh">"</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">"</span><span class="s">G</span><span class="sh">"</span>
            
        <span class="k">def</span> <span class="nf">create_tn</span><span class="p">(</span><span class="n">tns</span><span class="p">):</span>
            <span class="sh">'''</span><span class="s">生成二叉树</span><span class="sh">'''</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">tns</span><span class="p">)</span>
            
            <span class="n">tnp</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="nf">bpg_str</span><span class="p">(</span><span class="n">tns</span><span class="p">))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">len</span><span class="p">(</span><span class="n">tns</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">tnp</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="nf">create_tn</span><span class="p">(</span><span class="n">tns</span><span class="p">[:</span><span class="nf">int</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">tns</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)])</span>
                <span class="n">tnp</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="nf">create_tn</span><span class="p">(</span><span class="n">tns</span><span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">tns</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">):])</span>
            <span class="k">return</span> <span class="n">tnp</span>
        
        <span class="k">def</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">:</span><span class="n">TreeNode</span><span class="p">):</span>
            <span class="sh">'''</span><span class="s">遍历</span><span class="sh">'''</span>
            <span class="k">if</span> <span class="n">root</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="sh">''</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="sh">''</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">.</span><span class="n">left</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span> <span class="p">.</span><span class="n">right</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="nf">traverse</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">root</span><span class="p">.</span><span class="n">val</span>
            <span class="k">return</span> <span class="n">ans</span>

        <span class="k">return</span> <span class="nf">traverse</span><span class="p">(</span><span class="nf">create_tn</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>

    

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">bpg</span><span class="p">(</span><span class="sh">"</span><span class="s">10001101</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-06-duozhuayu/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[据说这个公司每年都用这5道，所以不写公司名了]]></summary></entry><entry><title type="html">python: 开根号</title><link href="/python/sqrt/" rel="alternate" type="text/html" title="python: 开根号" /><published>2023-10-05T19:01:27+08:00</published><updated>2023-10-05T19:01:27+08:00</updated><id>/python/sqrt</id><content type="html" xml:base="/python/sqrt/"><![CDATA[<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 法1：math.sqrt
</span><span class="kn">import</span> <span class="n">math</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="c1"># 法2：pow
</span><span class="n">x</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mf">0.5</span><span class="p">)</span>

<span class="c1"># 法3：**
</span><span class="n">x</span> <span class="o">=</span> <span class="n">n</span><span class="o">**</span><span class="mf">0.5</span>

<span class="c1"># 补充：cmath.sqrt支持复数
</span><span class="kn">import</span> <span class="n">cmath</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">cmath</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="c1">#类型为complex
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/python/2023-10-05-sqrt/image_1.jpg) -->]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[```py 法1：math.sqrt import math x = math.sqrt(n)]]></summary></entry><entry><title type="html">leetcode: 完全平方数</title><link href="/leetcode/python/numSquares/" rel="alternate" type="text/html" title="leetcode: 完全平方数" /><published>2023-10-05T17:31:28+08:00</published><updated>2023-10-05T17:31:28+08:00</updated><id>/leetcode/python/numSquares</id><content type="html" xml:base="/leetcode/python/numSquares/"><![CDATA[<h2 id="题目">题目</h2>

<ul>
  <li>链接：https://leetcode.cn/problems/perfect-squares/?envType=study-plan-v2&amp;envId=dynamic-programming</li>
</ul>

<p>给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。</p>

<p>完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：n = 13
输出：2
解释：13 = 4 + 9
</code></pre></div></div>

<h2 id="题解">题解</h2>

<ul>
  <li>难点在于dp矩阵如何构建，以及如何拆分子问题</li>
  <li>设dp[i]表示最少需要多少个数的平方来表示整数i</li>
  <li>遍历[1,i]（实际上只需遍历[1,sqrt(i)]），设当前遍历到j，认为i中拆分出的平方数中包含j，那么只需找到i-j^2包含多少平方数即可，即有dp[i] = 1 + dp[i-j^2]；对于遍历的每一个j都可以得出一个解，其中的最小值即为对i的解</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">numSquares</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">minn</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="o">**</span><span class="mf">0.5</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">minn</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">minn</span><span class="p">,</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">*</span><span class="n">j</span><span class="p">])</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">minn</span> <span class="o">+</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
    
<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">numSquares</span><span class="p">(</span><span class="mi">12</span><span class="p">))</span>
</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-05-numSquares/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[题目]]></summary></entry><entry><title type="html">leetcode: 解决智力问题</title><link href="/leetcode/python/mostPoints/" rel="alternate" type="text/html" title="leetcode: 解决智力问题" /><published>2023-10-05T16:10:23+08:00</published><updated>2023-10-05T16:10:23+08:00</updated><id>/leetcode/python/mostPoints</id><content type="html" xml:base="/leetcode/python/mostPoints/"><![CDATA[<h2 id="题目">题目</h2>

<ul>
  <li>链接：https://leetcode.cn/problems/solving-questions-with-brainpower/?envType=study-plan-v2&amp;envId=dynamic-programming</li>
</ul>

<p>给你一个下标从 0 开始的二维整数数组 questions ，其中 questions[i] = [points_i, brainpower_i] 。</p>

<p>这个数组表示一场考试里的一系列题目，你需要 按顺序 （也就是从问题 0 开始依次解决），针对每个问题选择 解决 或者 跳过 操作。解决问题 i 将让你 获得  points_i 的分数，但是你将 无法 解决接下来的 brainpower_i 个问题（即只能跳过接下来的 brainpower_i 个问题）。如果你跳过问题 i ，你可以对下一个问题决定使用哪种操作。</p>

<p>比方说，给你 questions = [[3, 2], [4, 3], [4, 4], [2, 5]] ：<br />
如果问题 0 被解决了， 那么你可以获得 3 分，但你不能解决问题 1 和 2 。<br />
如果你跳过问题 0 ，且解决问题 1 ，你将获得 4 分但是不能解决问题 2 和 3 。<br />
请你返回这场考试里你能获得的 最高 分数。</p>

<h2 id="题解">题解</h2>

<ul>
  <li>dp[i]表示解决前i道问题的最高分数，边界dp[0] = 0，dp[1] = points_0</li>
  <li>类似打家劫舍问题，只不过打劫间隔不是固定的1，而是由brainpower决定</li>
  <li>类比打家劫舍可得dp[i] = max( dp[i-1], dp[i-?]+points_i )，其中dp[i-?]表示满足条件【解决问题i】最近的前一项，（注意满足条件的dp[i-?]可能不只有一项），为找出dp[i-?]可以遍历原数组，找出每一项在删除brainpower后对应的后一项，以此构建索引字典，比如下面的例子</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]]</span>
<span class="c1"># 第0，1，2，3项对应的后一项分别是第3,3,3,4项，因此可以构建字典如下
</span><span class="p">{</span>
    <span class="mi">0</span><span class="p">:[],</span>
    <span class="mi">1</span><span class="p">:[],</span>
    <span class="mi">2</span><span class="p">:[],</span>
    <span class="mi">3</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span>
    <span class="mi">4</span><span class="p">:[</span><span class="mi">3</span><span class="p">]</span> <span class="c1"># index&gt;3没有意义
</span><span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>但显然这样会提高时间复杂度，官方题解采用了另一种思路</li>
  <li>构建状态转移方程的意义在于找出相邻两项dp之间的关系，并不一定是dp[i]和dp[i-1]，也可以是dp[i]和dp[i+1]；我们可以反向思考：</li>
  <li>如果不解决第1道题目，dp[i] = dp[i+1]</li>
  <li>如果解决，下一道题目是<code class="language-plaintext highlighter-rouge">i + brainpower_i + 1</code>，也就是说此时有</li>
</ul>

<center>dp[i] = points_i + dp[i + brainpower_i + 1]</center>

<ul>
  <li>状态转移方程如下</li>
</ul>

<center>dp[i] = max( dp[i+1], points_i + dp[i + brainpower_i + 1] )</center>

<ul>
  <li>此时边界为dp[n] = 0，表示没有做任何题目，所求结果为dp[0]</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">mostPoints</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">questions</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">questions</span><span class="p">)</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>   <span class="c1"># 解决每道题及以后题目的最高分数
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">questions</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">dp</span><span class="p">[</span><span class="nf">min</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">questions</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)])</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>因为i + questions[i][1] + 1有可能超出边界，即后面没有可以解的题目，此时可以认为dp[i + brainpower_i + 1] = dp[n] = 0，所以例程中使用了min直接把0赋值给算式</li>
</ul>

<!--![引入图片](/image/leetcode/2023-10-05-mostPoints/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[题目]]></summary></entry></feed>