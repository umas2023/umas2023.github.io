<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-06-29T00:04:30+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for my new site here. It will appear in my document head meta (for Google search results) and in my feed.xml site description.</subtitle><entry><title type="html">backyard: duplicate_rm</title><link href="/backyard/duplicate_rm/" rel="alternate" type="text/html" title="backyard: duplicate_rm" /><published>2023-06-28T22:10:00+08:00</published><updated>2023-06-28T22:10:00+08:00</updated><id>/backyard/duplicate_rm</id><content type="html" xml:base="/backyard/duplicate_rm/"><![CDATA[<h2 id="about">about</h2>
<ul>
  <li>项目脚本：
    <ul>
      <li>https://github.com/umas2022/backyard_store/blob/main/duplicate_rm.py</li>
    </ul>
  </li>
  <li>由于华为云同步问题，许多图片被重复上传，目标是找出并删除这些内容完全一致的文件（文件名可能不同）</li>
</ul>

<h2 id="准备">准备</h2>

<ul>
  <li>图片遍历</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">path_in</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">所有层级文件遍历</span><span class="sh">'''</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">walk</span><span class="p">(</span><span class="n">path_in</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">fileName</span> <span class="o">==</span> <span class="sh">"</span><span class="s">.gitkeep</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">full_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">fileName</span><span class="p">))</span>
            <span class="k">yield</span> <span class="n">full_path</span>
</code></pre></div></div>

<ul>
  <li>结果保存json</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 写入结果
</span><span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">sticker</span><span class="sh">"</span><span class="p">:</span> <span class="n">duplicate_sticker_list</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">image</span><span class="sh">"</span><span class="p">:</span> <span class="n">duplicate_image_list</span>
    <span class="p">}</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">result_json</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">js_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">duplicate_list</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">js_str</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="hash过滤">hash过滤</h2>

<ul>
  <li>过滤函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hash_filter</span><span class="p">(</span><span class="n">image_paths</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">寻找相同图片(哈希)</span><span class="sh">'''</span>
    <span class="n">image_hashes</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">duplicate_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">image_path</span> <span class="ow">in</span> <span class="n">image_paths</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="n">image_hash</span> <span class="o">=</span> <span class="n">imagehash</span><span class="p">.</span><span class="nf">average_hash</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
        <span class="n">image_hashes</span><span class="p">[</span><span class="n">image_hash</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">image_hashes</span><span class="p">[</span><span class="n">image_hash</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]</span> <span class="o">+</span> <span class="n">image_hashes</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]))</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">find duplicate : </span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">image_list</span> <span class="k">for</span> <span class="n">image_list</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">.</span><span class="nf">values</span><span class="p">()]</span>

    <span class="k">return</span> <span class="n">duplicate_list</span>
</code></pre></div></div>

<ul>
  <li>加入计时函数对表情包测试效果：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 表情包查重
</span><span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
<span class="n">sticker_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">img</span> <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">sticker_path</span><span class="p">)]</span>
<span class="n">duplicate_sticker_list</span> <span class="o">=</span> <span class="nf">hash_filter</span><span class="p">(</span><span class="n">sticker_list</span><span class="p">)</span>
<span class="n">time_spent_ms</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">now</span><span class="p">))</span>
<span class="n">time_spent</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">s</span><span class="sh">"</span> <span class="k">if</span> <span class="n">time_spent_ms</span> <span class="o">&gt;</span> <span class="mi">1000</span> <span class="k">else</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">ms</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">time_spent</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>结果9.671s，共输出7组重复，人工检查输出结果发现没有哈希冲突（误判）</li>
  <li>表情包和沙雕图一起检查，用时104.542s，人工检查发现沙雕图区输出的结果有大量的冲突</li>
</ul>

<h2 id="仅判断尺寸">仅判断尺寸</h2>

<ul>
  <li>过滤函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dim_filter</span><span class="p">(</span><span class="n">image_paths</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">寻找相同图片(尺寸)</span><span class="sh">'''</span>
    <span class="n">image_dims</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">duplicate_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">image_path</span> <span class="ow">in</span> <span class="n">image_paths</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span>
        <span class="n">image_dim</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">width</span><span class="p">)</span><span class="o">+</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
        <span class="n">image_dims</span><span class="p">[</span><span class="n">image_dim</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">image_dims</span><span class="p">[</span><span class="n">image_dim</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]</span> <span class="o">+</span> <span class="n">image_dims</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]))</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">find duplicate : </span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">image_list</span> <span class="k">for</span> <span class="n">image_list</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">.</span><span class="nf">values</span><span class="p">()]</span>

    <span class="k">return</span> <span class="n">duplicate_list</span>
</code></pre></div></div>

<ul>
  <li>加入计时函数对表情包测试效果：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 表情包查重
</span><span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
<span class="n">sticker_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">img</span> <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">sticker_path</span><span class="p">)]</span>
<span class="c1"># duplicate_sticker_list = hash_filter(sticker_list)
</span><span class="n">duplicate_sticker_list</span> <span class="o">=</span> <span class="nf">dim_filter</span><span class="p">(</span><span class="n">sticker_list</span><span class="p">)</span>
<span class="n">time_spent_ms</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">now</span><span class="p">))</span>
<span class="n">time_spent</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">s</span><span class="sh">"</span> <span class="k">if</span> <span class="n">time_spent_ms</span> <span class="o">&gt;</span> <span class="mi">1000</span> <span class="k">else</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">ms</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">time_spent</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>结果0.990s，虽然很快但和预想一样，尺寸相同但内容不同的图片很多，共输出了34组结果</li>
  <li>可以作为预筛选</li>
</ul>

<h2 id="仅判断体积">仅判断体积</h2>

<ul>
  <li>过滤函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">size_filter</span><span class="p">(</span><span class="n">image_paths</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">寻找相同图片(大小)</span><span class="sh">'''</span>
    <span class="n">image_size_list</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">duplicate_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">image_path</span> <span class="ow">in</span> <span class="n">image_paths</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span>
        <span class="n">img_size</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="n">image_size_list</span><span class="p">[</span><span class="n">img_size</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">image_size_list</span><span class="p">[</span><span class="n">img_size</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">img_size</span><span class="p">]</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">duplicate_dict</span><span class="p">[</span><span class="n">img_size</span><span class="p">]</span> <span class="o">+</span> <span class="n">image_size_list</span><span class="p">[</span><span class="n">img_size</span><span class="p">]))</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">find duplicate : </span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">img_size</span><span class="p">]:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">image_list</span> <span class="k">for</span> <span class="n">image_list</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">.</span><span class="nf">values</span><span class="p">()]</span>

    <span class="k">return</span> <span class="n">duplicate_list</span>
</code></pre></div></div>

<ul>
  <li>加入计时函数对表情包测试效果：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 表情包查重
</span><span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
<span class="n">sticker_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">img</span> <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">sticker_path</span><span class="p">)]</span>
<span class="c1"># duplicate_sticker_list = hash_filter(sticker_list)
# duplicate_sticker_list = dim_filter(sticker_list)
</span><span class="n">duplicate_sticker_list</span> <span class="o">=</span> <span class="nf">size_filter</span><span class="p">(</span><span class="n">sticker_list</span><span class="p">)</span>
<span class="n">time_spent_ms</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">now</span><span class="p">))</span>
<span class="n">time_spent</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">s</span><span class="sh">"</span> <span class="k">if</span> <span class="n">time_spent_ms</span> <span class="o">&gt;</span> <span class="mi">1000</span> <span class="k">else</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">ms</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">time_spent</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">duplicate_sticker_list</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>结果0.480s，意料之外的是仅输出了5组结果</li>
  <li>和hash结果对比发现确实存在体积不同但内容和分辨率相同的图片，检查发现体积较小的图片的水平和垂直分辨率都是1dpi，这类重复可能不是由华为云的错误同步导致的。（可能是qq群收的图片被压缩？尚待验证）</li>
</ul>

<h2 id="整合">整合</h2>

<ul>
  <li>由于体积判断存在漏判，所以暂不选用</li>
  <li>用尺寸判断作为哈希判断的预筛选，代码如下</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 表情包查重
</span><span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
<span class="n">sticker_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">img</span> <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">sticker_path</span><span class="p">)]</span>
<span class="n">duplicate_list_dim</span> <span class="o">=</span> <span class="nf">dim_filter</span><span class="p">(</span><span class="n">sticker_list</span><span class="p">)</span>
<span class="n">duplicate_list_hash</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">list_dim</span> <span class="ow">in</span> <span class="n">duplicate_list_dim</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">hash_filter</span><span class="p">(</span><span class="n">list_dim</span><span class="p">)</span> <span class="o">==</span> <span class="p">[]:</span>
        <span class="n">duplicate_list_hash</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">hash_filter</span><span class="p">(</span><span class="n">list_dim</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span> 
<span class="n">duplicate_sticker_list</span> <span class="o">=</span> <span class="n">duplicate_list_hash</span>
<span class="n">time_spent_ms</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">now</span><span class="p">))</span>
<span class="n">time_spent</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">s</span><span class="sh">"</span> <span class="k">if</span> <span class="n">time_spent_ms</span> <span class="o">&gt;</span> <span class="mi">1000</span> <span class="k">else</span> <span class="nf">str</span><span class="p">(</span><span class="n">time_spent_ms</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">ms</span><span class="sh">"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">time_spent</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">duplicate_sticker_list</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>用时2.047s，结果和单hash一致输出了7组，没有误判</li>
  <li>加入沙雕图一起筛选，用时23.988s，沙雕图输出了21组结果，检查发现推特@meetissai的截图全都被判断为相同了</li>
  <li>
    <p>把hash过滤中的均值哈希average_hash()改为感知哈希phash()，沙雕图输出18组结果，检查没有发现错误</p>
  </li>
  <li>PIL库中支持的其他hash函数
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>均值哈希（Average Hash）：average_hash()
感知哈希（Perceptual Hash）：phash()
差异哈希（Difference Hash）：dhash()
块哈希（Block Hash）：block_mean_hash()
渐变哈希（Gradient Hash）：gradient_hash()
</code></pre></div>    </div>
  </li>
  <li>区别
    <ul>
      <li>
        <p>均值哈希（Average Hash）：将图像缩小为固定大小，计算图像的平均灰度值，并将每个像素与平均值进行比较，生成二进制哈希值。适用于图像整体相似度的比较。</p>
      </li>
      <li>
        <p>感知哈希（Perceptual Hash）：基于离散余弦变换（DCT）来提取图像的频率特征。通过计算图像的DCT变换系数，并根据变换系数的高低生成二进制哈希值。适用于在不同尺度和旋转下仍具有相似感知的图像比较。</p>
      </li>
      <li>
        <p>差异哈希（Difference Hash）：计算图像相邻像素之间的差异，并根据差异生成二进制哈希值。适用于检测图像的微小变化或图像剪裁的比较。</p>
      </li>
      <li>
        <p>块哈希（Block Hash）：将图像划分为多个块，计算每个块的平均灰度值，并将每个块的灰度与整体平均灰度进行比较，生成二进制哈希值。适用于在局部区域内比较图像相似度。</p>
      </li>
      <li>
        <p>渐变哈希（Gradient Hash）：基于图像梯度的方向和强度来生成哈希值。通过计算图像的梯度信息，并根据梯度的方向和强度生成二进制哈希值。适用于检测图像的边缘和纹理的比较。</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="完整代码">完整代码</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
图片去重
对比图片哈希, 只能找出像素完全相同的图片
</span><span class="sh">'''</span>

<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="n">imagehash</span>  <span class="c1"># pip install imagehash
</span><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">skimage.metrics</span>
<span class="kn">import</span> <span class="n">skimage.measure</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="kn">import</span> <span class="n">sys</span>
<span class="n">script_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">realpath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>
<span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">script_path</span><span class="p">)</span>


<span class="c1"># auto_rm = False
</span><span class="n">result_json</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">script_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">output/duplicate.json</span><span class="sh">"</span><span class="p">))</span>
<span class="n">sticker_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">script_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">storage/sticker</span><span class="sh">"</span><span class="p">))</span>
<span class="n">image_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">script_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">storage/image</span><span class="sh">"</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">path_in</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">所有层级文件遍历</span><span class="sh">'''</span>
    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">walk</span><span class="p">(</span><span class="n">path_in</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">fileName</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">fileName</span> <span class="o">==</span> <span class="sh">"</span><span class="s">.gitkeep</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">full_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">normpath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">fileName</span><span class="p">))</span>
            <span class="k">yield</span> <span class="n">full_path</span>


<span class="k">def</span> <span class="nf">hash_filter</span><span class="p">(</span><span class="n">image_paths</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">寻找相同图片(哈希)</span><span class="sh">'''</span>
    <span class="n">image_hashes</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">duplicate_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">image_path</span> <span class="ow">in</span> <span class="n">image_paths</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="c1"># image_hash = imagehash.average_hash(image)
</span>        <span class="n">image_hash</span> <span class="o">=</span> <span class="n">imagehash</span><span class="p">.</span><span class="nf">phash</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
        <span class="n">image_hashes</span><span class="p">[</span><span class="n">image_hash</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">image_hashes</span><span class="p">[</span><span class="n">image_hash</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]</span> <span class="o">+</span> <span class="n">image_hashes</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]))</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">find duplicate : (hash)</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_hash</span><span class="p">]:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">image_list</span> <span class="k">for</span> <span class="n">image_list</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">.</span><span class="nf">values</span><span class="p">()]</span>

    <span class="k">return</span> <span class="n">duplicate_list</span>


<span class="k">def</span> <span class="nf">dim_filter</span><span class="p">(</span><span class="n">image_paths</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">寻找相同图片(尺寸)</span><span class="sh">'''</span>
    <span class="n">image_dims</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">duplicate_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">image_path</span> <span class="ow">in</span> <span class="n">image_paths</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span>
        <span class="n">image_dim</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">width</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
        <span class="n">image_dims</span><span class="p">[</span><span class="n">image_dim</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">image_dims</span><span class="p">[</span><span class="n">image_dim</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]</span> <span class="o">+</span> <span class="n">image_dims</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]))</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">find duplicate (dimension): </span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">image_dim</span><span class="p">]:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">image_list</span> <span class="k">for</span> <span class="n">image_list</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">.</span><span class="nf">values</span><span class="p">()]</span>

    <span class="k">return</span> <span class="n">duplicate_list</span>


<span class="k">def</span> <span class="nf">size_filter</span><span class="p">(</span><span class="n">image_paths</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">寻找相同图片(大小)</span><span class="sh">'''</span>
    <span class="sh">'''</span><span class="s">实际测试发现了一些分辨率和尺寸都相同但大小不同的图片，因此不采用这个方法</span><span class="sh">'''</span>
    <span class="n">image_size_list</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">duplicate_dict</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">image_path</span> <span class="ow">in</span> <span class="n">image_paths</span><span class="p">:</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span>
        <span class="n">img_size</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        <span class="n">image_size_list</span><span class="p">[</span><span class="n">img_size</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">image_size_list</span><span class="p">[</span><span class="n">img_size</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">img_size</span><span class="p">]</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">duplicate_dict</span><span class="p">[</span><span class="n">img_size</span><span class="p">]</span> <span class="o">+</span> <span class="n">image_size_list</span><span class="p">[</span><span class="n">img_size</span><span class="p">]))</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">find duplicate (size): </span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">[</span><span class="n">img_size</span><span class="p">]:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">image_list</span> <span class="k">for</span> <span class="n">image_list</span> <span class="ow">in</span> <span class="n">duplicate_dict</span><span class="p">.</span><span class="nf">values</span><span class="p">()]</span>

    <span class="k">return</span> <span class="n">duplicate_list</span>


<span class="c1"># 表情包查重
</span><span class="n">sticker_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">img</span> <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">sticker_path</span><span class="p">)]</span>
<span class="n">duplicate_list_dim</span> <span class="o">=</span> <span class="nf">dim_filter</span><span class="p">(</span><span class="n">sticker_list</span><span class="p">)</span>
<span class="n">duplicate_list_hash</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">list_dim</span> <span class="ow">in</span> <span class="n">duplicate_list_dim</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">hash_filter</span><span class="p">(</span><span class="n">list_dim</span><span class="p">)</span> <span class="o">==</span> <span class="p">[]:</span>
        <span class="n">duplicate_list_hash</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">hash_filter</span><span class="p">(</span><span class="n">list_dim</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">duplicate_sticker_list</span> <span class="o">=</span> <span class="n">duplicate_list_hash</span>


<span class="c1"># 图片查重
</span><span class="n">image_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">img</span> <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="nf">get_file</span><span class="p">(</span><span class="n">image_path</span><span class="p">)]</span>
<span class="n">duplicate_list_dim</span> <span class="o">=</span> <span class="nf">dim_filter</span><span class="p">(</span><span class="n">image_list</span><span class="p">)</span>
<span class="n">duplicate_list_hash</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">list_dim</span> <span class="ow">in</span> <span class="n">duplicate_list_dim</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">hash_filter</span><span class="p">(</span><span class="n">list_dim</span><span class="p">)</span> <span class="o">==</span> <span class="p">[]:</span>
        <span class="n">duplicate_list_hash</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">hash_filter</span><span class="p">(</span><span class="n">list_dim</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">duplicate_image_list</span> <span class="o">=</span> <span class="n">duplicate_list_hash</span>


<span class="c1"># 写入结果
</span><span class="n">duplicate_list</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">sticker</span><span class="sh">"</span><span class="p">:</span> <span class="n">duplicate_sticker_list</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">image</span><span class="sh">"</span><span class="p">:</span> <span class="n">duplicate_image_list</span>
<span class="p">}</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">result_json</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">js_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">duplicate_list</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">js_str</span><span class="p">)</span>


<span class="n">del_list</span> <span class="o">=</span> <span class="n">duplicate_sticker_list</span> <span class="o">+</span> <span class="n">duplicate_image_list</span>

<span class="n">wait_here</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="se">\n\n</span><span class="s">Find Find %d sets of duplicate images.</span><span class="se">\n\
</span><span class="s">Press Enter to delete duplicate images. Press Ctrl+C to exit.</span><span class="se">\n\
</span><span class="s">It is recommended to check </span><span class="sh">'</span><span class="s">./output/duplicate.json</span><span class="sh">'</span><span class="s"> before deleting ...</span><span class="sh">"</span> <span class="o">%</span><span class="nf">len</span><span class="p">(</span><span class="n">del_list</span><span class="p">))</span>



<span class="k">for</span> <span class="n">dp_list</span> <span class="ow">in</span> <span class="n">del_list</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">image</span> <span class="ow">in</span> <span class="n">dp_list</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">delete: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="n">image</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="backyard" /><summary type="html"><![CDATA[about 项目脚本： https://github.com/umas2022/backyard_store/blob/main/duplicate_rm.py 由于华为云同步问题，许多图片被重复上传，目标是找出并删除这些内容完全一致的文件（文件名可能不同）]]></summary></entry><entry><title type="html">backyard: hello_world</title><link href="/backyard/hello_world/" rel="alternate" type="text/html" title="backyard: hello_world" /><published>2023-06-28T22:00:00+08:00</published><updated>2023-06-28T22:00:00+08:00</updated><id>/backyard/hello_world</id><content type="html" xml:base="/backyard/hello_world/"><![CDATA[<ul>
  <li>目前托管在github.io
    <ul>
      <li>https://umas2022.github.io/</li>
    </ul>
  </li>
  <li>项目分两部分
    <ul>
      <li>页面：https://github.com/umas2022/umas2022.github.io</li>
      <li>图床：https://github.com/umas2022/backyard_store</li>
    </ul>
  </li>
  <li>早期的开发记录已经找不到了</li>
</ul>]]></content><author><name></name></author><category term="backyard" /><summary type="html"><![CDATA[目前托管在github.io https://umas2022.github.io/]]></summary></entry><entry><title type="html">vue: watch</title><link href="/vue/watch/" rel="alternate" type="text/html" title="vue: watch" /><published>2023-06-28T14:23:00+08:00</published><updated>2023-06-28T14:23:00+08:00</updated><id>/vue/watch</id><content type="html" xml:base="/vue/watch/"><![CDATA[<ul>
  <li>深度监听，监听对象的属性
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>watch(
  getFlagCloud,
  () =&gt; {
  setSkeletonFlag();
  },
  { deep: true }
);
</code></pre></div>    </div>
  </li>
  <li>
    <p>如果监听对象是props.data，会报错：A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types. 
  ○ 使用箭头函数：</p>

    <p>watch(()=&gt;props.data, () =&gt; {
      console.log(props.data)
  }, { deep: true });</p>
  </li>
</ul>]]></content><author><name></name></author><category term="vue" /><summary type="html"><![CDATA[深度监听，监听对象的属性 watch( getFlagCloud, () =&gt; { setSkeletonFlag(); }, { deep: true } );]]></summary></entry><entry><title type="html">windows: wsa</title><link href="/windows/wsa/" rel="alternate" type="text/html" title="windows: wsa" /><published>2023-06-28T14:15:00+08:00</published><updated>2023-06-28T14:15:00+08:00</updated><id>/windows/wsa</id><content type="html" xml:base="/windows/wsa/"><![CDATA[<h2 id="使用adb传输文件">使用adb传输文件</h2>
<ul>
  <li>功能已经用python集成在了电脑配件项目，但电脑退回win10，所以没有继续更新了</li>
  <li>下载adb
    <ul>
      <li>忘了当时哪里下的了</li>
    </ul>
  </li>
  <li>adb放到这里了：
    <ul>
      <li>D:\p-tools\platform-tools\adb.exe</li>
    </ul>
  </li>
  <li>adb命令参考：
    <ul>
      <li>https://adbshell.com/commands/adb-push</li>
    </ul>
  </li>
  <li>首先adb连接
    <ul>
      <li>D:\p-tools\platform-tools\adb.exe connect 127.0.0.1:58526</li>
    </ul>
  </li>
  <li>push
    <ul>
      <li>目标可以是文件或文件夹</li>
      <li>前后目标要一致
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$target = "D:/s-linux/project/test_file/test_in"
D:\p-tools\platform-tools\adb.exe -s 127.0.0.1:58526 push $target /sdcard/Download/test_in
</code></pre></div>        </div>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:\p-tools\platform-tools\adb.exe -s 127.0.0.1:58526 push D:/s-linux/project/test_file/test_in /sdcard/Download/test_in
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>pull
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:\p-tools\platform-tools\adb.exe -s 127.0.0.1:58526 pull /sdcard/Download/Tachiyomi D:\s-workspace\Tachiyomi
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="新建文件夹">新建文件夹</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:\p-tools\platform-tools\adb.exe connect 127.0.0.1:58526
D:\p-tools\platform-tools\adb.exe -s 127.0.0.1:58526 shell mkdir /sdcard/Download/test
</code></pre></div></div>

<p>mkdir -p 参数，根据需要自动创建父文件夹</p>

<ul>
  <li>这个命令比较恶心,路径中出现括号会报错，比如  “test(1)”  不合法</li>
  <li>如果没有空格，用反斜杠转义括号是可以的，比如  “test(1)”  合法
-但是有空格的话还是会报错，比如  “test  (1)”  不合法，加引号也没有用</li>
</ul>]]></content><author><name></name></author><category term="windows" /><summary type="html"><![CDATA[使用adb传输文件 功能已经用python集成在了电脑配件项目，但电脑退回win10，所以没有继续更新了 下载adb 忘了当时哪里下的了]]></summary></entry><entry><title type="html">jekyll: search</title><link href="/jekyll/search/" rel="alternate" type="text/html" title="jekyll: search" /><published>2023-06-28T12:30:00+08:00</published><updated>2023-06-28T12:30:00+08:00</updated><id>/jekyll/search</id><content type="html" xml:base="/jekyll/search/"><![CDATA[<h2 id="参考">参考</h2>
<ul>
  <li>https://blog.webjeda.com/instant-jekyll-search/</li>
  <li>https://github.com/christian-fei/Simple-Jekyll-Search</li>
</ul>

<h2 id="实现">实现</h2>

<ul>
  <li>根目录创建search.json</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: none
---
[
  {% for post in site.posts %}
    {
      "title"    : "{{ post.title | escape }}",
      "category" : "{{ post.category }}",
      "tags"     : "{{ post.tags | join: ', ' }}",
      "url"      : "{{ site.baseurl }}{{ post.url }}",
      "date"     : "{{ post.date }}"
    } {% unless forloop.last %},{% endunless %}
  {% endfor %}
]
</code></pre></div></div>

<ul>
  <li>创建/js/search-script.js</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/*!
  * Simple-Jekyll-Search
  * Copyright 2015-2020, Christian Fei
  * Licensed under the MIT License.
  */
!function () { "use strict"; var f = { compile: function (r) { return i.template.replace(i.pattern, function (t, e) { var n = i.middleware(e, r[e], i.template); return void 0 !== n ? n : r[e] || t }) }, setOptions: function (t) { i.pattern = t.pattern || i.pattern, i.template = t.template || i.template, "function" == typeof t.middleware &amp;&amp; (i.middleware = t.middleware) } }; const i = { pattern: /\{(.*?)\}/g, template: "", middleware: function () { } }; var n = function (t, e) { var n = e.length, r = t.length; if (n &lt; r) return !1; if (r === n) return t === e; t: for (var i = 0, o = 0; i &lt; r; i++) { for (var u = t.charCodeAt(i); o &lt; n;)if (e.charCodeAt(o++) === u) continue t; return !1 } return !0 }, e = new function () { this.matches = function (t, e) { return n(e.toLowerCase(), t.toLowerCase()) } }, r = new function () { this.matches = function (e, t) { return !!e &amp;&amp; (e = e.trim().toLowerCase(), (t = t.trim().toLowerCase()).split(" ").filter(function (t) { return 0 &lt;= e.indexOf(t) }).length === t.split(" ").length) } }, d = { put: function (t) { if (l(t)) return a(t); if (function (t) { return Boolean(t) &amp;&amp; "[object Array]" === Object.prototype.toString.call(t) }(t)) return function (n) { const r = []; s(); for (let t = 0, e = n.length; t &lt; e; t++)l(n[t]) &amp;&amp; r.push(a(n[t])); return r }(t); return undefined }, clear: s, search: function (t) { return t ? function (e, n, r, i) { const o = []; for (let t = 0; t &lt; e.length &amp;&amp; o.length &lt; i.limit; t++) { var u = function (t, e, n, r) { for (const i in t) if (!function (n, r) { for (let t = 0, e = r.length; t &lt; e; t++) { var i = r[t]; if (new RegExp(i).test(n)) return !0 } return !1 }(t[i], r.exclude) &amp;&amp; n.matches(t[i], e)) return t }(e[t], n, r, i); u &amp;&amp; o.push(u) } return o }(u, t, c.searchStrategy, c).sort(c.sort) : [] }, setOptions: function (t) { c = t || {}, c.fuzzy = t.fuzzy || !1, c.limit = t.limit || 10, c.searchStrategy = t.fuzzy ? e : r, c.sort = t.sort || o, c.exclude = t.exclude || [] } }; function o() { return 0 } const u = []; let c = {}; function s() { return u.length = 0, u } function l(t) { return Boolean(t) &amp;&amp; "[object Object]" === Object.prototype.toString.call(t) } function a(t) { return u.push(t), u } c.fuzzy = !1, c.limit = 10, c.searchStrategy = c.fuzzy ? e : r, c.sort = o, c.exclude = []; var p = { load: function (t, e) { const n = window.XMLHttpRequest ? new window.XMLHttpRequest : new ActiveXObject("Microsoft.XMLHTTP"); n.open("GET", t, !0), n.onreadystatechange = h(n, e), n.send() } }; function h(e, n) { return function () { if (4 === e.readyState &amp;&amp; 200 === e.status) try { n(null, JSON.parse(e.responseText)) } catch (t) { n(t, null) } } } var m = function y(t) { if (!(e = t) || !("undefined" != typeof e.required &amp;&amp; e.required instanceof Array)) throw new Error("-- OptionsValidator: required options missing"); var e; if (!(this instanceof y)) return new y(t); const r = t.required; this.getRequiredOptions = function () { return r }, this.validate = function (e) { const n = []; return r.forEach(function (t) { "undefined" == typeof e[t] &amp;&amp; n.push(t) }), n } }, w = { merge: function (t, e) { const n = {}; for (const r in t) n[r] = t[r], "undefined" != typeof e[r] &amp;&amp; (n[r] = e[r]); return n }, isJSON: function (t) { try { return t instanceof Object &amp;&amp; JSON.parse(JSON.stringify(t)) ? !0 : !1 } catch (e) { return !1 } } }; !function (t) { let i = { searchInput: null, resultsContainer: null, json: [], success: Function.prototype, searchResultTemplate: '&lt;li&gt;&lt;a href="{url}" title="{desc}"&gt;{title}&lt;/a&gt;&lt;/li&gt;', templateMiddleware: Function.prototype, sortMiddleware: function () { return 0 }, noResultsText: "No results found", limit: 10, fuzzy: !1, debounceTime: null, exclude: [] }, n; const e = function (t, e) { e ? (clearTimeout(n), n = setTimeout(t, e)) : t.call() }; var r = ["searchInput", "resultsContainer", "json"]; const o = m({ required: r }); function u(t) { d.put(t), i.searchInput.addEventListener("input", function (t) { -1 === [13, 16, 20, 37, 38, 39, 40, 91].indexOf(t.which) &amp;&amp; (c(), e(function () { l(t.target.value) }, i.debounceTime)) }) } function c() { i.resultsContainer.innerHTML = "" } function s(t) { i.resultsContainer.innerHTML += t } function l(t) { var e; (e = t) &amp;&amp; 0 &lt; e.length &amp;&amp; (c(), function (e, n) { var r = e.length; if (0 === r) return s(i.noResultsText); for (let t = 0; t &lt; r; t++)e[t].query = n, s(f.compile(e[t])) }(d.search(t), t)) } function a(t) { throw new Error("SimpleJekyllSearch --- " + t) } t.SimpleJekyllSearch = function (t) { var n; 0 &lt; o.validate(t).length &amp;&amp; a("You must specify the following required options: " + r), i = w.merge(i, t), f.setOptions({ template: i.searchResultTemplate, middleware: i.templateMiddleware }), d.setOptions({ fuzzy: i.fuzzy, limit: i.limit, sort: i.sortMiddleware, exclude: i.exclude }), w.isJSON(i.json) ? u(i.json) : (n = i.json, p.load(n, function (t, e) { t &amp;&amp; a("failed to get JSON (" + n + ")"), u(e) })); t = { search: l }; return "function" == typeof i.success &amp;&amp; i.success.call(t), t } }(window) }();
</code></pre></div></div>

<ul>
  <li>根目录创建search.html</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: page
permalink: /search/
title: Search
---

<span class="c">&lt;!-- Html Elements for Search --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"search-container"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"search-input"</span> <span class="na">placeholder=</span><span class="s">"search..."</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">"results-container"</span><span class="nt">&gt;&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="c">&lt;!-- Script pointing to search-script.js --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/js/search-script.js"</span> <span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="c">&lt;!-- Configuration --&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="nc">SimpleJekyllSearch</span><span class="p">({</span>
        <span class="na">searchInput</span><span class="p">:</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">search-input</span><span class="dl">'</span><span class="p">),</span>
        <span class="na">resultsContainer</span><span class="p">:</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">results-container</span><span class="dl">'</span><span class="p">),</span>
        <span class="na">json</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/search.json</span><span class="dl">'</span>
    <span class="p">})</span>
<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;style </span><span class="na">scoped</span><span class="nt">&gt;</span>
    <span class="nt">input</span><span class="p">{</span>
        <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
        <span class="nl">font-size</span><span class="p">:</span> <span class="m">18px</span><span class="p">;</span>
        <span class="nl">height</span><span class="p">:</span> <span class="m">30px</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<ul>
  <li>也可以不创建js，直接cdn引入</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- or without installing anything --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://unpkg.com/simple-jekyll-search@latest/dest/simple-jekyll-search.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[参考 https://blog.webjeda.com/instant-jekyll-search/ https://github.com/christian-fei/Simple-Jekyll-Search]]></summary></entry><entry><title type="html">pctools: video_compress</title><link href="/zip_pctools/windows/video_compress/" rel="alternate" type="text/html" title="pctools: video_compress" /><published>2023-06-28T10:32:00+08:00</published><updated>2023-06-28T10:32:00+08:00</updated><id>/zip_pctools/windows/video_compress</id><content type="html" xml:base="/zip_pctools/windows/video_compress/"><![CDATA[<h3 id="使用moviepy">使用moviepy</h3>
<ul>
  <li>官方：https://zulko.github.io/moviepy/</li>
  <li>写入函数：write_videofile
    <ul>
      <li>https://zulko.github.io/moviepy/ref/VideoClip/VideoClip.html?highlight=write_videofile#moviepy.video.compositing.CompositeVideoClip.CompositeVideoClip.write_videofile</li>
    </ul>
  </li>
  <li>测试可用，总比特率设定2k kbps时3分钟视频仅40MB（原片4.8w kbps，60fps，大小1G），但质量较差</li>
  <li>
    <p>总比特率1w kbps，结果203MB
降至20fps，结果204MB，明显感觉帧数不够，帧数居然不影响视频大小</p>
  </li>
  <li>安装ffmpg: https://www.gyan.dev/ffmpeg/builds/</li>
  <li>将bin目录添加到环境变量</li>
  <li>验证安装，控制台输入：ffmpeg.exe -version</li>
</ul>]]></content><author><name></name></author><category term="zip_pctools" /><category term="windows" /><summary type="html"><![CDATA[使用moviepy 官方：https://zulko.github.io/moviepy/ 写入函数：write_videofile https://zulko.github.io/moviepy/ref/VideoClip/VideoClip.html?highlight=write_videofile#moviepy.video.compositing.CompositeVideoClip.CompositeVideoClip.write_videofile 测试可用，总比特率设定2k kbps时3分钟视频仅40MB（原片4.8w kbps，60fps，大小1G），但质量较差 总比特率1w kbps，结果203MB 降至20fps，结果204MB，明显感觉帧数不够，帧数居然不影响视频大小]]></summary></entry><entry><title type="html">pctools: hello_world</title><link href="/zip_pctools/windows/hello_world/" rel="alternate" type="text/html" title="pctools: hello_world" /><published>2023-06-28T10:30:00+08:00</published><updated>2023-06-28T10:30:00+08:00</updated><id>/zip_pctools/windows/hello_world</id><content type="html" xml:base="/zip_pctools/windows/hello_world/"><![CDATA[<h1 id="因为时间久远已经无据可考了">因为时间久远已经无据可考了</h1>

<ul>
  <li>项目给一些常用的python批处理程序做了electron+vue构建的前端，通过django后端调用</li>
</ul>]]></content><author><name></name></author><category term="zip_pctools" /><category term="windows" /><summary type="html"><![CDATA[因为时间久远已经无据可考了]]></summary></entry><entry><title type="html">crawler: bookwalker</title><link href="/crawler/bookwalker/" rel="alternate" type="text/html" title="crawler: bookwalker" /><published>2023-06-28T10:20:00+08:00</published><updated>2023-06-28T10:20:00+08:00</updated><id>/crawler/bookwalker</id><content type="html" xml:base="/crawler/bookwalker/"><![CDATA[<ul>
  <li>已经集成在电脑配件项目中
    <ul>
      <li>https://github.com/umas2022/pctools</li>
    </ul>
  </li>
  <li>因为没能解析<code class="language-plaintext highlighter-rouge">&lt;canvas&gt;</code>标签,没能拿到图片的地址,所以改用屏幕截图的方法保存图片</li>
  <li>登录次数过多会触发网站的真人验证,所以登录的步骤改为手动,代码仅执行截图</li>
  <li>代码如下</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
create: 2023.1.1
bookwalker漫画爬虫

思路:
    1. 手动启动chrome打开debug端口,转交selenium
    2. 代码截图,点击进入下一页,根据viewport0的显示状态判断点击是否成功
    3. 图片锐化(+信息删除)和截图双线程同步进行(jpg节省空间)
    4. 截图保存后检查文件大小,小于设定值的截图被判断为loading页,重新截图
问题:
    1.截图清晰度受屏幕分辨率影响,质量较低;网页截图比平板截屏质量差
    2.对div.loading状态的判断不完全可靠,检查图片大小的方法也可能存在误判
    3.保存截图会花费约0.5s,使用多线程并行运行时报错
    4.ActionChains的点击动作会花费约0.5s,需要优化

chrome.exe --remote-debugging-port=9222 --user-data-dir=</span><span class="sh">"</span><span class="s">D:</span><span class="se">\\</span><span class="s">p-data</span><span class="se">\\</span><span class="s">chrome_temp</span><span class="sh">"</span><span class="s">

https://bookwalker.jp/bookshelf1/

</span><span class="sh">'''</span>


<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">utils_logger.log</span> <span class="kn">import</span> <span class="n">logger_re</span> <span class="k">as</span> <span class="n">logger</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">copy</span>
<span class="c1"># 删除图片信息
</span><span class="kn">import</span> <span class="n">piexif</span>  <span class="c1"># pip install piexif
# 图片锐化
</span><span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageEnhance</span>
<span class="c1"># 爬虫主程序
</span><span class="kn">from</span> <span class="n">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>  <span class="c1"># pip install selenium
# 查找元素
</span><span class="kn">from</span> <span class="n">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="c1"># 添加反爬参数
</span><span class="kn">from</span> <span class="n">selenium.webdriver</span> <span class="kn">import</span> <span class="n">ChromeOptions</span>
<span class="c1"># 鼠标动作
</span><span class="kn">from</span> <span class="n">selenium.webdriver.common.action_chains</span> <span class="kn">import</span> <span class="n">ActionChains</span>


<span class="k">class</span> <span class="nc">CrawlerBookwalker</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">json_set</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">'''</span><span class="s">只有一个total_page是必须参数,其他都有预设值</span><span class="sh">'''</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 截图总页数(设为1截取单页)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">total_page</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">total_page</span><span class="sh">"</span><span class="p">])</span>
            <span class="c1"># 起始页码(截图保存命名用)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">current_page</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">current_page</span><span class="sh">"</span><span class="p">])</span> <span class="k">if</span> <span class="sh">"</span><span class="s">current_page</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="mi">1</span>
            <span class="c1"># 图片保存位置(路径下不要有其他图片)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">save_path</span> <span class="o">=</span> <span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">save_path</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="sh">"</span><span class="s">save_path</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="sa">r</span><span class="sh">"</span><span class="s">D:\s-workspace\crawler_save</span><span class="sh">"</span>
            <span class="c1"># 图片锐化系数(1为原图,实测2效果还行)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">sharp_factor</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">sharp_factor</span><span class="sh">"</span><span class="p">])</span> <span class="k">if</span> <span class="sh">"</span><span class="s">sharp_factor</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="mi">2</span>
            <span class="c1"># debug模式chrome数据位置(用于chrome的脚本启动)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">chrome_path</span> <span class="o">=</span> <span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">chrome_path</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="sh">"</span><span class="s">chrome_path</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="sa">r</span><span class="sh">"</span><span class="s">D:\\p-data\\chrome_temp</span><span class="sh">"</span>
            <span class="c1"># chrome端口,一般不会被占用(用于chrome的脚本启动)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">chrome_port</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">chrome_port</span><span class="sh">"</span><span class="p">])</span> <span class="k">if</span> <span class="sh">"</span><span class="s">chrome_port</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="mi">9222</span>
            <span class="c1"># chrome driver位置(注意要和chrome版本一致)
</span>            <span class="c1"># https://chromedriver.chromium.org/downloads
</span>            <span class="n">self</span><span class="p">.</span><span class="n">driver_path</span> <span class="o">=</span> <span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">driver_path</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="sh">"</span><span class="s">driver_path</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="sa">r</span><span class="sh">"</span><span class="s">D:\p-tools\chromedriver\chromedriver108.exe</span><span class="sh">"</span>
            <span class="c1"># 重新截图大小(KB)(不同截图环境loading页大小不相同)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">reshot_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">reshot_size</span><span class="sh">"</span><span class="p">])</span> <span class="k">if</span> <span class="sh">"</span><span class="s">reshot_size</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="mi">200</span>
            <span class="c1"># 截图/点击,重试次数上限
</span>            <span class="n">self</span><span class="p">.</span><span class="n">retry_times</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">retry_times</span><span class="sh">"</span><span class="p">])</span> <span class="k">if</span> <span class="sh">"</span><span class="s">retry_times</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="mi">8</span>
            <span class="c1"># y轴翻页点击位置(单位:像素,顶部为0)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">click_point_y</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">click_point_y</span><span class="sh">"</span><span class="p">])</span> <span class="k">if</span> <span class="sh">"</span><span class="s">click_point_y</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="mi">300</span>
            <span class="c1"># x轴翻页点击位置(单位:像素,左边为0)
</span>            <span class="n">self</span><span class="p">.</span><span class="n">click_point_x</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">json_set</span><span class="p">[</span><span class="sh">"</span><span class="s">click_point_x</span><span class="sh">"</span><span class="p">])</span> <span class="k">if</span> <span class="sh">"</span><span class="s">click_point_x</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">json_set</span> <span class="k">else</span> <span class="mi">100</span>

        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sh">"</span><span class="s">key error: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="n">e</span><span class="p">)</span>
            <span class="k">return</span>

    <span class="k">def</span> <span class="nf">__init_chrome</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">实例化浏览器</span><span class="sh">'''</span>
        <span class="n">option</span> <span class="o">=</span> <span class="nc">ChromeOptions</span><span class="p">()</span>
        <span class="n">option</span><span class="p">.</span><span class="nf">add_experimental_option</span><span class="p">(</span><span class="sh">'</span><span class="s">debuggerAddress</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">127.0.0.1:%d</span><span class="sh">'</span> <span class="o">%</span> <span class="n">self</span><span class="p">.</span><span class="n">chrome_port</span><span class="p">)</span>
        <span class="c1"># 实例化谷歌
</span>        <span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="nc">Chrome</span><span class="p">(</span><span class="n">executable_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">driver_path</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="n">option</span><span class="p">)</span>
        <span class="c1"># 窗口尺寸不能超过显示尺寸,只能考虑找一台高分辨率显示器或者多屏拼接
</span>        <span class="c1"># driver.set_window_size(1080,1920)
</span>        <span class="k">return</span> <span class="n">driver</span>

    <span class="k">def</span> <span class="nf">__sharpen_main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shot_path</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">子线程:图片锐化+删除信息主函数</span><span class="sh">'''</span>
        <span class="n">shot_path_list</span> <span class="o">=</span> <span class="n">shot_path</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">shot_path</span><span class="p">)</span>
        <span class="n">enhancer</span> <span class="o">=</span> <span class="n">ImageEnhance</span><span class="p">.</span><span class="nc">Sharpness</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
        <span class="n">im_s</span> <span class="o">=</span> <span class="n">enhancer</span><span class="p">.</span><span class="nf">enhance</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sharp_factor</span><span class="p">)</span>
        <span class="n">shot_path_list</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">shot_path_list</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">shot</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sharp</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">sharp_path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">shot_path_list</span><span class="p">)</span>
        <span class="c1"># jpg节省点空间
</span>        <span class="n">im_s</span> <span class="o">=</span> <span class="n">im_s</span><span class="p">.</span><span class="nf">convert</span><span class="p">(</span><span class="sh">'</span><span class="s">RGB</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">sharp_path</span> <span class="o">=</span> <span class="n">sharp_path</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">.png</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.jpg</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">im_s</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">sharp_path</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">shot_path</span><span class="p">)</span>
        <span class="c1"># 删除信息(其实正常截图本来就不含信息)
</span>        <span class="n">piexif</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">sharp_path</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">open_chrome</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">启动debug模式chrome</span><span class="sh">'''</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">'</span><span class="s">chrome.exe --remote-debugging-port=%d --user-data-dir=</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"'</span> <span class="o">%</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">chrome_port</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">chrome_path</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">开始处理</span><span class="sh">'''</span>
        <span class="c1"># 实例化浏览器
</span>        <span class="n">driver</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">__init_chrome</span><span class="p">()</span>

        <span class="sh">'''</span><span class="s">进入漫画页并逐页截屏</span><span class="sh">'''</span>
        <span class="n">time_start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 当前激活标签页为0
</span>        <span class="n">driver</span><span class="p">.</span><span class="n">switch_to</span><span class="p">.</span><span class="nf">window</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">window_handles</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">viewport_before</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">div[id=</span><span class="sh">"</span><span class="s">viewport0</span><span class="sh">"'</span><span class="p">).</span><span class="nf">is_displayed</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">total_page</span><span class="p">):</span>
            <span class="n">num</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">current_page</span>
            <span class="c1"># 等待loading状态结束(对loading的判断并不完全可靠,建议翻页后的wait_time&gt;0.5s)
</span>            <span class="n">div_loading</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">div[class=</span><span class="sh">"</span><span class="s">loading</span><span class="sh">"'</span><span class="p">)</span>
            <span class="k">while</span> <span class="n">div_loading</span><span class="p">.</span><span class="nf">is_displayed</span><span class="p">():</span>
                <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">loading ...</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="c1"># 浏览器全屏截图(截图动作占用约0.5s,并行报错暂未解决)
</span>            <span class="n">time_cost</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">time_start</span><span class="p">)</span>
            <span class="n">time_left</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">time_cost</span> <span class="o">/</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">total_page</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
            <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">shot : %d / %d , page : %d, remaining : %d s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">total_page</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">time_left</span><span class="p">))</span>
            <span class="n">shot_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">save_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">shot_%d.png</span><span class="sh">"</span> <span class="o">%</span> <span class="n">num</span><span class="p">)</span>
            <span class="n">driver</span><span class="p">.</span><span class="nf">save_screenshot</span><span class="p">(</span><span class="n">shot_path</span><span class="p">)</span>
            <span class="c1"># 检查截图大小,小于设定值为loading页,重新截图
</span>            <span class="n">shot_retry</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">shot_retry</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">shot_size</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getsize</span><span class="p">(</span><span class="n">shot_path</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1024</span>
                <span class="k">if</span> <span class="n">shot_size</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">reshot_size</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">if</span> <span class="n">shot_retry</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_times</span><span class="p">:</span>
                    <span class="n">logger</span><span class="p">.</span><span class="nf">warning</span><span class="p">(</span><span class="sh">"</span><span class="s">shot %d times retry! file: %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">retry_times</span><span class="p">,</span> <span class="n">shot_path</span><span class="p">))</span>
                    <span class="k">break</span>
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">shot retry %d ...</span><span class="sh">"</span> <span class="o">%</span> <span class="n">shot_retry</span><span class="p">)</span>
                <span class="n">driver</span><span class="p">.</span><span class="nf">save_screenshot</span><span class="p">(</span><span class="n">shot_path</span><span class="p">)</span>
            <span class="c1"># 锐化程序并行进行
</span>            <span class="n">th</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">__sharpen_main</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="n">shot_path</span><span class="p">],</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">th</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
            <span class="c1"># 点击进入下一页(即使设置了duration,这个动作仍然会占用约0.5s的时间)
</span>            <span class="n">click_retry</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">click_retry</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="nc">ActionChains</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span> <span class="n">duration</span><span class="o">=</span><span class="mi">10</span><span class="p">).</span><span class="nf">move_by_offset</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">click_point_x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">click_point_y</span><span class="p">).</span><span class="nf">click</span><span class="p">().</span><span class="nf">move_by_offset</span><span class="p">(</span><span class="mi">0</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">click_point_x</span><span class="p">,</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">click_point_y</span><span class="p">).</span><span class="nf">perform</span><span class="p">()</span>
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
                <span class="n">viewport_now</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">div[id=</span><span class="sh">"</span><span class="s">viewport0</span><span class="sh">"'</span><span class="p">).</span><span class="nf">is_displayed</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">viewport_now</span> <span class="o">!=</span> <span class="n">viewport_before</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                    <span class="n">viewport_now</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">div[id=</span><span class="sh">"</span><span class="s">viewport0</span><span class="sh">"'</span><span class="p">).</span><span class="nf">is_displayed</span><span class="p">()</span>
                    <span class="k">if</span> <span class="n">viewport_now</span> <span class="o">!=</span> <span class="n">viewport_before</span><span class="p">:</span>
                        <span class="k">break</span>
                    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">click retry %d ...</span><span class="sh">"</span> <span class="o">%</span> <span class="n">click_retry</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">click_retry</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_times</span><span class="p">:</span>
                        <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sh">"</span><span class="s">click %d times retry!</span><span class="sh">"</span> <span class="o">%</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_times</span><span class="p">)</span>
                        <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

            <span class="n">viewport_before</span> <span class="o">=</span> <span class="n">viewport_now</span>
            <span class="c1"># wait_here = input("go &gt;&gt;")
</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">shot-function finish</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">driver</span><span class="p">.</span><span class="nf">quit</span><span class="p">()</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="crawler" /><summary type="html"><![CDATA[已经集成在电脑配件项目中 https://github.com/umas2022/pctools]]></summary></entry><entry><title type="html">crawler: selenium</title><link href="/crawler/selenium/" rel="alternate" type="text/html" title="crawler: selenium" /><published>2023-06-28T10:18:00+08:00</published><updated>2023-06-28T10:18:00+08:00</updated><id>/crawler/selenium</id><content type="html" xml:base="/crawler/selenium/"><![CDATA[<h3 id="安装chromedriver">安装chromedriver</h3>
<ul>
  <li>https://chromedriver.chromium.org/downloads
    <ul>
      <li>注意版本要和已安装的chrome一样</li>
    </ul>
  </li>
  <li>实测添加环境变量不好用，使用手动引入：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chrome_driver = r"C:\Program Files\Google\Chrome\Application\chromedriver.exe"
chrome = webdriver.Chrome(executable_path=chrome_driver)
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="操作网页">操作网页</h3>

<ul>
  <li>一个输入用户名和密码的例子
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">input[name=</span><span class="sh">"</span><span class="s">j_username</span><span class="sh">"'</span><span class="p">).</span><span class="nf">send_keys</span><span class="p">(</span><span class="sh">"</span><span class="s">1970313791@qq.com</span><span class="sh">"</span><span class="p">)</span>
<span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">input[name=</span><span class="sh">"</span><span class="s">password</span><span class="sh">"'</span><span class="p">).</span><span class="nf">send_keys</span><span class="p">(</span><span class="sh">"</span><span class="s">xxxxxxxxxxx</span><span class="sh">"</span><span class="p">)</span>
<span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">button[class=</span><span class="sh">"</span><span class="s">g-recaptcha c-btn--forward</span><span class="sh">"'</span><span class="p">).</span><span class="nf">click</span><span class="p">()</span>
</code></pre></div>    </div>
  </li>
  <li>常用的功能键</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from selenium.webdriver.common.keys import Keys

send_keys(Keys.BACK_SPACE) 删除键（BackSpace）
send_keys(Keys.SPACE) 空格键(Space)
send_keys(Keys.TAB) 制表键(Tab)
send_keys(Keys.ESCAPE) 回退键（Esc）
send_keys(Keys.ENTER) 回车键（Enter）
send_keys(Keys.CONTROL,‘a’) 全选（Ctrl+A）
send_keys(Keys.CONTROL,‘c’) 复制（Ctrl+C）
send_keys(Keys.CONTROL,‘x’) 剪切（Ctrl+X）
send_keys(Keys.CONTROL,‘v’) 粘贴（Ctrl+V）
send_keys(Keys.F1) 键盘 F1
……
send_keys(Keys.F12) 键盘 F12

Keys.BACK_SPACE：回退键（BackSpace）
Keys.TAB：制表键（Tab）
Keys.ENTER：回车键（Enter）
Keys.SHIFT：大小写转换键（Shift）
Keys.CONTROL：Control键（Ctrl）
Keys.ALT：ALT键（Alt）
Keys.ESCAPE：返回键（Esc）
Keys.SPACE：空格键（Space）
Keys.PAGE_UP：翻页键上（Page Up）
Keys.PAGE_DOWN：翻页键下（Page Down）
Keys.END：行尾键（End）
Keys.HOME：行首键（Home）
Keys.LEFT：方向键左（Left）
Keys.UP：方向键上（Up）
Keys.RIGHT：方向键右（Right）
Keys.DOWN：方向键下（Down）
Keys.INSERT：插入键（Insert）
DELETE：删除键（Delete）
NUMPAD0 ~ NUMPAD9：数字键1-9
F1 ~ F12：F1 - F12键
(Keys.CONTROL, ‘a’)：组合键Control+a，全选
(Keys.CONTROL, ‘c’)：组合键Control+c，复制
(Keys.CONTROL, ‘x’)：组合键Control+x，剪切
(Keys.CONTROL, ‘v’)：组合键Control+v，粘贴
</code></pre></div></div>

<h3 id="切换标签页">切换标签页</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new_tap</span> <span class="o">=</span> <span class="sh">"</span><span class="s">window.open(</span><span class="sh">'</span><span class="s">%s</span><span class="sh">'</span><span class="s">)</span><span class="sh">"</span> <span class="o">%</span> <span class="n">url_home</span>
<span class="n">driver</span><span class="p">.</span><span class="nf">execute_script</span><span class="p">(</span><span class="n">new_tap</span><span class="p">)</span>
<span class="n">driver</span><span class="p">.</span><span class="n">switch_to</span><span class="p">.</span><span class="nf">window</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">window_handles</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>

<h3 id="反扒1windownavigatorwebdriver">反扒1：window.navigator.webdriver</h3>

<ul>
  <li>window.navigator.webdriver参数在使用selenium时为true，需要消除这个参数</li>
  <li>可以直接在console里敲这个参数查看</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">selenium.webdriver</span> <span class="kn">import</span> <span class="n">ChromeOptions</span>

<span class="sh">'''</span><span class="s">反爬：消除window.navigator.webdriver</span><span class="sh">'''</span>
<span class="n">option</span> <span class="o">=</span> <span class="nc">ChromeOptions</span><span class="p">()</span>
<span class="c1"># 开启实验性功能
</span><span class="n">option</span><span class="p">.</span><span class="nf">add_experimental_option</span><span class="p">(</span><span class="sh">'</span><span class="s">excludeSwitches</span><span class="sh">'</span><span class="p">,[</span><span class="sh">'</span><span class="s">enable-automation</span><span class="sh">'</span><span class="p">])</span>
<span class="c1"># 去除特征值
</span><span class="n">option</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--disable-blink-features=AutomationControlled</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># 实例化谷歌
</span><span class="n">chrome_driver</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">"</span><span class="s">D:\p-tools\chromedriver\chromedriver106.exe</span><span class="sh">"</span>
<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="nc">Chrome</span><span class="p">(</span><span class="n">executable_path</span><span class="o">=</span><span class="n">chrome_driver</span><span class="p">,</span><span class="n">options</span><span class="o">=</span><span class="n">option</span><span class="p">)</span>
</code></pre></div></div>

<p>实测对bookwalker有效</p>

<h3 id="反扒2接管已有浏览器">反扒2：接管已有浏览器</h3>

<ul>
  <li>
    <p>这个效果非常好，属于物理外挂</p>
  </li>
  <li>命令行启动浏览器：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chrome.exe --remote-debugging-port=9222 --user-data-dir="D:\p-data\chrome_temp"
</code></pre></div>    </div>
  </li>
  <li>代码示例：
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">selenium.webdriver</span> <span class="kn">import</span> <span class="n">ChromeOptions</span>
<span class="c1"># 反爬：接管已打开的浏览器
</span><span class="n">option</span> <span class="o">=</span> <span class="nc">ChromeOptions</span><span class="p">()</span>
<span class="n">option</span><span class="p">.</span><span class="nf">add_experimental_option</span><span class="p">(</span><span class="sh">'</span><span class="s">debuggerAddress</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">127.0.0.1:9222</span><span class="sh">'</span><span class="p">)</span>
<span class="c1"># 实例化谷歌
</span><span class="n">chrome_driver</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">"</span><span class="s">D:\p-tools\chromedriver\chromedriver106.exe</span><span class="sh">"</span>
<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="nc">Chrome</span><span class="p">(</span><span class="n">executable_path</span><span class="o">=</span><span class="n">chrome_driver</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="n">option</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="截屏">截屏</h3>

<ul>
  <li>截全屏
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">driver</span><span class="p">.</span><span class="nf">save_screenshot</span><span class="p">(</span><span class="sh">"</span><span class="s">shot_screen.png</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>截元素
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="nf">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="sh">'</span><span class="s">div[class=</span><span class="sh">"</span><span class="s">currentScreen</span><span class="sh">"'</span><span class="p">)</span>
<span class="n">img</span><span class="p">.</span><span class="nf">screenshot</span><span class="p">(</span><span class="sh">"</span><span class="s">shot_img.png</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name></name></author><category term="crawler" /><summary type="html"><![CDATA[安装chromedriver https://chromedriver.chromium.org/downloads 注意版本要和已安装的chrome一样 实测添加环境变量不好用，使用手动引入： chrome_driver = r"C:\Program Files\Google\Chrome\Application\chromedriver.exe" chrome = webdriver.Chrome(executable_path=chrome_driver)]]></summary></entry><entry><title type="html">crawler: request</title><link href="/crawler/request/" rel="alternate" type="text/html" title="crawler: request" /><published>2023-06-28T10:17:00+08:00</published><updated>2023-06-28T10:17:00+08:00</updated><id>/crawler/request</id><content type="html" xml:base="/crawler/request/"><![CDATA[<ul>
  <li>request基本例子</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://bookwalker.jp/de57a21d74-d918-47df-b22f-b3a9454e59df/</span><span class="sh">"</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">)</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">access failed, error code : %d</span><span class="sh">"</span> <span class="o">%</span> <span class="n">res</span><span class="p">.</span><span class="n">status_code</span><span class="p">)</span>
    <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">./save.html</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">save_file</span><span class="p">:</span>
    <span class="n">save_file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="crawler" /><summary type="html"><![CDATA[request基本例子]]></summary></entry></feed>