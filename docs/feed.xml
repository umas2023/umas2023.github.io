<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-07-14T17:18:14+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for my new site here. It will appear in my document head meta (for Google search results) and in my feed.xml site description.</subtitle><entry><title type="html">leetcode: 2.两数相加</title><link href="/leetcode/leetcode_2/" rel="alternate" type="text/html" title="leetcode: 2.两数相加" /><published>2023-07-14T14:56:52+08:00</published><updated>2023-07-14T14:56:52+08:00</updated><id>/leetcode/leetcode_2</id><content type="html" xml:base="/leetcode/leetcode_2/"><![CDATA[<h2 id="自解1">自解1</h2>

<ul>
  <li>
    <p>没有用过链表，思路是先把链表转换为普通列表，再转化为数字，计算完之后再转换回去</p>
  </li>
  <li>
    <p>补充：链表</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>
</code></pre></div></div>

<ul>
  <li>首先定义四个函数</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">list2node</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
    <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">list_in</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">list_in</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">item</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="n">node</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">node</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">node2list</span><span class="p">(</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))))</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">list2node</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
    <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">list_in</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">list_in</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">item</span><span class="p">,</span><span class="nb">next</span><span class="o">=</span><span class="n">node</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">node</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">list2node</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]).</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span><span class="nb">list</span><span class="p">)</span><span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">index</span><span class="p">,</span><span class="n">num</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">list_in</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">num</span><span class="o">*</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="n">index</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">list2number</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">]))</span>
<span class="c1"># 5321
</span></code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">number2list</span><span class="p">(</span><span class="n">number</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">list</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="nf">str</span><span class="p">(</span><span class="n">number</span><span class="p">)]</span>
</code></pre></div></div>

<ul>
  <li>击败5%的代码</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span>


<span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">l2</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>

        <span class="k">def</span> <span class="nf">node2list</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ListNode</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">]</span>
            <span class="k">while</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
                <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nb">next</span>
                <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">res</span>

        <span class="k">def</span> <span class="nf">list2node</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ListNode</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">list_in</span><span class="p">):</span>
                <span class="n">node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="n">item</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="n">node</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">node</span>

        <span class="k">def</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">list_in</span><span class="p">:</span> <span class="nb">list</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">list_in</span><span class="p">):</span>
                <span class="n">res</span> <span class="o">+=</span> <span class="n">num</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="n">index</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">res</span>

        <span class="k">def</span> <span class="nf">number2list</span><span class="p">(</span><span class="n">number</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="nf">str</span><span class="p">(</span><span class="n">number</span><span class="p">)]</span>

        <span class="c1"># 链表转为列表
</span>        <span class="n">l1_list</span> <span class="o">=</span> <span class="nf">node2list</span><span class="p">(</span><span class="n">l1</span><span class="p">)</span>
        <span class="n">l2_list</span> <span class="o">=</span> <span class="nf">node2list</span><span class="p">(</span><span class="n">l2</span><span class="p">)</span>

        <span class="c1"># 倒序列表拼接为一个数字
</span>        <span class="n">l1_number</span> <span class="o">=</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">l1_list</span><span class="p">)</span>
        <span class="n">l2_number</span> <span class="o">=</span> <span class="nf">list2number</span><span class="p">(</span><span class="n">l2_list</span><span class="p">)</span>

        <span class="c1"># 计算并输出结果
</span>        <span class="n">res_number</span> <span class="o">=</span> <span class="n">l1_number</span> <span class="o">+</span> <span class="n">l2_number</span>
        <span class="n">res_list</span> <span class="o">=</span> <span class="nf">number2list</span><span class="p">(</span><span class="n">res_number</span><span class="p">)</span>
        <span class="nf">return</span><span class="p">(</span><span class="nf">list2node</span><span class="p">(</span><span class="n">res_list</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>


<span class="n">l1</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>
<span class="n">l2</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>

<span class="n">ans</span> <span class="o">=</span> <span class="nc">Solution</span><span class="p">().</span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span><span class="o">=</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="o">=</span><span class="n">l2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="答案">答案</h2>
<ul>
  <li>妈的看完题解之后感觉刚才的自己脑子简直秀逗</li>
  <li>因为py并没有链表和指针，所以并不容易定义结果的类型，可以把结果存放在l1或l2中，如果计算中发现l1长度小于l2，可以交换l1和l2</li>
  <li>递归函数！</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span>


<span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>


<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="c1"># l1 和 l2 为当前遍历的节点，carry 为进位
</span>    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">l2</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">],</span> <span class="n">carry</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ListNode</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">l1</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">l2</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># 递归边界：l1 和 l2 都是空节点
</span>            <span class="k">return</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">carry</span><span class="p">)</span> <span class="k">if</span> <span class="n">carry</span> <span class="k">else</span> <span class="bp">None</span>  <span class="c1"># 如果进位了，就额外创建一个节点
</span>        <span class="k">if</span> <span class="n">l1</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># 如果 l1 是空的，那么此时 l2 一定不是空节点
</span>            <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l1</span>  <span class="c1"># 交换 l1 与 l2，保证 l1 非空，从而简化代码
</span>        <span class="n">carry</span> <span class="o">+=</span> <span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">+</span> <span class="p">(</span><span class="n">l2</span><span class="p">.</span><span class="n">val</span> <span class="k">if</span> <span class="n">l2</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># 节点值和进位加在一起
</span>        <span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">carry</span> <span class="o">%</span> <span class="mi">10</span>  <span class="c1"># 每个节点保存一个数位
</span>        <span class="n">l1</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span> <span class="k">if</span> <span class="n">l2</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span> <span class="n">carry</span> <span class="o">//</span> <span class="mi">10</span><span class="p">)</span>  <span class="c1"># 进位
</span>        <span class="k">return</span> <span class="n">l1</span>


<span class="n">l1</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>
<span class="n">l2</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="nc">ListNode</span><span class="p">(</span><span class="n">val</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">)))</span>

<span class="n">ans</span> <span class="o">=</span> <span class="nc">Solution</span><span class="p">().</span><span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span><span class="o">=</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="o">=</span><span class="n">l2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>



</code></pre></div></div>]]></content><author><name></name></author><category term="leetcode" /><summary type="html"><![CDATA[自解1]]></summary></entry><entry><title type="html">leetcode: 1.两数之和</title><link href="/leetcode/leetcode_1/" rel="alternate" type="text/html" title="leetcode: 1.两数之和" /><published>2023-07-14T14:16:17+08:00</published><updated>2023-07-14T14:16:17+08:00</updated><id>/leetcode/leetcode_1</id><content type="html" xml:base="/leetcode/leetcode_1/"><![CDATA[<h2 id="自解">自解</h2>

<ul>
  <li>除了两层循环之外根本想不到其他解法</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">index_1</span><span class="p">,</span> <span class="n">number_1</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">index_2</span><span class="p">,</span> <span class="n">number_2</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">index_1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]):</span>
                <span class="k">if</span> <span class="n">number_1</span> <span class="o">+</span> <span class="n">number_2</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                    <span class="k">return</span> <span class="p">[</span><span class="n">index_1</span><span class="p">,</span> <span class="n">index_1</span> <span class="o">+</span> <span class="n">index_2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">twoSum</span><span class="p">(</span><span class="n">nums</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">target</span><span class="o">=</span><span class="mi">9</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="答案">答案</h2>

<ul>
  <li>我的天哈希表居然这么简单就实现了，我是傻逼</li>
  <li>在第二遍循环里寻找 number_2 = target - number_1，而不是 number_2 + number_1 = target，后者很难想到hash</li>
  <li>利用字典中键不能重复的特点创建hash表</li>
  <li>修改一下自己的代码：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>

<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">hash_table</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">index_1</span><span class="p">,</span> <span class="n">number_1</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">target</span> <span class="o">-</span> <span class="n">number_1</span> <span class="ow">in</span> <span class="n">hash_table</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">hash_table</span><span class="p">[</span><span class="n">target</span> <span class="o">-</span> <span class="n">number_1</span><span class="p">],</span><span class="n">index_1</span><span class="p">]</span>
            <span class="n">hash_table</span><span class="p">[</span><span class="n">number_1</span><span class="p">]</span> <span class="o">=</span> <span class="n">index_1</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">twoSum</span><span class="p">(</span><span class="n">nums</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="n">target</span><span class="o">=</span><span class="mi">9</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="leetcode" /><summary type="html"><![CDATA[自解]]></summary></entry><entry><title type="html">linux: samba局域网文件共享</title><link href="/linux/samba/" rel="alternate" type="text/html" title="linux: samba局域网文件共享" /><published>2023-07-13T14:35:51+08:00</published><updated>2023-07-13T14:35:51+08:00</updated><id>/linux/samba</id><content type="html" xml:base="/linux/samba/"><![CDATA[<ul>
  <li>下载配置</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>samba
<span class="nb">sudo </span>vim /etc/samba/smb.conf
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>share]
path <span class="o">=</span> /media/xf
valid <span class="nb">users</span> <span class="o">=</span> xf
writable <span class="o">=</span> <span class="nb">yes</span>
</code></pre></div></div>

<ul>
  <li>
    <p>↑share为samba显示的文件名，可以添加多个</p>
  </li>
  <li>
    <p>启动</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>smbpasswd <span class="nt">-a</span> umas
<span class="nb">sudo </span>service smbd restart
</code></pre></div></div>

<ul>
  <li>偶尔不能自动挂载</li>
  <li>手动挂载 sudo mount /dev/sda1 /media/xf/manuell-1T</li>
  <li>查看硬盘 sudo fdisk -l</li>
</ul>

<!-- ![引入图片](/image/linux/2023-07-13-samba/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[下载配置]]></summary></entry><entry><title type="html">linux: apt改国内源</title><link href="/linux/apt_source/" rel="alternate" type="text/html" title="linux: apt改国内源" /><published>2023-07-13T14:33:32+08:00</published><updated>2023-07-13T14:33:32+08:00</updated><id>/linux/apt_source</id><content type="html" xml:base="/linux/apt_source/"><![CDATA[<ul>
  <li>这里可以找到源：
    <ul>
      <li>阿里源：https://developer.aliyun.com/mirror/</li>
      <li>清华源：https://mirrors.tuna.tsinghua.edu.cn/</li>
      <li>华科源：http://mirrors.ustc.edu.cn/</li>
      <li>网易源：http://mirrors.163.com/</li>
    </ul>
  </li>
  <li>查看linux版本</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /etc/issue
<span class="c"># 返回</span>
Debian GNU/Linux 11 <span class="se">\n</span> <span class="se">\l</span>
</code></pre></div></div>

<ul>
  <li>debian换国内源，修改/etc/apt/sources.list文件</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s@http://deb.debian.org@https://mirrors.163.com@g"</span> /etc/apt/sources.list
</code></pre></div></div>

<ul>
  <li>
    <p>补充ubuntu改源</p>
  </li>
  <li>
    <p>备份原文件</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak
vim /etc/apt/sources.list
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
</code></pre></div></div>

<ul>
  <li>更新软件列表</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
</code></pre></div></div>

<!-- ![引入图片](/image/linux/2023-07-13-apt_source/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[这里可以找到源： 阿里源：https://developer.aliyun.com/mirror/ 清华源：https://mirrors.tuna.tsinghua.edu.cn/ 华科源：http://mirrors.ustc.edu.cn/ 网易源：http://mirrors.163.com/]]></summary></entry><entry><title type="html">python: python指向python3</title><link href="/python/python_python3/" rel="alternate" type="text/html" title="python: python指向python3" /><published>2023-07-13T14:31:35+08:00</published><updated>2023-07-13T14:31:35+08:00</updated><id>/python/python_python3</id><content type="html" xml:base="/python/python_python3/"><![CDATA[<ul>
  <li>
    <p>在.bashrc中<code class="language-plaintext highlighter-rouge">alias python=python3</code>可以解决一部分问题</p>
  </li>
  <li>
    <p>根源上解决</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> /usr/bin/python /usr/bin/python.bak
 
<span class="nb">sudo ln</span> <span class="nt">-s</span> /usr/bin/python3 /usr/bin/python
<span class="nb">sudo ln</span> <span class="nt">-s</span> /usr/bin/pip3 /usr/bin/pip
</code></pre></div></div>

<ul>
  <li>也可以试试这个</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>python-is-python3
</code></pre></div></div>

<!-- ![引入图片](/image/python/2023-07-13-python_python3/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[在.bashrc中alias python=python3可以解决一部分问题]]></summary></entry><entry><title type="html">linux: tmux终端窗口拆分</title><link href="/linux/tmux/" rel="alternate" type="text/html" title="linux: tmux终端窗口拆分" /><published>2023-07-13T14:22:05+08:00</published><updated>2023-07-13T14:22:05+08:00</updated><id>/linux/tmux</id><content type="html" xml:base="/linux/tmux/"><![CDATA[<ul>
  <li>多窗口工具：tmux
    <ul>
      <li>参考 https://zhuanlan.zhihu.com/p/102546608</li>
    </ul>
  </li>
  <li>会话session
<img src="/image/linux/2023-07-13-tmux/image_1.jpg" alt="引入图片" />
    <ul>
      <li>新建默认session
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux</code></li>
        </ul>
      </li>
      <li>新建命名session
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux new -s  &lt;session-name&gt; </code></li>
        </ul>
      </li>
      <li>离开session
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux detach</code></li>
        </ul>
      </li>
      <li>查看session列表
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux ls</code></li>
        </ul>
      </li>
      <li>进入session
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux attach -t  &lt;session-name&gt;</code></li>
        </ul>
      </li>
      <li>关闭session
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux kill-session -t &lt;session-name&gt;</code></li>
          <li>ctrl+d</li>
        </ul>
      </li>
      <li>切换session
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux switch -t &lt;session-name&gt;</code></li>
        </ul>
      </li>
      <li>重命名session
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux rename-session -t &lt;old-session-name&gt; &lt;new-session-name&gt;</code></li>
          <li><code class="language-plaintext highlighter-rouge">ctrl+b   $</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>窗格<br />
  <img src="/image/linux/2023-07-13-tmux/image_2.jpg" alt="引入图片" />
    <ul>
      <li>切割窗格
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux split-window </code></li>
          <li>左右切割：<code class="language-plaintext highlighter-rouge">ctrl + b %</code></li>
          <li>上下切割：<code class="language-plaintext highlighter-rouge">ctrl + b “</code></li>
        </ul>
      </li>
      <li>光标移动
        <ul>
          <li>移到上面：<code class="language-plaintext highlighter-rouge">tmux select-pane  -U</code></li>
          <li>移到下面：<code class="language-plaintext highlighter-rouge">tmux select-pane -D</code></li>
          <li>移到左边：<code class="language-plaintext highlighter-rouge">tmux select-pane -L</code></li>
          <li>移到右边：<code class="language-plaintext highlighter-rouge">tmux select-pane -R</code></li>
          <li>方向键移动：<code class="language-plaintext highlighter-rouge">ctrl+b ↑/↓/←/→</code></li>
        </ul>
      </li>
      <li>移动窗格
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux swap-pane -U / -D</code></li>
        </ul>
      </li>
      <li>关闭窗格
        <ul>
          <li><code class="language-plaintext highlighter-rouge">ctrl+b x</code></li>
        </ul>
      </li>
      <li>放大窗格
        <ul>
          <li><code class="language-plaintext highlighter-rouge">ctrl+b z</code></li>
          <li>重复<code class="language-plaintext highlighter-rouge">ctrl+b z</code> 还原</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>窗口window
    <ul>
      <li>新建窗口
        <ul>
          <li><code class="language-plaintext highlighter-rouge">ctrl+b c</code></li>
          <li><code class="language-plaintext highlighter-rouge">tmux new-window -n &lt;window-name&gt;</code></li>
        </ul>
      </li>
      <li>切换窗口
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux select-window -t &lt;window-name&gt;</code></li>
          <li><code class="language-plaintext highlighter-rouge">ctrl + b w</code> 显示窗口列表用方向键进入</li>
          <li><code class="language-plaintext highlighter-rouge">ctrl+b n/p</code> 快速切换到上一个/下一个窗口</li>
        </ul>
      </li>
      <li>重命名窗口
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux rename-window &lt;new-window-name&gt;</code></li>
          <li><code class="language-plaintext highlighter-rouge">ctrl+b ,</code></li>
        </ul>
      </li>
      <li>关闭窗口
        <ul>
          <li><code class="language-plaintext highlighter-rouge">tmux kill-window -t &lt;window-name&gt;</code></li>
          <li><code class="language-plaintext highlighter-rouge">ctrl + b &amp;</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>快捷键的修改
    <ul>
      <li><code class="language-plaintext highlighter-rouge">~/.tmux.conf</code></li>
    </ul>
  </li>
  <li>其他命令行命令：ctrl+b+
    <ul>
      <li><code class="language-plaintext highlighter-rouge">t</code>：锁屏</li>
    </ul>
  </li>
</ul>

<!-- ![引入图片](/image/linux/2023-07-13-tmux/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[多窗口工具：tmux 参考 https://zhuanlan.zhihu.com/p/102546608]]></summary></entry><entry><title type="html">js: async,await异步修饰符</title><link href="/js/async_await/" rel="alternate" type="text/html" title="js: async,await异步修饰符" /><published>2023-07-13T14:18:18+08:00</published><updated>2023-07-13T14:18:18+08:00</updated><id>/js/async_await</id><content type="html" xml:base="/js/async_await/"><![CDATA[<ul>
  <li>await 关键字只能放在 async 函数内部，await关键字的作用是获取Promise中返回的内容，获取的是Promise函数中resolve或者reject的值</li>
  <li>如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。</li>
  <li>如果await后面不是一个Promise的返回值，则会按照同步程序返回值处理,为undefined</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">bbb</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">}</span>
    
<span class="k">async</span> <span class="kd">function</span> <span class="nf">funAsy</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">await</span> <span class="mi">1</span>
    <span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nf">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
            <span class="nf">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">time</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">},</span> <span class="mi">3000</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="kd">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">bbb</span><span class="p">()</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
<span class="p">}</span>
    
<span class="nf">funAsy</span><span class="p">()</span>

<span class="c1">//  运行结果是 3秒钟之后 ，输出 1， time , string,</span>
<span class="c1">//  程序在b = await处停顿了</span>
</code></pre></div></div>

<!-- ![引入图片](/image/js/2023-07-13-async_await/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="js" /><summary type="html"><![CDATA[await 关键字只能放在 async 函数内部，await关键字的作用是获取Promise中返回的内容，获取的是Promise函数中resolve或者reject的值 如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。 如果await后面不是一个Promise的返回值，则会按照同步程序返回值处理,为undefined]]></summary></entry><entry><title type="html">js: Promise</title><link href="/js/promise/" rel="alternate" type="text/html" title="js: Promise" /><published>2023-07-13T14:15:19+08:00</published><updated>2023-07-13T14:15:19+08:00</updated><id>/js/promise</id><content type="html" xml:base="/js/promise/"><![CDATA[<ul>
  <li>封装异步操作，避免回调地狱</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">state</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">res</span><span class="p">(</span><span class="dl">"</span><span class="s2">result</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nf">rej</span><span class="p">(</span><span class="dl">"</span><span class="s2">reject</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>


<span class="nx">p</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">promise val:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="p">(</span><span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">promise err:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">rej</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">);</span>

</code></pre></div></div>

<!-- ![引入图片](/image/js/2023-07-13-promise/image_1.jpg) -->]]></content><author><name></name></author><category term="js" /><summary type="html"><![CDATA[封装异步操作，避免回调地狱]]></summary></entry><entry><title type="html">python: vscode中import黄色波浪线报警</title><link href="/python/windows/import_warning/" rel="alternate" type="text/html" title="python: vscode中import黄色波浪线报警" /><published>2023-07-13T14:12:11+08:00</published><updated>2023-07-13T14:12:11+08:00</updated><id>/python/windows/import_warning</id><content type="html" xml:base="/python/windows/import_warning/"><![CDATA[<p><img src="/image/python/2023-07-13-import_warning/image_1.png" alt="引入图片" /></p>

<ul>
  <li>
    <p>但是脚本能正常运行</p>
  </li>
  <li>
    <p>左下角打开设置，搜索：</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python analysis extra paths
</code></pre></div></div>

<p><img src="/image/python/2023-07-13-import_warning/image_2.png" alt="引入图片" /></p>

<ul>
  <li>用pip show查找目标的path:<code class="language-plaintext highlighter-rouge">c:\python310\lib\site-packages</code>添加进去</li>
</ul>]]></content><author><name></name></author><category term="python" /><category term="windows" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">python: 开启web服务器</title><link href="/python/local_server/" rel="alternate" type="text/html" title="python: 开启web服务器" /><published>2023-07-13T14:08:13+08:00</published><updated>2023-07-13T14:08:13+08:00</updated><id>/python/local_server</id><content type="html" xml:base="/python/local_server/"><![CDATA[<ul>
  <li>假如vue项目已经打包好了dist文件夹，可以用这个命令来启动一个web服务器</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python.exe <span class="nt">-m</span> http.server 8000
python.exe <span class="nt">-m</span> http.server 8000 <span class="nt">--directory</span> D:<span class="se">\s</span><span class="nt">-linux</span><span class="se">\p</span>roject<span class="se">\l</span>ocalviewer<span class="se">\h</span>tmlviewer<span class="se">\d</span>ata
</code></pre></div></div>

<!-- ![引入图片](/image/python/2023-07-13-local_server/image_1.jpg) -->

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[假如vue项目已经打包好了dist文件夹，可以用这个命令来启动一个web服务器]]></summary></entry></feed>