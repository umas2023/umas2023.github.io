<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-06-27T20:56:26+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>Here an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">jekyll: toc</title><link href="/jekyll/toc/" rel="alternate" type="text/html" title="jekyll: toc" /><published>2023-06-27T14:00:00+08:00</published><updated>2023-06-27T14:00:00+08:00</updated><id>/jekyll/toc</id><content type="html" xml:base="/jekyll/toc/"><![CDATA[<h2 id="参考">参考</h2>
<ul>
  <li>https://heymichellemac.com/table-of-contents-jekyll</li>
</ul>

<h2 id="实现">实现</h2>

<ol>
  <li>
    <p>安装插件</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gem install jekyll-toc
</code></pre></div>    </div>
  </li>
  <li>
    <p>Gemfile添加：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> source "https://rubygems.org"
 gem "jekyll-toc"
</code></pre></div>    </div>

    <ul>
      <li>（或bundle install？）</li>
    </ul>
  </li>
  <li>检查安装
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle show jekyll-toc
</code></pre></div>    </div>
  </li>
  <li>
    <p>修改_config.yaml</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> plugins:
 - jekyll-toc

 # TOC Settings
 toc:
 min_level: 1
 max_level: 3
 list_class: toc
 list_class: toc__list
 sublist_class: toc__sublist
</code></pre></div>    </div>
  </li>
  <li>
    <p>md文件头添加</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">toc</span><span class="pi">:</span> <span class="kc">true</span>
<span class="nn">---</span>
</code></pre></div>    </div>
  </li>
  <li>修改默认的post.html添加{% toc %}
    <ul>
      <li>注意直接新建的项目虽然使用主题minima，但主题文件并没有在本地，可以在about页找到主题项目https://github.com/jekyll/minima，把_layouts/post.html复制到本地即可进行二次开发</li>
    </ul>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ---
 layout: base
 ---
 <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"post"</span><span class="nt">&gt;</span>

 <span class="c">&lt;!-- 标题 --&gt;</span>
 <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"post-header"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>{{ page.title | escape }}<span class="nt">&lt;/h1&gt;</span>
     <span class="nt">&lt;h3&gt;</span>{{ page.info | escape }}<span class="nt">&lt;/h3&gt;</span>
 <span class="nt">&lt;/header&gt;</span>

 <span class="c">&lt;!-- 目录 --&gt;</span>
 <span class="nt">&lt;hr&gt;</span>
 {% toc %}
 <span class="nt">&lt;hr&gt;</span>

 <span class="c">&lt;!-- 内容主体 --&gt;</span>
 <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post-content"</span><span class="nt">&gt;</span>
     {{ content }}
 <span class="nt">&lt;/div&gt;</span>

 <span class="nt">&lt;/article&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>效果</li>
</ol>

<p><img src="/image/jekyll/2023-6-27-toc/image_1.jpg" alt="home" /></p>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[参考 https://heymichellemac.com/table-of-contents-jekyll]]></summary></entry><entry><title type="html">jekyll: categories</title><link href="/jekyll/categories/" rel="alternate" type="text/html" title="jekyll: categories" /><published>2023-06-27T13:00:00+08:00</published><updated>2023-06-27T13:00:00+08:00</updated><id>/jekyll/categories</id><content type="html" xml:base="/jekyll/categories/"><![CDATA[<h2 id="参考">参考</h2>
<ul>
  <li><a href="https://zoharandroid.github.io/2019-08-02-Jekyll%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BBCategory%E5%8A%9F%E8%83%BD/">Jekyll个人博客添加分类Category功能</a></li>
</ul>

<h2 id="实现">实现</h2>

<ol>
  <li>
    <p>首先md文件添加在yaml前置格式中添加分类</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="s">---</span>
 <span class="s">layout</span><span class="err">:</span> <span class="s">post</span>
 <span class="s">title</span><span class="err">:</span> <span class="s">awesome title</span>
 <span class="s">categories</span><span class="err">:</span> <span class="s">Personal</span>
 <span class="s">---</span>
</code></pre></div>    </div>
    <ul>
      <li>多个类别直接用空格隔开就可以</li>
    </ul>
  </li>
  <li>修改 config.yaml
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1"># 默认是通过日期做子目录的方式</span>
 <span class="c1"># permalink   : date</span>
 <span class="c1"># 改为使用category做子目录</span>
 <span class="na">permalink</span><span class="pi">:</span> <span class="s">/:categories/:title/</span>
</code></pre></div>    </div>
  </li>
  <li>category需要一个单独的页面，决定放在右上角about旁边。使用默认主题时，只需要在根目录下新建md或是html，前置格式指定如下即可在右上角添加导航
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">layout</span><span class="pi">:</span> <span class="s">page</span>
 <span class="na">title</span><span class="pi">:</span> <span class="s">Help</span>
 <span class="na">permalink</span><span class="pi">:</span> <span class="s">/help/</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>根目录下创建categories.html，内容如下</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ---
 layout: page
 permalink: /categories/
 title: categories
 ---
 <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"archives"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;ul&gt;</span>
         {% for category in site.categories %}
         <span class="nt">&lt;li&gt;</span>
             <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{ site.baseurl }}/{{ category | first | slugify }}"</span><span class="nt">&gt;</span>{{ category | first }}<span class="nt">&lt;/a&gt;</span>
         <span class="nt">&lt;/li&gt;</span>
         {% endfor %}
     <span class="nt">&lt;/ul&gt;</span>
 <span class="nt">&lt;/div&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>效果</li>
</ol>

<p><img src="/image/jekyll/2023-6-27-230627_categories/image_1.jpg" alt="home" />
<img src="/image/jekyll/2023-6-27-230627_categories/image_2.jpg" alt="cate" /></p>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[参考 Jekyll个人博客添加分类Category功能]]></summary></entry><entry><title type="html">jekyll: hello_world</title><link href="/jekyll/hello_world/" rel="alternate" type="text/html" title="jekyll: hello_world" /><published>2023-06-27T12:00:00+08:00</published><updated>2023-06-27T12:00:00+08:00</updated><id>/jekyll/hello_world</id><content type="html" xml:base="/jekyll/hello_world/"><![CDATA[<h2 id="参考">参考</h2>
<ul>
  <li><a href="https://www.jekyll.com.cn/docs/">官方</a></li>
</ul>

<h2 id="创建hello_world">创建hello_world</h2>

<ol>
  <li>安装Ruby
    <ul>
      <li>https://rubyinstaller.org/downloads/</li>
      <li>查看安装：<code class="language-plaintext highlighter-rouge">ruby -v</code></li>
    </ul>
  </li>
  <li>
    <p>安装 Jekyll 和 bundler gems（要很久）</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> gem install jekyll bundler
</code></pre></div>    </div>
  </li>
  <li>创建并启动项目
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  jekyll new hello_umas
  cd hello_umas
  bundle exec jekyll serve
</code></pre></div>    </div>
  </li>
  <li>
    <p>在浏览器中打开 http://localhost:4000 网址</p>
  </li>
  <li>添加markdown文件
    <ul>
      <li>在 Jekyll 项目的 _posts 目录下创建Markdown 文件，文件名必须遵循 YYYY-MM-DD-title.md 的格式，其中 YYYY-MM-DD 表示文章的发布日期，title 表示文章的标题，文件名中的单词必须用短横线 - 分隔</li>
      <li>_posts支持多级目录，可以用文件夹管理md文件</li>
      <li>注意md文件中的代码块可能被解析，如果发现和原文不一致需要用{% raw }{% endraw %}来包裹代码块，比如下面引入图片的代码块如果不加raw的话就会直接显示图片。（这句话中的{% raw }{% endraw %}也要用这个方法嵌套才能显示在页面中，而且必须以大括号为分隔进行三次嵌套才能显示）</li>
      <li>添加图片的方法：项目根目录下新建文件夹存放图片，不要放在_posts文件夹下，比如/image/jekyll/image_1.jpg，然后在md文件引入图片：</li>
    </ul>

    <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code> !<span class="p">[</span><span class="nv">home</span><span class="p">](</span><span class="sx">{{site.url}}/image/jekyll/2023-6-27-230627_categories/image_1.jpg</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<ul>
  <li>标题的日期优先级低于yaml前置格式的日期，如果一天内上传了多份md，可以通过前置格式的日期指定时间来排序
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span>  <span class="s2">"</span><span class="s">Welcome</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Jekyll!"</span>
<span class="na">date</span><span class="pi">:</span>   <span class="s">2023-06-26 11:35:28 +0800</span>
<span class="nn">---</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li>打包
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> jekyll build --source hello_umas --destination docs
</code></pre></div>    </div>
    <ul>
      <li>这条命令将网页构建到_site文件夹中，之后可以托管在服务器上</li>
    </ul>
  </li>
</ol>

<h2 id="套用主题">套用主题</h2>

<ul>
  <li>官方主题：http://jekyllthemes.org/</li>
  <li>选择主题点击demo可以查看</li>
  <li>可以在github fork方便后续开发</li>
  <li>download解压之后进入主题目录运行
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle install
jekyll serve
</code></pre></div>    </div>
  </li>
  <li>具体部署方法可能因项目而异，最好点进GitHub看一下readme</li>
  <li>项目默认主题minima就很好，深得我心，直接用默认了</li>
  <li>注意直接新建的项目虽然使用了minima主题（可以在about页看到），但layout文件并没有在本地，需要到GitHub主页把layout文件内容复制到本地才可以进行二次开发（https://github.com/jekyll/minima）</li>
</ul>

<h2 id="可能的问题">可能的问题</h2>

<ol>
  <li>启动服务器时报错一个语法错误</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>244 │     padding: ($spacing-unit / 3) ($spacing-unit / 2);
    │               ^^^^^^^^^^^^^^^^^
</code></pre></div></div>

<p>不影响服务器的启动，没找到解决办法</p>

<h2 id="其他">其他</h2>

<ul>
  <li>以下是创建项目时gpt推荐的支持markdown的博客框架：</li>
</ul>

<p>Jekyll：Jekyll 是一个简单、易用、支持 Markdown 的静态网站生成器，它能够将 Markdown 文件转换成静态的 HTML 网页。Jekyll 的优点在于它易于安装和使用，并且支持 GitHub Pages，可以免费托管网站。</p>

<p>Hexo：Hexo 是一个快速、简洁且高效的博客框架，它基于 Node.js 平台，支持 Markdown 语法，可以生成静态的 HTML 文件。Hexo 的优点在于它的速度非常快，而且支持插件扩展，可以实现更多的功能。</p>

<p>Hugo：Hugo 是一个快速、灵活、易用的静态网站生成器，它支持 Markdown 语法，并且可以生成静态的 HTML 文件。Hugo 的优点在于它的速度非常快，而且支持多种主题和插件，可以满足不同的需求。</p>

<p>Gatsby：Gatsby 是一个基于 React 的静态网站生成器，它支持 Markdown 语法，并且可以生成静态的 HTML 文件。Gatsby 的优点在于它支持多种数据源，可以从多种数据源中获取数据，而且支持多种插件和主题，可以实现更多的功能。</p>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[参考 官方]]></summary></entry><entry><title type="html">cpp: hello_world</title><link href="/cpp/hello_world/" rel="alternate" type="text/html" title="cpp: hello_world" /><published>2023-06-27T11:00:00+08:00</published><updated>2023-06-27T11:00:00+08:00</updated><id>/cpp/hello_world</id><content type="html" xml:base="/cpp/hello_world/"><![CDATA[<ul>
  <li>创建hello_world
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"Hello! This is a test prgoram.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="n">return0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>安装编译工具
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install build-essential manpages-dev
</code></pre></div>    </div>
  </li>
  <li>编译
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc hello.cpp -o hello
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name></name></author><category term="cpp" /><summary type="html"><![CDATA[创建hello_world #include&lt;stdio.h&gt; int main(void) { printf("Hello! This is a test prgoram.\n"); return0; }]]></summary></entry><entry><title type="html">css: hello_world</title><link href="/css/basic/" rel="alternate" type="text/html" title="css: hello_world" /><published>2023-06-27T11:00:00+08:00</published><updated>2023-06-27T11:00:00+08:00</updated><id>/css/basic</id><content type="html" xml:base="/css/basic/"><![CDATA[<h2 id="scss基本语法">scss基本语法</h2>

<h3 id="多class">多class</h3>
<ul>
  <li>多个class用空格叠加，可以赋予多个属性，结合动态class名可以实现动态样式</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"padding10 inline"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span><span class="nc">.inline</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.padding10</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>class空格叠加时单独定义样式，此时css语句中点是连续的</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box rai"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box di"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span><span class="nc">.box.rai</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
<span class="nt">div</span><span class="nc">.box.di</span> <span class="p">{</span> <span class="nc">...</span> <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>多级叠加时css用空格分开</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"box di"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"select"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span><span class="nc">.box.rai</span> <span class="nc">.select</span> <span class="p">{</span> <span class="err">…</span>
</code></pre></div></div>

<ul>
  <li>上面的空格等价于多级嵌套</li>
</ul>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span><span class="nc">.box.rai</span> <span class="p">{</span> <span class="err">…</span>
  <span class="nc">.select</span> <span class="p">{</span> <span class="err">…</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="import导入外部样式">import导入外部样式</h3>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nt">style</span> <span class="nt">scoped</span> <span class="nt">lang</span><span class="o">=</span><span class="s2">"scss"</span><span class="o">&gt;</span>
<span class="o">@</span><span class="nt">import</span> <span class="s1">'animate.css'</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="选择器">选择器</h2>

<h3 id="兄弟选择器">兄弟选择器：”~”</h3>
<ul>
  <li>例子: 有两个并列的div,当鼠标悬停在div-1时它的宽度增加200,同时div-2的宽度减少200</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"div-1"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"div-2"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.div-1</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">width</span> <span class="m">0.3s</span> <span class="n">ease</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.div-2</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="n">width</span> <span class="m">0.3s</span> <span class="n">ease</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.div-1</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">400px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.div-1</span><span class="nd">:hover</span> <span class="o">~</span> <span class="nc">.div-2</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="父元素引用">父元素引用：”&amp;”</h3>
<ul>
  <li>&amp;用来引用父元素，例：</li>
</ul>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.side-container</span> <span class="p">{</span>
<span class="k">&amp;</span><span class="nc">.unfolded</span> <span class="p">{</span>
<span class="nc">....</span>
</code></pre></div></div>

<ul>
  <li>注意区分上面的语句和下面这个：</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.side-container {
.unfolded {
....
</code></pre></div></div>

<ul>
  <li>编译成css之后
    <ul>
      <li>前者为.side-container.unfolded，是同级</li>
      <li>后者为.side-container .unfolded，是父子级，去区别在于中间的空格</li>
    </ul>
  </li>
  <li>另一个例子：</li>
</ul>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.dashboard</span> <span class="p">{</span>
<span class="k">&amp;</span><span class="nt">-container</span> <span class="p">{</span>
<span class="k">&amp;</span><span class="nt">-text</span> <span class="p">{</span>
</code></pre></div></div>

<ul>
  <li>编译之后嵌套结构会被展平</li>
</ul>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.dashboard-container</span> <span class="p">{</span>
<span class="nc">.dashboard-text</span> <span class="p">{</span>
</code></pre></div></div>

<h3 id="伪元素选择器before">伪元素选择器：before</h3>
<ul>
  <li>在每个指定标签之前之前插入内容和样式</li>
</ul>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">p</span><span class="nd">:before</span> <span class="p">{</span>
  <span class="nl">content</span><span class="p">:</span> <span class="s2">"Read this -"</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="css" /><summary type="html"><![CDATA[scss基本语法]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-06-26T11:35:28+08:00</published><updated>2023-06-26T11:35:28+08:00</updated><id>/jekyll/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>