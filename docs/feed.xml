<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-07-12T21:23:01+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for my new site here. It will appear in my document head meta (for Google search results) and in my feed.xml site description.</subtitle><entry><title type="html">amtc: 本地后端部署 + docker开发环境搭建 + sh一键部署脚本</title><link href="/amtc/docker/lf_docker/" rel="alternate" type="text/html" title="amtc: 本地后端部署 + docker开发环境搭建 + sh一键部署脚本" /><published>2023-07-12T13:59:47+08:00</published><updated>2023-07-12T13:59:47+08:00</updated><id>/amtc/docker/lf_docker</id><content type="html" xml:base="/amtc/docker/lf_docker/"><![CDATA[<h2 id="本机部署">本机部署</h2>

<ul>
  <li>拉取创建进入</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull ubuntu:22.04
docker run <span class="nt">-p</span> 44022:22 <span class="nt">-p</span> 44080:4080 <span class="nt">-p</span> 44090:4090 <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">--name</span> amtc_ubuntu <span class="nt">-itd</span> ubuntu:22.04 /bin/bash
docker <span class="nb">exec</span> <span class="nt">-it</span> amtc_ubuntu /bin/bash
</code></pre></div></div>

<ul>
  <li>环境配置
    <ul>
      <li>前端通过44022远程连接</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update
apt <span class="nb">install </span>vim git openssh-server python3-pip nginx <span class="nt">-y</span>

<span class="nb">echo</span> <span class="s2">"service ssh start"</span> <span class="o">&gt;&gt;</span> /root/.bashrc
<span class="nb">echo</span> <span class="s2">"root:amtc@9999"</span> | chpasswd
<span class="nb">echo</span> <span class="s2">"PermitRootLogin yes"</span>        <span class="o">&gt;&gt;</span> /etc/ssh/sshd_config
<span class="nb">echo</span> <span class="s2">"PasswordAuthentication yes"</span> <span class="o">&gt;&gt;</span> /etc/ssh/sshd_config

<span class="nb">source</span> /root/.bashrc
</code></pre></div></div>

<ul>
  <li>测试后端可用性
    <ul>
      <li>postman测本机端口localhost:44090/test</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt <span class="nb">install </span>python3-pip
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
python3 /root/lf_localback/localback/manage.py runserver 0.0.0.0:4090
</code></pre></div></div>

<h2 id="整合脚本">整合脚本</h2>
<ul>
  <li>由于docker内的ubuntu service不完整，无法通过/etc/systemd/system/xxx.service的方法添加开机启动项</li>
  <li>但写在bashrc里面的话树莓派没办法直接启动，所以还是要再写一份树莓派的部署脚本</li>
  <li>这个仅适用于电脑docker环境的部署</li>
  <li>bash启动项（docker）写在.bashrc内，通过docker启动时入口是/bin/bash，脚本可以bashrc运行</li>
  <li>deploy.sh内容：</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># 安装linux基础工具包</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">========== install basic tools (apt) ==========</span><span class="se">\t\n</span><span class="s2">"</span>

apt update
apt <span class="nb">install </span>vim openssh-server python3-pip nginx <span class="nt">-y</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">done"</span>

<span class="c"># 配置ssh登录</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">========== ssh config ==========</span><span class="se">\t\n</span><span class="s2">"</span>

<span class="nb">echo</span> <span class="s2">"root:amtc@9999"</span> | chpasswd
<span class="nb">echo</span> <span class="s2">"set passwd : amtc@9999"</span>

<span class="c"># echo "PermitRootLogin yes"        &gt;&gt; /etc/ssh/sshd_config</span>
<span class="k">if </span><span class="nb">cat</span> <span class="s1">'/etc/ssh/sshd_config'</span> | <span class="nb">grep</span> <span class="s2">"^PermitRootLogin"</span> <span class="o">&gt;</span> /dev/null <span class="p">;</span><span class="k">then
    </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"/^PermitRootLogin*/cPermitRootLogin yes"</span> /etc/ssh/sshd_config
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"PermitRootLogin yes"</span> <span class="o">&gt;&gt;</span> /etc/ssh/sshd_config
<span class="k">fi</span>

<span class="c"># echo "PasswordAuthentication yes" &gt;&gt; /etc/ssh/sshd_config</span>
<span class="k">if </span><span class="nb">cat</span> <span class="s1">'/etc/ssh/sshd_config'</span> | <span class="nb">grep</span> <span class="s2">"^PasswordAuthentication"</span> <span class="o">&gt;</span> /dev/null <span class="p">;</span><span class="k">then
    </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"/^PasswordAuthentication*/cPasswordAuthentication yes"</span> /etc/ssh/sshd_config
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"PasswordAuthentication yes"</span> <span class="o">&gt;&gt;</span> /etc/ssh/sshd_config
<span class="k">fi

</span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">done"</span>


<span class="c"># 安装python模组</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">========== install server modules (pip) ==========</span><span class="se">\t\n</span><span class="s2">"</span>

pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">done"</span>


<span class="c"># 配置bash启动项（docker）</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">========== bashrc config (docker) ==========</span><span class="se">\t\n</span><span class="s2">"</span>

<span class="nb">cp</span> ./deploy/.amtcrc /root/.amtcrc
<span class="k">if</span> <span class="o">!(</span> <span class="nb">cat</span> ~/.bashrc | <span class="nb">grep</span> <span class="s2">"amtcrc"</span> <span class="o">&gt;</span> /dev/null <span class="o">)</span><span class="p">;</span><span class="k">then
    </span><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">echo 'amtc setup command : ~/.amtcrc'</span><span class="se">\n</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> ~/.bashrc
    <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"if [ -f ~/.amtcrc ]; then</span><span class="se">\n\t</span><span class="s2">. ~/.amtcrc</span><span class="se">\n</span><span class="s2">fi"</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"amtcrc already loaded in bashrc"</span>
<span class="k">fi

</span><span class="nb">source</span> /root/.bashrc
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n\t</span><span class="s2">done"</span>
</code></pre></div></div>

<ul>
  <li>/deploy/.amtcrc</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/root/lf_localback/deploy/startup.sh
</code></pre></div></div>

<ul>
  <li>/deploy/startup.sh</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

service ssh start

<span class="nb">echo</span> <span class="s2">"start django server ..."</span>
<span class="nb">nohup </span>bash <span class="nt">-c</span> <span class="s1">'python3 /root/lf_localback/localback/manage.py runserver 0.0.0.0:4090'</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1 &amp;
</code></pre></div></div>

<ul>
  <li>docker内的的部署流程</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /root
apt <span class="nb">install </span>git
git clone https://gitee.com/umas/lf_localback.git
<span class="nb">cd </span>lf_localback
<span class="nb">chmod </span>777 deploy.sh
./deploy.sh
</code></pre></div></div>

<!-- ![引入图片](/image/amtc/2023-07-12-lf_docker/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="amtc" /><category term="docker" /><summary type="html"><![CDATA[本机部署]]></summary></entry><entry><title type="html">amtc: localfront本地前端开发记录</title><link href="/amtc/localfront/" rel="alternate" type="text/html" title="amtc: localfront本地前端开发记录" /><published>2023-07-10T14:48:43+08:00</published><updated>2023-07-10T14:48:43+08:00</updated><id>/amtc/localfront</id><content type="html" xml:base="/amtc/localfront/"><![CDATA[<h2 id="tabledata类型定义">tableData类型定义</h2>

<ul>
  <li>在导入网络设备的表格时，除了json中定义好的静态参数外，设备状态是由函数实时更新的，这时需要给tableData添加新的属性”status”</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">tableData</span><span class="o">=</span> <span class="nf">ref</span><span class="p">(</span><span class="nx">assets_json</span><span class="p">[</span><span class="dl">"</span><span class="s2">network</span><span class="dl">"</span><span class="p">])</span>
<span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">id</span><span class="p">][</span><span class="dl">"</span><span class="s2">status</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">offline</span><span class="dl">"</span>
</code></pre></div></div>

<ul>
  <li>但因为tableData在赋值时assets_json[“network”]中并没有”status”属性，所以会报错：元素隐式具有 “any” 类型，因为类型为 ““status”” 的表达式不能用于索引类型</li>
  <li>需要给tableData添加类型定义</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">TableDataItem</span> <span class="p">{</span>
        <span class="nl">id</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
        <span class="nl">name</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
        <span class="nl">description</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
        <span class="nl">mac</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
        <span class="nl">ip</span><span class="p">:</span><span class="nx">string</span><span class="p">;</span>
        <span class="nl">port</span><span class="p">:</span><span class="nx">string</span>
        <span class="nx">status</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">type</span> <span class="nx">TableData</span> <span class="o">=</span> <span class="nx">TableDataItem</span><span class="p">[];</span>
<span class="kd">const</span> <span class="nx">tableData</span><span class="p">:</span> <span class="nx">Ref</span><span class="o">&lt;</span><span class="nx">TableData</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nf">ref</span><span class="p">(</span><span class="nx">assets_json</span><span class="p">[</span><span class="dl">"</span><span class="s2">network</span><span class="dl">"</span><span class="p">]</span> <span class="k">as</span> <span class="nx">TableData</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="获取网络设备状态">获取网络设备状态</h2>

<ul>
  <li>前端没有找到合适的ping函数，所以给后端添加了一个新的test接口，直接返回hello</li>
  <li>前端用一个定时器来循环获取延时</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 后端连通性检查</span>
<span class="kd">const</span> <span class="nx">check_status</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">refresh status ...</span><span class="dl">"</span><span class="p">)</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">start_time</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span>
        <span class="kd">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">(</span><span class="na">msg</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">id</span><span class="p">][</span><span class="dl">"</span><span class="s2">status</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start_time</span><span class="p">)</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">ms</span><span class="dl">"</span>
        <span class="p">}</span>
        <span class="kd">const</span> <span class="nx">err</span> <span class="o">=</span> <span class="p">(</span><span class="na">msg</span><span class="p">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
            <span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">id</span><span class="p">][</span><span class="dl">"</span><span class="s2">status</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">error</span><span class="dl">"</span>
        <span class="p">}</span>

        <span class="kd">let</span> <span class="nx">asset</span> <span class="o">=</span> <span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span>
        <span class="c1">// let ip = "http://"+asset["ip"]+":4090/"</span>
        <span class="kd">let</span> <span class="nx">ip</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">http://localhost:4090/</span><span class="dl">"</span>
        <span class="nf">opc_connect</span><span class="p">(</span><span class="nx">ip</span><span class="p">,</span> <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">onMounted</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="k">as</span> <span class="p">{</span> <span class="na">status</span><span class="p">:</span> <span class="nx">string</span> <span class="p">}).</span><span class="nx">status</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">offline</span><span class="dl">'</span><span class="p">;</span>
        <span class="nx">tableData</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">id</span><span class="p">][</span><span class="dl">"</span><span class="s2">status</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">offline</span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="c1">// 设置定时器检查后端连通状态</span>
    <span class="kd">let</span> <span class="nx">time_interval</span> <span class="o">=</span> <span class="mi">3000</span>
    <span class="kd">let</span> <span class="nx">set_id</span> <span class="o">=</span> <span class="nf">setInterval</span><span class="p">(</span><span class="nx">check_status</span><span class="p">,</span> <span class="nx">time_interval</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="表格文本颜色">表格文本颜色</h2>

<ul>
  <li>想给offline红色，online绿色，但是element ui提供的表格方法中没有对单个单元格的操作，默认格式是这样的：</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;el-table-column</span> <span class="na">prop=</span><span class="s">"status"</span> <span class="na">label=</span><span class="s">"Status"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>经过查找，有插槽可以调用</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;el-table-column</span> <span class="na">prop=</span><span class="s">"status"</span> <span class="na">label=</span><span class="s">"Status"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;template</span> <span class="na">#default</span><span class="err">="</span><span class="na">scope</span><span class="err">"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">:class=</span><span class="s">"scope.row.status == 'offline' ? 'red' : 'green'"</span><span class="nt">&gt;</span>{{ scope.row.status }}<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;/template&gt;</span>
<span class="nt">&lt;/el-table-column&gt;</span>
</code></pre></div></div>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 表格属性</span>
<span class="nt">span</span><span class="nc">.red</span><span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">span</span><span class="nc">.green</span><span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">green</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="全部资产列表">全部资产列表</h2>

<ul>
  <li>拼接network和factory分类，js拼接数组有很多方法，这里使用扩展运算符</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">TableDataItem</span> <span class="p">{</span>
    <span class="nl">id</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">name</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
    <span class="nl">description</span><span class="p">:</span> <span class="nx">string</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">type</span> <span class="nx">TableData</span> <span class="o">=</span> <span class="nx">TableDataItem</span><span class="p">[];</span>
<span class="kd">const</span> <span class="nx">tableData</span><span class="p">:</span> <span class="nx">Ref</span><span class="o">&lt;</span><span class="nx">TableData</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nf">ref</span><span class="p">([...</span><span class="nx">assets_json</span><span class="p">[</span><span class="dl">"</span><span class="s2">network</span><span class="dl">"</span><span class="p">],...</span><span class="nx">assets_json</span><span class="p">[</span><span class="dl">"</span><span class="s2">factory</span><span class="dl">"</span><span class="p">]]</span> <span class="k">as</span> <span class="nx">TableData</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/image/amtc/2023-07-10-localfront/image_1.jpg" alt="引入图片" /></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="amtc" /><summary type="html"><![CDATA[tableData类型定义]]></summary></entry><entry><title type="html">vue: 导入json</title><link href="/vue/vue_json/" rel="alternate" type="text/html" title="vue: 导入json" /><published>2023-07-10T13:56:53+08:00</published><updated>2023-07-10T13:56:53+08:00</updated><id>/vue/vue_json</id><content type="html" xml:base="/vue/vue_json/"><![CDATA[<ul>
  <li>一般来说直接import就可以</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">image_list</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/assets/list/image_list.json</span><span class="dl">"</span>
</code></pre></div></div>

<ul>
  <li>
    <p>在ts环境中可能会有红色波浪线：请考虑使用 “–resolveJsonModule” 导入带 “.json” 扩展的模块</p>
  </li>
  <li>
    <p>需要在 TypeScript 配置中开启 resolveJsonModule 选项才能够使用 import 导入 JSON 文件</p>
  </li>
  <li>在项目根目录下找到 tsconfig.json 文件。</li>
  <li>打开文件并在 “compilerOptions” 下添加 “resolveJsonModule”: true。</li>
</ul>

<!-- ![引入图片](/image/vue/2023-07-10-vue_json/image_1.jpg) -->]]></content><author><name></name></author><category term="vue" /><summary type="html"><![CDATA[一般来说直接import就可以]]></summary></entry><entry><title type="html">windows: 华为云terraria服务器</title><link href="/windows/terraria/" rel="alternate" type="text/html" title="windows: 华为云terraria服务器" /><published>2023-07-10T12:44:47+08:00</published><updated>2023-07-10T12:44:47+08:00</updated><id>/windows/terraria</id><content type="html" xml:base="/windows/terraria/"><![CDATA[<h2 id="参考">参考</h2>

<ul>
  <li>官方
    <ul>
      <li>https://terraria.fandom.com/wiki/Server</li>
    </ul>
  </li>
  <li>https://zhuanlan.zhihu.com/p/94570876</li>
</ul>

<h2 id="下载服务器">下载服务器</h2>

<ul>
  <li>安装必备工具</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> wget tmux unzip
</code></pre></div></div>

<ul>
  <li>下载服务器
    <ul>
      <li>所有版本：https://terraria.fandom.com/wiki/Server#Downloads</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://terraria.org/api/download/pc-dedicated-server/terraria-server-1449.zip
</code></pre></div></div>

<ul>
  <li>解压</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unzip terraria-server<span class="k">*</span>
</code></pre></div></div>

<h2 id="启动服务器">启动服务器</h2>

<ul>
  <li>启动</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>1449/Linux
<span class="nb">chmod</span> +x TerrariaServer.bin.x86_64
./TerrariaServer.bin.x86_64 
</code></pre></div></div>

<ul>
  <li>配置服务器
    <ul>
      <li>服务器启动成功后进入选择界面</li>
    </ul>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error Logging Enabled.
Terraria Server v1.4.4.9

n		New World
d &lt;number&gt;	Delete World

Choose World: 
</code></pre></div></div>

<ul>
  <li>输入数字选择已有世界、n为创建新世界、d+数字为删除对应编号的世界</li>
  <li>之后就是跟着提示选就行了（略）</li>
  <li>等待进度条跑完之后会回到Choose World，选择刚刚创建好的世界，进行一些配置之后等到下面这个界面</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Terraria Server v1.4.4.9

Listening on port 4090
Type <span class="s1">'help'</span> <span class="k">for </span>a list of commands.

: Server started
</code></pre></div></div>

<ul>
  <li>测试端口连通性用telnet工具（windows需要在启用或关闭windows功能里开启telnet客户端）（或者直接用wsl）</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>telnet <span class="o">[</span>ip] <span class="o">[</span>port]
</code></pre></div></div>

<ul>
  <li>
    <p>记得在华为云安全组里把这个端口开放（安全组 - 配置规则 - 入方向规则 - 添加4090）</p>
  </li>
  <li>
    <p>4090不好操作，改成默认7777了</p>
  </li>
  <li>
    <p>一条命令运行服务器</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"1</span><span class="se">\n\n\n\n\n</span><span class="s2">"</span> | /root/terraria/1449/Linux/TerrariaServer.bin.x86_64
</code></pre></div></div>

<ul>
  <li>后台运行</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">nohup </span>bash <span class="nt">-c</span> <span class="s1">'echo -e "1\n\n\n\n\n" | /root/terraria/1449/Linux/TerrariaServer.bin.x86_64'</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1 &amp;
</code></pre></div></div>]]></content><author><name></name></author><category term="windows" /><summary type="html"><![CDATA[参考]]></summary></entry><entry><title type="html">git: 添加ssh公钥</title><link href="/git/git_ssh/" rel="alternate" type="text/html" title="git: 添加ssh公钥" /><published>2023-07-10T12:39:59+08:00</published><updated>2023-07-10T12:39:59+08:00</updated><id>/git/git_ssh</id><content type="html" xml:base="/git/git_ssh/"><![CDATA[<ul>
  <li>添加ssh公钥
    <ul>
      <li>gitee: https://gitee.com/profile/sshkeys</li>
      <li>github: https://github.com/settings/keys</li>
    </ul>
  </li>
  <li>电脑生成公钥</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> ed25519 <span class="nt">-C</span> <span class="s2">"1970313791@qq.com"</span>  
<span class="nb">cat</span> ~/.ssh/id_ed25519.pub

git config <span class="nt">--global</span> user.email <span class="s2">"1970313791@qq.com"</span>
git config <span class="nt">--global</span> user.name <span class="s2">"umas"</span>
</code></pre></div></div>

<ul>
  <li>git由http改为ssh</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote <span class="nb">rm </span>origin 
git remote add origin git@gitee.com:umas/iiir-server-node.git
git push <span class="nt">--set-upstream</span> origin develop
</code></pre></div></div>
<ul>
  <li>测试</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh -T git@gitee.com
ssh -T git@github.com
</code></pre></div></div>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[添加ssh公钥 gitee: https://gitee.com/profile/sshkeys github: https://github.com/settings/keys]]></summary></entry><entry><title type="html">git: hello_world</title><link href="/git/hello_world/" rel="alternate" type="text/html" title="git: hello_world" /><published>2023-07-10T12:34:42+08:00</published><updated>2023-07-10T12:34:42+08:00</updated><id>/git/hello_world</id><content type="html" xml:base="/git/hello_world/"><![CDATA[<h2 id="基操push-add">基操push add</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"xxx"</span>
git push
</code></pre></div></div>

<h2 id="查看切换分支">查看/切换分支</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">-a</span>
git checkout xxx
</code></pre></div></div>

<h2 id="撤销commit和add">撤销commit和add</h2>

<ul>
  <li>首先查看记录（q键退出）</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log
</code></pre></div></div>

<ul>
  <li>回退到上一个commit</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset <span class="nt">--soft</span> &lt;上一个的id&gt;
</code></pre></div></div>

<ul>
  <li>撤销add</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset &lt;文件名&gt;
</code></pre></div></div>

<h2 id="删除项目所有内容">删除项目所有内容</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nb">rm</span> <span class="nt">-r</span> <span class="nb">.</span>
<span class="c"># 这将递归删除所有文件和文件夹，包括 `.git` 文件夹。</span>
git commit <span class="nt">-m</span> <span class="s2">"Remove all files"</span>
git push origin main
</code></pre></div></div>

<h2 id="清空历史记录">清空历史记录</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">--orphan</span> latest_branch
git add <span class="nt">-A</span>
git commit <span class="nt">-am</span> <span class="s2">"Initial commit"</span>
git branch <span class="nt">-D</span> main
git branch <span class="nt">-m</span> main
git push <span class="nt">-f</span> origin main
</code></pre></div></div>

<ul>
  <li>上述命令的作用是创建一个新的分支 <code class="language-plaintext highlighter-rouge">latest_branch</code>，将所有文件添加到该分支并提交一个新的空的初始提交，然后删除 <code class="language-plaintext highlighter-rouge">main</code> 分支并将 <code class="language-plaintext highlighter-rouge">latest_branch</code> 分支重命名为 <code class="language-plaintext highlighter-rouge">main</code> 分支。最后，使用 <code class="language-plaintext highlighter-rouge">git push -f</code> 命令强制推送到远程仓库。</li>
</ul>]]></content><author><name></name></author><category term="git" /><summary type="html"><![CDATA[基操push add]]></summary></entry><entry><title type="html">docker: 添加国内镜像</title><link href="/docker/mirror/" rel="alternate" type="text/html" title="docker: 添加国内镜像" /><published>2023-07-10T12:26:32+08:00</published><updated>2023-07-10T12:26:32+08:00</updated><id>/docker/mirror</id><content type="html" xml:base="/docker/mirror/"><![CDATA[<h2 id="ubuntu">ubuntu</h2>

<ul>
  <li>编辑配置文件</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/docker/daemon.json
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
    <span class="s2">"registry-mirrors"</span>: <span class="o">[</span>
        <span class="s2">"https://ung2thfc.mirror.aliyuncs.com"</span>,
        <span class="s2">"https://registry.docker-cn.com"</span>,
        <span class="s2">"http://hub-mirror.c.163.com"</span>,
        <span class="s2">"https://docker.mirrors.ustc.edu.cn"</span>
    <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>重启docker</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart docker
</code></pre></div></div>

<ul>
  <li>查看</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker info
</code></pre></div></div>

<h2 id="windows">windows</h2>

<ul>
  <li>阿里云加速
    <ul>
      <li>https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</li>
    </ul>
  </li>
</ul>

<p><img src="/image/docker/2023-07-10-mirror/image_1.jpg" alt="引入图片" /></p>

<p><img src="/image/docker/2023-07-10-mirror/image_2.jpg" alt="引入图片" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"registry-mirrors":["https://xxxxxx.mirror.aliyuncs.com"]
</code></pre></div></div>]]></content><author><name></name></author><category term="docker" /><summary type="html"><![CDATA[ubuntu]]></summary></entry><entry><title type="html">css: display:flex</title><link href="/css/css_flex/" rel="alternate" type="text/html" title="css: display:flex" /><published>2023-07-10T10:57:59+08:00</published><updated>2023-07-10T10:57:59+08:00</updated><id>/css/css_flex</id><content type="html" xml:base="/css/css_flex/"><![CDATA[<h2 id="参考">参考</h2>

<ul>
  <li>https://css-tricks.com/snippets/css/a-guide-to-flexbox/</li>
</ul>

<h2 id="来看看">来看看</h2>

<p><img src="/image/css/2023-07-10-css_flex/image_1.png" alt="引入图片" />
<img src="/image/css/2023-07-10-css_flex/image_2.png" alt="引入图片" /></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span> <span class="c">/* or inline-flex */</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="排序">排序</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_3.png" alt="引入图片" /></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item1</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="c">/* default is 0 */</span>
<span class="p">}</span>
<span class="nc">.item2</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span> <span class="c">/* default is 0 */</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="方向">方向</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_4.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span> <span class="o">|</span> <span class="n">row-reverse</span> <span class="o">|</span> <span class="n">column</span> <span class="o">|</span> <span class="n">column-reverse</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// row（默认值）：在 ;从右到左ltrrtl</span>
<span class="c1">// row-reverse：从右到左;从左到右ltrrtl</span>
<span class="c1">// column：与上相同，但从上到下row</span>
<span class="c1">// column-reverse：与相同，但从下到上row-reverse</span>
</code></pre></div></div>

<h3 id="换行">换行</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_5.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">nowrap</span> <span class="o">|</span> <span class="n">wrap</span> <span class="o">|</span> <span class="n">wrap-reverse</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// nowrap（默认值）：所有弹性项目都将在一行上</span>
<span class="c1">// wrap：弹性项目将从上到下换行到多行。</span>
<span class="c1">// wrap-reverse：弹性项目将从下到上换行到多行</span>
</code></pre></div></div>

<h3 id="宽度">宽度</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_6.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item1</span> <span class="p">{</span>
    <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="cm">/* default 0 */</span>
<span class="p">}</span>
<span class="nc">.item2</span> <span class="p">{</span>
    <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">2</span><span class="p">;</span> <span class="cm">/* default 0 */</span>
<span class="p">}</span>
<span class="nc">.item3</span> <span class="p">{</span>
    <span class="nl">flex-grow</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="cm">/* default 0 */</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="位置">位置</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_7.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="n">space-between</span> <span class="o">|</span> <span class="n">space-around</span> <span class="o">|</span> <span class="n">space-evenly</span> <span class="o">|</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="nb">left</span> <span class="o">|</span> <span class="nb">right</span> <span class="o">...</span> <span class="o">+</span> <span class="n">safe</span> <span class="o">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="对齐子元素">对齐（子元素）</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_8.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
    <span class="nl">align-self</span><span class="p">:</span> <span class="nb">auto</span> <span class="o">|</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">stretch</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="对齐父元素">对齐（父元素）</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_9.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">first</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">last</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="n">self-start</span> <span class="o">|</span> <span class="n">self-end</span> <span class="o">+</span> <span class="o">...</span> <span class="n">safe</span> <span class="o">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="对齐内容">对齐（内容）</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_9.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">align-content</span><span class="p">:</span> <span class="n">flex-start</span> <span class="o">|</span> <span class="n">flex-end</span> <span class="o">|</span> <span class="nb">center</span> <span class="o">|</span> <span class="n">space-between</span> <span class="o">|</span> <span class="n">space-around</span> <span class="o">|</span> <span class="n">space-evenly</span> <span class="o">|</span> <span class="n">stretch</span> <span class="o">|</span> <span class="n">start</span> <span class="o">|</span> <span class="n">end</span> <span class="o">|</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">first</span> <span class="nb">baseline</span> <span class="o">|</span> <span class="n">last</span> <span class="nb">baseline</span> <span class="o">+</span> <span class="o">...</span> <span class="n">safe</span> <span class="o">|</span> <span class="n">unsafe</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="间距">间距</h3>

<p><img src="/image/css/2023-07-10-css_flex/image_9.png" alt="引入图片" /></p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.container</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="err">...
    </span><span class="na">gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="na">gap</span><span class="p">:</span> <span class="m">10px</span> <span class="m">20px</span><span class="p">;</span> <span class="cm">/* row-gap column gap */</span>
    <span class="na">row-gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="nl">column-gap</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="css" /><summary type="html"><![CDATA[参考]]></summary></entry><entry><title type="html">css: 文字样式</title><link href="/css/css_text/" rel="alternate" type="text/html" title="css: 文字样式" /><published>2023-07-10T10:47:43+08:00</published><updated>2023-07-10T10:47:43+08:00</updated><id>/css/css_text</id><content type="html" xml:base="/css/css_text/"><![CDATA[<h2 id="基本语法">基本语法</h2>

<ul>
  <li>文字不换行</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>white-space: nowrap
</code></pre></div></div>

<!-- ![引入图片](/image/css/2023-07-10-css_text/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="css" /><summary type="html"><![CDATA[基本语法]]></summary></entry><entry><title type="html">electron: 打包改名改图标</title><link href="/electron/build_icon/" rel="alternate" type="text/html" title="electron: 打包改名改图标" /><published>2023-07-10T10:28:43+08:00</published><updated>2023-07-10T10:28:43+08:00</updated><id>/electron/build_icon</id><content type="html" xml:base="/electron/build_icon/"><![CDATA[<h2 id="解决左上角图标不显示">解决左上角图标不显示：</h2>
<ul>
  <li>网上说是生成的ico文件格式不对</li>
  <li>解决方法：改用png，像素还是256</li>
  <li>新问题：左上角图标显示了一半（？？？）</li>
  <li>改用png之后自动生成了dist/.icon-ico/icon.ico，有帖子说用这个ico，也不行</li>
  <li>放大缩小重新生成了几次ico，问题没解决</li>
  <li>
    <p>第二天发现下面任务栏的图标也只显示一半了（？？？）</p>
  </li>
  <li>2022.8.28图标修好了
    <ul>
      <li>正确的配置是在background.ts里设置图标，打包之后因为路径问题没有成功加载，像python脚本那样直接拷贝出来，区分开发环境和生产环境的路径</li>
    </ul>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">icon</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">development</span><span class="dl">"</span> <span class="c1">// 图标路径在打包之后不能识别，使用extraResources单独拷贝出来</span>
<span class="p">?</span> <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nf">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">public/static/icon/mati_ei_256.ico</span><span class="dl">"</span><span class="p">)</span>
<span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nf">cwd</span><span class="p">(),</span> <span class="dl">"</span><span class="s2">resources/static/icon/mati_ei_256.ico</span><span class="dl">"</span><span class="p">),</span>
</code></pre></div></div>

<ul>
  <li>之前可能是因为asar压缩导致只显示一半？Vue.config.js里的win.icon也要配置，这个是exe文件自己的图标</li>
</ul>

<h2 id="打包后左上角名称">打包后左上角名称</h2>

<ul>
  <li>尝试修改打包后的左上角名称也失败</li>
  <li>方法1：直接在package.json中修改name，这个方法改中文会报错，而且不被推荐</li>
  <li>方法2：require(‘electron’).app.setName(name)
    <ul>
      <li>setName是官方文档中出现的方法</li>
      <li>setName不管加在哪都不行，有时候可以看到启动瞬间名字被改掉了但马上就变回来</li>
      <li>参考了官方所有打包参数：
        <ul>
          <li>https://www.electron.build/configuration/configuration</li>
          <li>没有找到定义左上角name的键</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>把package.json的name删了，再使用setName就不会变了</li>
  <li>后面buid时候会报错</li>
  <li>2022.8.28改好了</li>
  <li>setName函数无论如何都会被刷掉，正确的修改方法是找到public/index.html</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;title&gt;</span>电脑的配件<span class="nt">&lt;/title&gt;</span>
</code></pre></div></div>

<ul>
  <li>这里的优先级是最高的</li>
</ul>

<!-- ![引入图片](/image/electron/2023-07-10-build_icon/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="electron" /><summary type="html"><![CDATA[解决左上角图标不显示： 网上说是生成的ico文件格式不对 解决方法：改用png，像素还是256 新问题：左上角图标显示了一半（？？？） 改用png之后自动生成了dist/.icon-ico/icon.ico，有帖子说用这个ico，也不行 放大缩小重新生成了几次ico，问题没解决 第二天发现下面任务栏的图标也只显示一半了（？？？） 2022.8.28图标修好了 正确的配置是在background.ts里设置图标，打包之后因为路径问题没有成功加载，像python脚本那样直接拷贝出来，区分开发环境和生产环境的路径]]></summary></entry></feed>