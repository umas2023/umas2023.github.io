<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-10-15T20:48:21+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for his new site here. It will appear in his document head meta (for Google search results) and in his feed.xml site description.</subtitle><entry><title type="html">js: 构造函数</title><link href="/js/knowhow/constructor/" rel="alternate" type="text/html" title="js: 构造函数" /><published>2023-10-15T20:21:36+08:00</published><updated>2023-10-15T20:21:36+08:00</updated><id>/js/knowhow/constructor</id><content type="html" xml:base="/js/knowhow/constructor/"><![CDATA[<ul>
  <li>
    <p>面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>
  </li>
  <li>
    <p>JavaScript 语言使用构造函数（constructor）作为对象的模板。所谓”构造函数”，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。</p>
  </li>
  <li>
    <p>new 就是创造对象/实例化对象的过程，new 创造出来的对象叫做构造函数的 实例对象</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Person</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//构造函数体内的属性</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Jack</span><span class="dl">'</span>
<span class="p">}</span>

<span class="c1">// Person.prototype 原型 上的方法</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">a</span><span class="p">:</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">我是一个a方法</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="na">b</span><span class="p">:</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span> <span class="p">},</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">()</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="c1">// Jack</span>
<span class="nx">p</span><span class="p">.</span><span class="nf">a</span><span class="p">()</span><span class="c1">// 我是一个a方法</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/js/2023-10-15-constructor/image_1.jpg) -->]]></content><author><name></name></author><category term="js" /><category term="knowhow" /><summary type="html"><![CDATA[面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。]]></summary></entry><entry><title type="html">js: 箭头函数</title><link href="/js/knowhow/Arrow_Function/" rel="alternate" type="text/html" title="js: 箭头函数" /><published>2023-10-15T19:53:21+08:00</published><updated>2023-10-15T19:53:21+08:00</updated><id>/js/knowhow/Arrow_Function</id><content type="html" xml:base="/js/knowhow/Arrow_Function/"><![CDATA[<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 表达式函数</span>
<span class="kd">var</span> <span class="nx">fn1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">fn1</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="c1">// 声明式函数</span>
<span class="kd">function</span> <span class="nf">fn2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>

<span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="区分箭头函数和匿名函数">区分箭头函数和匿名函数</h2>

<ul>
  <li>箭头函数没有自己的 this 值，它会继承上下文中的 this 值。这意味着箭头函数内部的 this 始终指向定义该函数时的对象，而不是调用时的对象。</li>
  <li>箭头函数没有自己的 arguments 对象，但可以访问外部作用域中的 arguments 对象。</li>
  <li>箭头函数不能用作构造函数，不能使用 new 关键字实例化。</li>
  <li>箭头函数没有 prototype 属性。</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 箭头函数</span>
<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 输出: 5</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 匿名函数</span>
<span class="kd">const</span> <span class="nx">multiply</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">multiply</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span> <span class="c1">// 输出: 6</span>
</code></pre></div></div>

<ul>
  <li>下面的例子可以说明二者的区别</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Alice</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">arrowFunc</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="na">anonymousFunc</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nf">arrowFunc</span><span class="p">();</span> <span class="c1">// 输出: Hello, undefined!</span>
<span class="nx">obj</span><span class="p">.</span><span class="nf">anonymousFunc</span><span class="p">();</span> <span class="c1">// 输出: Hello, Alice!</span>
</code></pre></div></div>

<ul>
  <li>在上面的例子中，arrowFunc继承自外部上下文的 this 值，即全局上下文，并且无法被修改。在全局上下文中并没有定义 name 属性，因此输出结果为 “undefined”。</li>
</ul>

<h2 id="详解箭头函数">详解箭头函数</h2>

<ul>
  <li>
    <p>函数对象是一个支持[[Call]]、[[Construct]]内部方法的对象。每个支持[[Construct]]的对象必须支持[[Call]]，也就是说，每个构造函数必须是一个函数对象。因此，构造函数也可以被称为构造函数函数或构造函数对象。所以，想要对某个对象使用new，就得确保该对象具有[[Construct]]这个内部方法。而箭头函数没有[[Construct]]。</p>
  </li>
  <li>
    <p>同时因为没有构造原型的需求，所以箭头函数不存在 prototype 属性</p>
  </li>
  <li>
    <p>用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略。</p>
  </li>
</ul>

<h2 id="什么时候不使用箭头函数">什么时候不使用箭头函数</h2>

<ul>
  <li>定义对象上的方法</li>
</ul>

<p>由上面的例子可以看到this.name输出undefined</p>

<ul>
  <li>动态上下文的回调函数</li>
</ul>

<p>在客户端编程中，将事件侦听器附加到DOM元素是一项常见的任务。事件触发处理程序函数，并将this作为目标元素,这里如果使用箭头函数就不够灵活。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">myButton</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">button</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nb">window</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Clicked button</span><span class="dl">'</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>在全局上下文中 this 指向 window。 当发生单击事件时，浏览器尝试使用按钮上下文调用处理函数，但箭头函数不会更改其预定义的上下文。this.innerHTML相当于window.innerHTML，没有任何意义。</p>

<p>必须应用函数表达式，该表达式允许根据目标元素更改 this：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">myButton</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">button</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nx">button</span><span class="p">);</span> <span class="c1">// =&gt; true</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Clicked button</span><span class="dl">'</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>当用户单击按钮时，处理程序函数中的 this 指向 button。因此这个问题。innerHTML = ‘已单击按钮’正确地修改按钮文本以反映已单击状态。</p>

<ul>
  <li>调用构造函数</li>
</ul>

<p>this 在构造调用中是新创建的对象。当执行new MyFunction()时，构造函数MyFunction的上下文是一个新对象:this instanceof MyFunction === true。</p>

<p>箭头函数不能用作构造函数。 JavaScript通过抛出异常隐式阻止这样做。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Message</span> <span class="o">=</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// Throws "TypeError: Message is not a constructor"</span>
<span class="kd">const</span> <span class="nx">helloMessage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Message</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello World!</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/js/2023-10-15-Arrow_Function/image_1.jpg) -->]]></content><author><name></name></author><category term="js" /><category term="knowhow" /><summary type="html"><![CDATA[```js // 表达式函数 var fn1 = function(a, b) { return a + b }]]></summary></entry><entry><title type="html">vue: 模板语法</title><link href="/vue/knowhow/gramatic/" rel="alternate" type="text/html" title="vue: 模板语法" /><published>2023-10-15T19:47:48+08:00</published><updated>2023-10-15T19:47:48+08:00</updated><id>/vue/knowhow/gramatic</id><content type="html" xml:base="/vue/knowhow/gramatic/"><![CDATA[<h2 id="插值">插值</h2>

<ul>
  <li>双大括号文本插值</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p&gt;</span>{{ message }}<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>v-html输出html代码</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">v-html=</span><span class="s">"message"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
    
<span class="nt">&lt;script&gt;</span>
<span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="na">el</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&lt;h1&gt;菜鸟教程&lt;/h1&gt;</span><span class="dl">'</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<ul>
  <li>v-bind为属性赋值</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">v-bind:class=</span><span class="s">"{'class1': use}"</span><span class="nt">&gt;</span>
    v-bind:class 指令
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<ul>
  <li>表达式</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>
    {{5+5}}<span class="nt">&lt;br&gt;</span>
    {{ ok ? 'YES' : 'NO' }}<span class="nt">&lt;br&gt;</span>
    {{ message.split('').reverse().join('') }}
    <span class="nt">&lt;div</span> <span class="na">v-bind:id=</span><span class="s">"'list-' + id"</span><span class="nt">&gt;</span>菜鸟教程<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<h2 id="过滤器">过滤器</h2>

<ul>
  <li>管道符定义过滤器,过滤器函数接受表达式的值作为第一个参数，过滤器可以串联</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 在两个大括号中 --&gt;</span>
{{ message | capitalize }}

<span class="c">&lt;!-- 在 v-bind 指令中 --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">v-bind:id=</span><span class="s">"rawId | formatId"</span><span class="nt">&gt;&lt;/div&gt;</span>

</code></pre></div></div>

<ul>
  <li>以下实例对输入的字符串第一个字母转为大写</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>
  {{ message | capitalize }}
<span class="nt">&lt;/div&gt;</span>
    
<span class="nt">&lt;script&gt;</span>
<span class="k">new</span> <span class="nc">Vue</span><span class="p">({</span>
  <span class="na">el</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">runoob</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">filters</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">capitalize</span><span class="p">:</span> <span class="nf">function </span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="k">return</span> <span class="dl">''</span>
      <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
      <span class="k">return</span> <span class="nx">value</span><span class="p">.</span><span class="nf">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">value</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div>

<h2 id="暂时记录这么多">暂时记录这么多</h2>

<ul>
  <li>官方：https://cn.vuejs.org/guide/essentials/template-syntax.html#attribute-bindings</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/vue/2023-10-15-gramatic/image_1.jpg) -->]]></content><author><name></name></author><category term="vue" /><category term="knowhow" /><summary type="html"><![CDATA[插值]]></summary></entry><entry><title type="html">jekyll: 添加背景图片</title><link href="/jekyll/background/" rel="alternate" type="text/html" title="jekyll: 添加背景图片" /><published>2023-10-14T22:06:39+08:00</published><updated>2023-10-14T22:06:39+08:00</updated><id>/jekyll/background</id><content type="html" xml:base="/jekyll/background/"><![CDATA[<ul>
  <li>一开始想加在home.html中发现没有效果，查看发现home.html上面还有一行layout: base，也就是说base.html才是真正的根节点</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"{{ page.lang | default: site.lang | default: "</span> <span class="na">en</span><span class="err">"</span> <span class="err">}}"</span><span class="nt">&gt;</span>

{%- include head.html -%}

<span class="nt">&lt;body&gt;</span>
  <span class="c">&lt;!-- 背景图 --&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bg-img"</span><span class="nt">&gt;&lt;/div&gt;</span>

  {%- include header.html -%}

  <span class="nt">&lt;main</span> <span class="na">class=</span><span class="s">"page-content"</span> <span class="na">aria-label=</span><span class="s">"Content"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"wrapper"</span><span class="nt">&gt;</span>
      {{ content }}
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/main&gt;</span>

  {%- include footer.html -%}

<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;style </span><span class="na">scoped</span><span class="nt">&gt;</span>
  <span class="c">/* 背景图片 */</span>
  <span class="nt">div</span><span class="nc">.bg-img</span> <span class="p">{</span>
    <span class="nl">background-image</span><span class="p">:</span> <span class="sx">url("{{site.url}}/static/background.svg")</span><span class="p">;</span>
    <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">background-repeat</span><span class="p">:</span> <span class="nb">repeat</span><span class="p">;</span>
    <span class="nl">background-size</span><span class="p">:</span> <span class="m">400px</span><span class="p">;</span>
    <span class="nl">z-index</span><span class="p">:</span> <span class="m">-2</span><span class="p">;</span>
    <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.1</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/jekyll/2023-10-14-background/image_1.jpg) -->]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[一开始想加在home.html中发现没有效果，查看发现home.html上面还有一行layout: base，也就是说base.html才是真正的根节点]]></summary></entry><entry><title type="html">leetcode: 58笔试</title><link href="/leetcode/js/function_call/" rel="alternate" type="text/html" title="leetcode: 58笔试" /><published>2023-10-14T21:00:04+08:00</published><updated>2023-10-14T21:00:04+08:00</updated><id>/leetcode/js/function_call</id><content type="html" xml:base="/leetcode/js/function_call/"><![CDATA[<ul>
  <li>依旧是算法题不难，选择题逆天</li>
  <li>因为是第一次用js写算法题，所以记录一下</li>
</ul>

<h2 id="查找出现次数最多的字符">查找出现次数最多的字符</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>


<span class="c1">// 查找字符串中出现次数最多的字符</span>
<span class="c1">// 可能有多个重复字符</span>

<span class="cm">/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 返回给定字符串中出现频率最高的字符
 * @param str string字符串 给定的字符串
 * @return string字符串一维数组
 */</span>
<span class="kd">function</span> <span class="nf">findChar</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>
    <span class="kd">let</span> <span class="nx">charCount</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">chr</span> <span class="k">of</span> <span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">charCount</span><span class="p">[</span><span class="nx">chr</span><span class="p">]){</span>
            <span class="nx">charCount</span><span class="p">[</span><span class="nx">chr</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
            <span class="nx">charCount</span><span class="p">[</span><span class="nx">chr</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="p">}</span>

    <span class="p">}</span>
    <span class="nx">maxList</span> <span class="o">=</span> <span class="p">[</span><span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">chr</span> <span class="k">in</span> <span class="nx">charCount</span><span class="p">){</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">charCount</span><span class="p">[</span><span class="nx">chr</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">charCount</span><span class="p">[</span><span class="nx">maxList</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">){</span>
            <span class="nx">maxList</span> <span class="o">=</span> <span class="p">[</span><span class="nx">chr</span><span class="p">]</span>
        <span class="p">}</span> 
        <span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="nx">charCount</span><span class="p">[</span><span class="nx">chr</span><span class="p">]</span> <span class="o">==</span> <span class="nx">charCount</span><span class="p">[</span><span class="nx">maxList</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span> <span class="o">&amp;&amp;</span> <span class="nx">chr</span><span class="o">!=</span><span class="nx">maxList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">){</span>
            <span class="nx">maxList</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">chr</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">maxList</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">findChar</span><span class="p">:</span> <span class="nx">findChar</span>
<span class="p">};</span>


<span class="nf">findChar</span><span class="p">(</span><span class="dl">"</span><span class="s2">asdfghjklaqwertyuiopiaia135</span><span class="dl">"</span><span class="p">)</span>


</code></pre></div></div>

<h2 id="斐波那契数列">斐波那契数列</h2>

<ul>
  <li>使用递归法超时了，改用迭代</li>
  <li>也可以用动态规划的思想迭代</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="c1">// 斐波那契数列</span>


<span class="cm">/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 返回斐波那契数列第n项的数字
 * @param n long长整型 数列中的第n项
 * @return long长整型
 */</span>
<span class="kd">function</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// 递归法超时</span>
    <span class="c1">// if(n&lt;=1){</span>
    <span class="c1">//     return 1</span>
    <span class="c1">// }</span>
    <span class="c1">// return fib(n-1) + fib(n-2)</span>


    <span class="c1">// 试试迭代</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">pre</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">cur</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;=</span><span class="nx">n</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">pre</span> <span class="o">+</span> <span class="nx">cur</span>
        <span class="nx">pre</span> <span class="o">=</span> <span class="nx">cur</span>
        <span class="nx">cur</span> <span class="o">=</span> <span class="nx">next</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">cur</span>


<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">fib</span><span class="p">:</span> <span class="nx">fib</span>
<span class="p">};</span>


<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">fib</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>

</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-14-function_call/image_1.jpg) -->

<h2 id="中文转数字">中文转数字</h2>

<ul>
  <li>这题比较有意思</li>
  <li>关键在于对零的判断</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入 "二百零五万三千三百三十三"
输出 2053333
</code></pre></div></div>

<ul>
  <li>通过率只有85%，没有找到问题</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="c1">// 中文转数字</span>

<span class="c1">// "二百零五万三千三百三十三"</span>
<span class="c1">// 2053333</span>

<span class="c1">// 通过率85%</span>



<span class="cm">/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 请实现一个将中文数字转换为阿拉伯数字的方法
 * @param chineseNumber string字符串 中文数字字符串
 * @return int整型
 */</span>
<span class="kd">function</span> <span class="nf">chineseToNumber</span><span class="p">(</span><span class="nx">chineseNumber</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>
    <span class="kd">const</span> <span class="nx">numberMap</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">零</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="na">一</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="na">二</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="na">三</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="na">四</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
        <span class="na">五</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="na">六</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
        <span class="na">七</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
        <span class="na">八</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
        <span class="na">九</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
        <span class="na">十</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
        <span class="na">百</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
        <span class="na">千</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
        <span class="na">万</span><span class="p">:</span> <span class="mi">10000</span>
    <span class="p">}</span>
    <span class="kd">let</span> <span class="nx">ansNumber</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">let</span> <span class="nx">curNumber</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">let</span> <span class="nx">lastNumber</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">cnNum</span> <span class="k">of</span> <span class="nx">chineseNumber</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">intNum</span> <span class="o">=</span> <span class="nx">numberMap</span><span class="p">[</span><span class="nx">cnNum</span><span class="p">]</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">intNum</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">curNumber</span> <span class="o">+=</span> <span class="nx">intNum</span>
            <span class="c1">// 一万零二这种情况</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">intNum</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">curNumber</span> <span class="o">=</span> <span class="nx">ansNumber</span>
                <span class="nx">ansNumber</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="p">}</span>
            <span class="c1">// 一万零二十这种情况要记住二，再在下面处理十</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">curNumber</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">lastNumber</span> <span class="o">=</span> <span class="nx">intNum</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">curNumber</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// "十七"这种情况</span>
                <span class="k">if </span><span class="p">(</span><span class="nx">intNum</span> <span class="o">==</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">curNumber</span> <span class="o">=</span> <span class="mi">10</span>
                <span class="p">}</span>
                <span class="c1">// 一千万这种情况</span>
                <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">intNum</span> <span class="o">==</span> <span class="mi">10000</span><span class="p">){</span>
                    <span class="nx">ansNumber</span> <span class="o">*=</span> <span class="mi">10000</span>
                <span class="p">}</span>

            <span class="p">}</span>
            <span class="c1">// 处理一万零二十的十</span>
            <span class="k">else</span> <span class="k">if </span><span class="p">((</span><span class="nx">lastNumber</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">intNum</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">ansNumber</span> <span class="o">=</span> <span class="nx">curNumber</span> <span class="o">-</span> <span class="nx">lastNumber</span>
                <span class="nx">curNumber</span> <span class="o">=</span> <span class="nx">lastNumber</span> <span class="o">*</span> <span class="nx">intNum</span>
                <span class="nx">ansNumber</span> <span class="o">+=</span> <span class="nx">curNumber</span>
                <span class="nx">curNumber</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="nx">lastNumber</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="nx">curNumber</span> <span class="o">*=</span> <span class="nx">intNum</span>
                <span class="nx">ansNumber</span> <span class="o">+=</span> <span class="nx">curNumber</span>
                <span class="nx">curNumber</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="nx">lastNumber</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">cnNum</span><span class="p">,</span> <span class="nx">curNumber</span><span class="p">,</span> <span class="nx">ansNumber</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">curNumber</span> <span class="o">+</span> <span class="nx">ansNumber</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">chineseToNumber</span><span class="p">:</span> <span class="nx">chineseToNumber</span>
<span class="p">};</span>


<span class="c1">// console.log(chineseToNumber("二百零五万三千三百三十三"))</span>
<span class="c1">// console.log(chineseToNumber("一万零二"))</span>
<span class="c1">// console.log(chineseToNumber("一万零二十"))</span>
<span class="c1">// console.log(chineseToNumber("一千万"))</span>
<span class="c1">// console.log(chineseToNumber("一千万零一百"))</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">chineseToNumber</span><span class="p">(</span><span class="dl">"</span><span class="s2">一千零一万零一十一</span><span class="dl">"</span><span class="p">))</span>


</code></pre></div></div>]]></content><author><name></name></author><category term="leetcode" /><category term="js" /><summary type="html"><![CDATA[依旧是算法题不难，选择题逆天 因为是第一次用js写算法题，所以记录一下]]></summary></entry><entry><title type="html">js: call函数</title><link href="/js/function_call/" rel="alternate" type="text/html" title="js: call函数" /><published>2023-10-14T17:08:42+08:00</published><updated>2023-10-14T17:08:42+08:00</updated><id>/js/function_call</id><content type="html" xml:base="/js/function_call/"><![CDATA[<h2 id="首先了解什么是call">首先了解什么是call</h2>

<ul>
  <li>在 JavaScript 中，函数是对象的方法。如果一个函数不是 JavaScript 对象的方法，那么它就是全局对象的函数</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span><span class="dl">"</span><span class="s2">Bill</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Gates</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">fullName</span><span class="p">:</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nf">fullName</span><span class="p">();</span>		<span class="c1">// 将返回 "Bill Gates"</span>
</code></pre></div></div>

<ul>
  <li>
    <p>上面的例子中fullName 属性是一个方法。person 对象是该方法的拥有者。fullName 属性属于 person 对象的方法。</p>
  </li>
  <li>
    <p>call() 方法是预定义的 JavaScript 方法。它可以用来调用所有者对象作为参数的方法。通过 call()，您能够使用属于另一个对象的方法。下例调用 person 的 fullName 方法，并用于 person1：</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">fullName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span><span class="dl">"</span><span class="s2">Bill</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Gates</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span><span class="dl">"</span><span class="s2">Steve</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Jobs</span><span class="dl">"</span><span class="p">,</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">person1</span><span class="p">);</span>  <span class="c1">// 将返回 "Bill Gates"</span>
</code></pre></div></div>

<ul>
  <li>call方法可以接受参数</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">fullName</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">,</span> <span class="nx">country</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">city</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">country</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span><span class="dl">"</span><span class="s2">Bill</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Gates</span><span class="dl">"</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">fullName</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="nx">person1</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Seattle</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">USA</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="然后自己实现一个call">然后自己实现一个call</h2>

<ul>
  <li>下面是gpt写的，但我觉得hr要的应该不是这个</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 自定义的 call 函数实现</span>
<span class="kd">function</span> <span class="nf">myCall</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 检查 fn 是否为函数</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">fn</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">myCall 只能用于函数</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 将函数作为上下文对象的一个属性</span>
  <span class="kd">const</span> <span class="nx">symbol</span> <span class="o">=</span> <span class="nc">Symbol</span><span class="p">(</span><span class="dl">'</span><span class="s1">temp</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">context</span><span class="p">[</span><span class="nx">symbol</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">;</span>

  <span class="c1">// 使用 eval 执行函数并获取结果</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">eval</span><span class="p">(</span><span class="dl">'</span><span class="s1">context[symbol](...args)</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 删除添加的属性</span>
  <span class="k">delete</span> <span class="nx">context</span><span class="p">[</span><span class="nx">symbol</span><span class="p">];</span>

  <span class="c1">// 返回函数执行的结果</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 示例用法</span>
<span class="kd">function</span> <span class="nf">greet</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span> <span class="p">};</span>

<span class="nf">myCall</span><span class="p">(</span><span class="nx">greet</span><span class="p">,</span> <span class="nx">person</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Symbol是JavaScript中的一种原始数据类型，引入于ES6（ECMAScript 2015）标准。它是一种唯一且不可变的数据类型，用于表示一个独一无二的标识符。</p>
  </li>
  <li>
    <p>与其他原始数据类型（如字符串、数字和布尔值）不同，Symbol值在内存中是唯一的。每个Symbol值都是独一无二的，即使它们具有相同的描述。</p>
  </li>
  <li>
    <p>在示例代码中，我们使用Symbol(‘temp’)创建了一个带有描述符为”temp”的Symbol值，并将其作为临时属性名添加到上下文对象中。通过这种方式，我们确保了该属性名的唯一性，不会与上下文对象中的其他属性名冲突。</p>
  </li>
  <li>
    <p>context[symbol] = fn 这行代码的意思是将一个函数 fn 赋值给对象 context 的一个属性，而该属性的名称是 symbol 所表示的 Symbol 值。</p>
  </li>
  <li>
    <p>在 JavaScript 中，eval 函数接受一个字符串参数，并将该字符串作为 JavaScript 代码进行解析和执行。在这个特定的表达式中，我们使用 eval 函数来执行一个动态生成的函数调用。</p>
  </li>
  <li>
    <p>在上面的示例中，greet 函数是要调用的函数，person 对象是作为上下文对象传递给 myCall 函数的参数，也就是说在myCall中context = person</p>
  </li>
  <li>
    <p>根据对代码的理解，简化了gpt的代码如下：</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">myCall</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">fn</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">function</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">myCall 只能用于函数</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 创建一个唯一的属性名</span>
  <span class="kd">const</span> <span class="nx">propertyName</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">__myCall__</span><span class="dl">'</span><span class="p">;</span>

  <span class="c1">// 将函数赋值给上下文对象的属性</span>
  <span class="nx">context</span><span class="p">[</span><span class="nx">propertyName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">;</span>

  <span class="c1">// 使用属性名调用函数并获取结果</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">context</span><span class="p">[</span><span class="nx">propertyName</span><span class="p">]();</span>

  <span class="c1">// 删除临时属性</span>
  <span class="k">delete</span> <span class="nx">context</span><span class="p">[</span><span class="nx">propertyName</span><span class="p">];</span>

  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 示例用法</span>
<span class="kd">function</span> <span class="nf">greet</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`Hello, </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">!`</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span> <span class="p">};</span>

<span class="nf">myCall</span><span class="p">(</span><span class="nx">greet</span><span class="p">,</span> <span class="nx">person</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>简单来说就是，person内部没有greet方法，在myCall里把greet方法加入到person中，调用完后再删掉</li>
  <li>因为greet加入了person，所以可以共享this</li>
</ul>

<!--![引入图片](/image/js/2023-10-14-function_call/image_1.jpg) -->]]></content><author><name></name></author><category term="js" /><summary type="html"><![CDATA[首先了解什么是call]]></summary></entry><entry><title type="html">leetcode: js反转二叉树</title><link href="/leetcode/js/invertBinaryTree/" rel="alternate" type="text/html" title="leetcode: js反转二叉树" /><published>2023-10-14T17:01:33+08:00</published><updated>2023-10-14T17:01:33+08:00</updated><id>/leetcode/js/invertBinaryTree</id><content type="html" xml:base="/leetcode/js/invertBinaryTree/"><![CDATA[<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">TreeNode</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">val</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="kd">function</span> <span class="nf">invertBinaryTree</span><span class="p">(</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">root</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  
    <span class="c1">// 交换左右子节点</span>
    <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">left</span><span class="p">;</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">right</span><span class="p">;</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
  
    <span class="c1">// 递归反转左子树和右子树</span>
    <span class="nf">invertBinaryTree</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">left</span><span class="p">);</span>
    <span class="nf">invertBinaryTree</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">right</span><span class="p">);</span>
  
    <span class="k">return</span> <span class="nx">root</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="c1">// 示例用例</span>
  <span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">left</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">right</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">原始二叉树:</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">root</span><span class="p">);</span>
  
  <span class="kd">const</span> <span class="nx">invertedRoot</span> <span class="o">=</span> <span class="nf">invertBinaryTree</span><span class="p">(</span><span class="nx">root</span><span class="p">);</span>
  
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">反转后的二叉树:</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">invertedRoot</span><span class="p">);</span>
</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-14-category_tag/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="js" /><summary type="html"><![CDATA[class TreeNode { constructor(val) { this.val = val; this.left = null; this.right = null; } } function invertBinaryTree(root) { if (!root) { return null; } // 交换左右子节点 let temp = root.left; root.left = root.right; root.right = temp; // 递归反转左子树和右子树 invertBinaryTree(root.left); invertBinaryTree(root.right); return root; } // 示例用例 const root = new TreeNode(4); root.left = new TreeNode(2); root.right = new TreeNode(7); root.left.left = new TreeNode(1); root.left.right = new TreeNode(3); root.right.left = new TreeNode(6); root.right.right = new TreeNode(9); console.log('原始二叉树:'); console.log(root); const invertedRoot = invertBinaryTree(root); console.log('反转后的二叉树:'); console.log(invertedRoot);]]></summary></entry><entry><title type="html">vue: 关于template</title><link href="/vue/knowhow/vue_template/" rel="alternate" type="text/html" title="vue: 关于template" /><published>2023-10-14T17:01:33+08:00</published><updated>2023-10-14T17:01:33+08:00</updated><id>/vue/knowhow/vue_template</id><content type="html" xml:base="/vue/knowhow/vue_template/"><![CDATA[<h2 id="template标签">template标签</h2>

<ul>
  <li>
    <p>template的作用是模板占位符，可帮助我们包裹元素，但在循环过程当中，template不会被渲染到页面上</p>
  </li>
  <li>一个例子：用v-for循环的div下面增加了一个span，想让这个span也加入for循环
    <ul>
      <li>法1：span上也添加v-for（显然不利于代码的后续扩展）</li>
      <li>法2：div和span外面再包一层div，给外层div添加v-for（缺点是会引入新的层级）</li>
      <li>法3：用template标签替代法2的div，template不会渲染在页面上（推荐）</li>
    </ul>
  </li>
  <li>.vue文件中最外层template标签是用来写 html 模板的，且内部必须只有一个根元素（不然IDE会报错）</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"demo"</span><span class="nt">&gt;</span>
        .....
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-14-category_tag/image_1.jpg) -->]]></content><author><name></name></author><category term="vue" /><category term="knowhow" /><summary type="html"><![CDATA[template标签]]></summary></entry><entry><title type="html">jekyll: jekyll首页添加分类tag标签</title><link href="/jekyll/category_tag/" rel="alternate" type="text/html" title="jekyll: jekyll首页添加分类tag标签" /><published>2023-10-14T16:45:18+08:00</published><updated>2023-10-14T16:45:18+08:00</updated><id>/jekyll/category_tag</id><content type="html" xml:base="/jekyll/category_tag/"><![CDATA[<ul>
  <li>
    <p>首先找到主页的模板，比如我的是./_layouts/home.html</p>
  </li>
  <li>
    <p>查找里面的for循环就可以定位每条post的格式了</p>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    {%- for post in posts -%}
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;</span>{{ post.date | date: date_format }}<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;h3&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"post-link"</span> <span class="na">href=</span><span class="s">"{{ post.url | relative_url }}"</span><span class="nt">&gt;</span>
          {{ post.title | escape }}
        <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/h3&gt;</span>
      <span class="nt">&lt;h5&gt;</span>{{ post.info | escape }}<span class="nt">&lt;/h5&gt;</span>
      {%- if site.show_excerpts -%}
      {{ post.excerpt }}
      {%- endif -%}
    <span class="nt">&lt;/li&gt;</span>
    {%- endfor -%}
</code></pre></div></div>

<ul>
  <li>在上面的title和info之间添加分类tag</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    {%- for post in posts -%}
    <span class="nt">&lt;li&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;</span>{{ post.date | date: date_format }}<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;h3&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"post-link"</span> <span class="na">href=</span><span class="s">"{{ post.url | relative_url }}"</span><span class="nt">&gt;</span>
          {{ post.title | escape }}
        <span class="nt">&lt;/a&gt;</span>
      <span class="nt">&lt;/h3&gt;</span>

      <span class="c">&lt;!-- 添加分类标签 --&gt;</span>
      {% for category in post.categories %}
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"category"</span><span class="nt">&gt;</span>{{ category }}<span class="nt">&lt;/span&gt;</span>
      {% endfor %}

      <span class="nt">&lt;h5&gt;</span>{{ post.info | escape }}<span class="nt">&lt;/h5&gt;</span>
      {%- if site.show_excerpts -%}
      {{ post.excerpt }}
      {%- endif -%}
    <span class="nt">&lt;/li&gt;</span>
    {%- endfor -%}
</code></pre></div></div>

<ul>
  <li>底部再定义一些格式</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style </span><span class="na">scoped</span><span class="nt">&gt;</span>

  <span class="nt">span</span><span class="nc">.category</span><span class="p">{</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">2px</span> <span class="m">5px</span> <span class="m">2px</span> <span class="m">5px</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.5em</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.4</span><span class="p">);</span>
  <span class="p">}</span>

<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<p><img src="/image/jekyll/2023-10-14-category_tag/image_1.jpg" alt="引入图片" /></p>

<ul>
  <li>文章内添加tag也一样，找到文章的模板后添加，我的是post.html</li>
  <li>注意这里是page.categories而不是post.categories</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: base
---
<span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"post"</span><span class="nt">&gt;</span>

  <span class="c">&lt;!-- 标题 --&gt;</span>
  <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"post-header"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>{{ page.title | escape }}<span class="nt">&lt;/h1&gt;</span>
    
    <span class="c">&lt;!-- 分类tag --&gt;</span>
    {% for category in page.categories %}
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"category"</span><span class="nt">&gt;</span>{{ category }}<span class="nt">&lt;/span&gt;</span>
    {% endfor %}

    <span class="nt">&lt;h3&gt;</span>{{ page.info | escape }}<span class="nt">&lt;/h3&gt;</span>
  <span class="nt">&lt;/header&gt;</span>

  <span class="c">&lt;!-- 目录 --&gt;</span>
  <span class="nt">&lt;hr&gt;</span>
  {% toc %}
  <span class="nt">&lt;hr&gt;</span>

  <span class="c">&lt;!-- 内容主体 --&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post-content"</span><span class="nt">&gt;</span>
    {{ content }}
  <span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;/article&gt;</span>


<span class="nt">&lt;style </span><span class="na">scoped</span><span class="nt">&gt;</span>

  <span class="nt">span</span><span class="nc">.category</span><span class="p">{</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">2px</span> <span class="m">5px</span> <span class="m">2px</span> <span class="m">5px</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.5em</span><span class="p">;</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">0.4</span><span class="p">);</span>
  <span class="p">}</span>

<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[首先找到主页的模板，比如我的是./_layouts/home.html]]></summary></entry><entry><title type="html">vue: vue双向绑定</title><link href="/vue/knowhow/mvvm/" rel="alternate" type="text/html" title="vue: vue双向绑定" /><published>2023-10-14T16:25:39+08:00</published><updated>2023-10-14T16:25:39+08:00</updated><id>/vue/knowhow/mvvm</id><content type="html" xml:base="/vue/knowhow/mvvm/"><![CDATA[<h2 id="vue双向绑定原理">vue双向绑定原理</h2>

<ul>
  <li>vue.js是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调来渲染视图。</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MVC模式：Model，View，Control，单项绑定，js更新model，view就会更新
MVVM模式：Model–View–ViewModel，它实现了View的变动，自动反映在 ViewModel，反之亦然。
对于双向绑定的理解，就是用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定
</code></pre></div></div>

<ul>
  <li>监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者</li>
  <li>订阅者Watcher，每一个Watcher都绑定一个更新函数，watcher可以收到属性的变化通知并执行相应的函数，从而更新视图</li>
  <li>解析器Compile，可以扫描和解析每个节点的相关指令（v-model，v-on等指令），如果节点存在v-model，v-on等指令，则解析器Compile初始化这类节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）</li>
</ul>

<p>v-model是vue的一个语法糖，用于表单控件或者在组件上创建双向绑定。</p>

<h2 id="步骤">步骤</h2>

<p>第一步： 需要observer(观察者)对数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter
这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</p>

<p>第二步： compile(模板解析器)解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p>

<p>第三步： Watcher(订阅者)是Observer和Compile之间通信的桥梁，主要做的事情是:
1、在自身实例化时往属性订阅器(dep)里面添加自己
2、自身必须有一个update()方法
3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。</p>

<p>第四步： MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/vue/2023-10-14-mvvm/image_1.jpg) -->]]></content><author><name></name></author><category term="vue" /><category term="knowhow" /><summary type="html"><![CDATA[vue双向绑定原理]]></summary></entry></feed>