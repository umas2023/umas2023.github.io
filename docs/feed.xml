<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-09-09T11:37:26+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for my new site here. It will appear in his document head meta (for Google search results) and in his feed.xml site description.</subtitle><entry><title type="html">vue: ts环境下导入public目录下的json</title><link href="/vue/import_json/" rel="alternate" type="text/html" title="vue: ts环境下导入public目录下的json" /><published>2023-09-08T19:50:10+08:00</published><updated>2023-09-08T19:50:10+08:00</updated><id>/vue/import_json</id><content type="html" xml:base="/vue/import_json/"><![CDATA[<ul>
  <li>一般在assets或者utils目录下导入json时可以直接用@定义路径，在tsconfig.json中添加<code class="language-plaintext highlighter-rouge">"resolveJsonModule": true,</code>即可</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">assets_json</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@/utils/assets_conf.json</span><span class="dl">"</span>
</code></pre></div></div>

<ul>
  <li>如果json在public路径下，直接导入会报错</li>
  <li>在项目根目录（或者如果已经定义了utils.d.ts的话在utils目录也可以）下新建.d.ts，比如assets_conf.d.ts，写入以下内容</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">*.json</span><span class="dl">"</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">value</span><span class="p">:</span> <span class="kr">any</span><span class="p">;</span>
    <span class="k">export</span> <span class="k">default</span> <span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>这时再导入就不会报错了</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">assets_json</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">/public/config/assets_conf.json</span><span class="dl">"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="vue" /><summary type="html"><![CDATA[一般在assets或者utils目录下导入json时可以直接用@定义路径，在tsconfig.json中添加"resolveJsonModule": true,即可]]></summary></entry><entry><title type="html">termux: hello world</title><link href="/linux/termux-hello/" rel="alternate" type="text/html" title="termux: hello world" /><published>2023-09-08T10:16:49+08:00</published><updated>2023-09-08T10:16:49+08:00</updated><id>/linux/termux-hello</id><content type="html" xml:base="/linux/termux-hello/"><![CDATA[<h2 id="基本命令">基本命令</h2>

<ul>
  <li>termux-change-repo
    <ul>
      <li>换源，空格键选中</li>
    </ul>
  </li>
  <li>termux-setup-storage
    <ul>
      <li>创建storage文件夹，直接访问手机文件</li>
    </ul>
  </li>
  <li>pkg install vim
    <ul>
      <li>有时候apt可能不好用，改为pkg</li>
    </ul>
  </li>
  <li>ssh远程
    <ul>
      <li>实测termux里面的ubuntu的ssh服务启不起来，只能先ssh进termux再进ubuntu</li>
      <li>更新：termux和ubuntu共用8022端口，不能同时开ssh，把termux的ssh关了就可以开ubuntu的ssh了</li>
      <li>pkg install openssh</li>
      <li>看我是谁：whoami</li>
      <li>设置密码：passwd</li>
      <li>启动服务：sshd</li>
      <li>电脑连接端口是8022：ssh u0_a153@192.168.1.109 -p 8022</li>
      <li>mate10用户名u0_a243</li>
      <li>nova9用户名u0_a282</li>
      <li>matepad用户名u0_a153</li>
      <li>记得把vpn都退了不然一直timeout，md查了好久居然是因为这个</li>
    </ul>
  </li>
  <li>termux调用摄像头，参考：https://zhuanlan.zhihu.com/p/381044910</li>
</ul>

<h2 id="安装ubuntu">安装ubuntu</h2>

<ul>
  <li>安装ubuntu
    <ul>
      <li>安装工具：pkg install proot-distro</li>
      <li>记得先pkg update一下</li>
      <li>查看可安装版本：proot-distro list</li>
      <li>安装：proot-distro install ubuntu</li>
      <li>登录：proot-distro login ubuntu</li>
      <li>文件：termux启用storage之后，Ubuntu中 /sdcard 目录即为手机存储</li>
    </ul>
  </li>
  <li>termux设置默认进入ubuntu：
    <ul>
      <li>新建.profile</li>
      <li>加入登录命令</li>
    </ul>
  </li>
  <li>
    <p>手机文件在/sdcard目录下</p>
  </li>
  <li>安装code－server
    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>curl -fsSL https://code-server.dev/install.sh</td>
              <td>sh</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>挂梯子↑</li>
      <li>code-server</li>
      <li>cat .config/code-server/config.yaml</li>
      <li>把密码记住</li>
      <li>fe2bee81b0fa36545baec7ad</li>
      <li>浏览器访问127.0.0.1:8080</li>
      <li>输完密码黑屏/白屏换个浏览器，安卓edge可行chrome不行</li>
      <li>密码替换：sed -i “/^passwd=*/cpasswd=666” config.yaml</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="linux" /><summary type="html"><![CDATA[基本命令]]></summary></entry><entry><title type="html">raspberry_pi: 树莓派命令行联网</title><link href="/raspberry_pi/linux/server_net/" rel="alternate" type="text/html" title="raspberry_pi: 树莓派命令行联网" /><published>2023-09-08T09:33:00+08:00</published><updated>2023-09-08T09:33:00+08:00</updated><id>/raspberry_pi/linux/server_net</id><content type="html" xml:base="/raspberry_pi/linux/server_net/"><![CDATA[<ul>
  <li>参考
    <ul>
      <li>https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#4-boot-ubuntu-server</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="raspberry_pi" /><category term="linux" /><summary type="html"><![CDATA[参考 https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#4-boot-ubuntu-server]]></summary></entry><entry><title type="html">raspberry_pi: 树莓派ssh</title><link href="/raspberry_pi/ssh/vscode/windows/ssh/" rel="alternate" type="text/html" title="raspberry_pi: 树莓派ssh" /><published>2023-09-08T09:33:00+08:00</published><updated>2023-09-08T09:33:00+08:00</updated><id>/raspberry_pi/ssh/vscode/windows/ssh</id><content type="html" xml:base="/raspberry_pi/ssh/vscode/windows/ssh/"><![CDATA[<h2 id="windows平台vscode添加ssh公钥">windows平台vscode添加ssh公钥</h2>
<ul>
  <li>windows平台下运行：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -t rsa -b 4096 
</code></pre></div>    </div>
  </li>
  <li>Linux服务器拷贝内容
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\umas2017\.ssh\id_rsa.pub 
</code></pre></div>    </div>
    <p>到</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ~/.ssh/authorized_keys
</code></pre></div>    </div>
  </li>
  <li>服务器重启ssh
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service ssh restart
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="连接错误的解决方法">连接错误的解决方法</h2>

<ul>
  <li>
    <p>大部分情况下首先排查对应端口是否变化，删除c盘user下.ssh/known_hosts</p>
  </li>
  <li>
    <p>卡在download vscode server的情况可以试试手动下载这个包</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/.vscode-server/bin
tree
<span class="c"># 返回一串id，比如我的是57fd6d0195bb9b9d1b49f6da5db789060795de47</span>
<span class="c"># 手动下载这个包：https://update.code.visualstudio.com/commit:57fd6d0195bb9b9d1b49f6da5db789060795de47/server-linux-x64/stable</span>

wget https://vscode.cdn.azure.cn/stable/57fd6d0195bb9b9d1b49f6da5db789060795de47/vscode-server-linux-x64.tar.gz

<span class="c"># 拷贝到id的目录下解压</span>
<span class="nb">tar</span> <span class="nt">-xvzf</span> vscode-server-linux-x64.tar.gz <span class="nt">--strip-components</span> 1


</code></pre></div></div>]]></content><author><name></name></author><category term="raspberry_pi" /><category term="ssh" /><category term="vscode" /><category term="windows" /><summary type="html"><![CDATA[windows平台vscode添加ssh公钥 windows平台下运行： ssh-keygen -t rsa -b 4096 Linux服务器拷贝内容 C:\Users\umas2017\.ssh\id_rsa.pub 到 ~/.ssh/authorized_keys]]></summary></entry><entry><title type="html">markdown: 进阶命令</title><link href="/markdown/cmd/" rel="alternate" type="text/html" title="markdown: 进阶命令" /><published>2023-09-08T09:00:00+08:00</published><updated>2023-09-08T09:00:00+08:00</updated><id>/markdown/cmd</id><content type="html" xml:base="/markdown/cmd/"><![CDATA[<h2 id="vscode中自动生成目录">vscode中自动生成目录</h2>
<ul>
  <li>光标放在插入目录的位置</li>
  <li>快捷键<code class="language-plaintext highlighter-rouge">ctrl+shift+p</code></li>
  <li>输入 Markdown: Create Table of Contents 并选择该命令</li>
</ul>]]></content><author><name></name></author><category term="markdown" /><summary type="html"><![CDATA[vscode中自动生成目录 光标放在插入目录的位置 快捷键ctrl+shift+p 输入 Markdown: Create Table of Contents 并选择该命令]]></summary></entry><entry><title type="html">python: 使用python驱动声卡播放音频(ubuntu)</title><link href="/python/nio_voice_play/" rel="alternate" type="text/html" title="python: 使用python驱动声卡播放音频(ubuntu)" /><published>2023-09-06T14:16:58+08:00</published><updated>2023-09-06T14:16:58+08:00</updated><id>/python/nio_voice_play</id><content type="html" xml:base="/python/nio_voice_play/"><![CDATA[<h2 id="ubuntu命令行播放音频">ubuntu命令行播放音频</h2>

<ul>
  <li>aplay命令
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>alsa-utils
</code></pre></div>    </div>
  </li>
  <li>查看声卡设备
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /proc/asound/cards
</code></pre></div>    </div>
  </li>
  <li>指定声卡播放
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aplay <span class="nt">-D</span> default Hinomi_Chinese_lijun.wav
aplay <span class="nt">-D</span> plughw:2 Hinomi_Chinese_lijun.wav
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="excel转json">excel转json</h2>
<ul>
  <li>由于拿到的目录是excel格式不方便程序操作，先转为json</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">原程序找不到了，目录下面只有这个↓</span><span class="sh">'''</span>

<span class="kn">import</span> <span class="n">openpyxl</span> <span class="c1"># pip install openpyxl
</span>
<span class="k">def</span> <span class="nf">load_each_sheet</span><span class="p">():</span>
    <span class="n">wb</span> <span class="o">=</span> <span class="n">openpyxl</span><span class="p">.</span><span class="nf">load_workbook</span><span class="p">(</span><span class="n">filePath</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">sheet</span> <span class="ow">in</span> <span class="n">wb</span><span class="p">.</span><span class="n">worksheets</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">sheet</span><span class="p">.</span><span class="n">title</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">exceptSheets</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">wb</span><span class="p">,</span> <span class="n">sheet</span>
    <span class="n">fileNameOut</span> <span class="o">=</span> <span class="n">fileName</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.xlsx</span><span class="sh">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">-out.xlsx</span><span class="sh">"</span>
    <span class="n">wb</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">fileDir</span><span class="p">,</span> <span class="n">fileNameOut</span><span class="p">))</span>

</code></pre></div></div>

<h2 id="py播放音频">py播放音频</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">wave</span> <span class="c1"># pip install wave
</span><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>


<span class="k">class</span> <span class="nc">SayHello</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                 <span class="n">package_path</span><span class="o">=</span><span class="sh">'</span><span class="s">/home/nuc/test_voice_play/nio-voice</span><span class="sh">'</span><span class="p">,</span>
                 <span class="n">default_sleep_time</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
                 <span class="n">default_sound_volume</span><span class="o">=</span><span class="mi">80</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">package_path</span> <span class="o">=</span> <span class="n">package_path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">default_sleep_time</span> <span class="o">=</span> <span class="n">default_sleep_time</span>
        <span class="n">self</span><span class="p">.</span><span class="n">default_sound_volume</span> <span class="o">=</span> <span class="n">default_sound_volume</span>

    <span class="c1"># Get audio file duration
</span>    <span class="k">def</span> <span class="nf">get_duration</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="n">wavfile</span> <span class="o">=</span> <span class="n">wave</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">params</span> <span class="o">=</span> <span class="n">wavfile</span><span class="p">.</span><span class="nf">getparams</span><span class="p">()</span>
        <span class="n">framesra</span><span class="p">,</span> <span class="n">frameswav</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">params</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
        <span class="n">time</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">framesra</span> <span class="o">*</span> <span class="n">frameswav</span>
        <span class="k">return</span> <span class="n">time</span>

    <span class="c1"># Modify playback volume
</span>    <span class="k">def</span> <span class="nf">set_volume</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">volume</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">card</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">'''</span><span class="s">
        Modify playback volume  </span><span class="se">\n</span><span class="s">
        volume : 0~100  </span><span class="se">\n</span><span class="s">
        card : default = 0 </span><span class="se">\n</span><span class="s">
        </span><span class="sh">'''</span>
        <span class="k">if</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="ow">or</span> <span class="n">volume</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Ranges : 0 &lt; volume &lt; 100</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">self</span><span class="p">.</span><span class="n">default_sound_volume</span> <span class="o">=</span> <span class="n">volume</span>
        <span class="n">volume_percent</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">volume</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">%</span><span class="sh">"</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">'</span><span class="s">amixer set -c %s Master %s 1&gt;/dev/null 2&gt;&amp;1</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">card</span><span class="p">),</span> <span class="n">volume_percent</span><span class="p">))</span>

    <span class="c1"># play one audio file
</span>    <span class="k">def</span> <span class="nf">play_one</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmdstr</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">card</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">volume</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">'''</span><span class="s">
        play one single .wav file, return wav file path and content  </span><span class="se">\n</span><span class="s">
        cmdstr : eg:</span><span class="sh">"</span><span class="s">Basic/wakeup/adult_male_nature</span><span class="sh">"</span><span class="s">  </span><span class="se">\n</span><span class="s">
        card : default = 0  </span><span class="se">\n</span><span class="s">
        volume : default = 80
        </span><span class="sh">'''</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">set_volume</span><span class="p">(</span><span class="n">volume</span><span class="o">=</span><span class="n">volume</span><span class="p">,</span> <span class="n">card</span><span class="o">=</span><span class="n">card</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">BaseException</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">volume set error</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">package_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">Voiceconfig.json</span><span class="sh">"</span><span class="p">),</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">load_f</span><span class="p">:</span>
            <span class="n">config</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">load_f</span><span class="p">)</span>
            <span class="n">cmdlist</span> <span class="o">=</span> <span class="n">cmdstr</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">wav_path</span> <span class="o">=</span> <span class="sh">""</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">wav_path</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="n">cmdlist</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">cmdlist</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="n">cmdlist</span><span class="p">[</span><span class="mi">2</span><span class="p">]][</span><span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">]</span>
                <span class="n">wav_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">package_path</span><span class="p">,</span> <span class="n">wav_path</span><span class="p">)</span>
                <span class="n">content</span> <span class="o">=</span> <span class="n">config</span><span class="p">[</span><span class="n">cmdlist</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">cmdlist</span><span class="p">[</span><span class="mi">1</span><span class="p">]][</span><span class="n">cmdlist</span><span class="p">[</span><span class="mi">2</span><span class="p">]][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">]</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">content : %s</span><span class="sh">"</span> <span class="o">%</span> <span class="n">content</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sh">'</span><span class="s">aplay -D plughw:%s %s 1&gt;/dev/null 2&gt;&amp;1</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">card</span><span class="p">),</span> <span class="n">wav_path</span><span class="p">))</span>
                <span class="k">return</span> <span class="n">wav_path</span>
            <span class="k">except</span> <span class="nb">BaseException</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">command input illegal</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span>

    <span class="c1"># play multi audio file by step in a list
</span>    <span class="k">def</span> <span class="nf">play_step</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmdlist</span><span class="p">:</span> <span class="p">[{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="nb">int</span><span class="p">}],</span> <span class="n">card</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">volume</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">'''</span><span class="s">
        play multi .wav file sequentially at once  </span><span class="se">\n</span><span class="s">
        sleep: default = 3
        card : default = 0  </span><span class="se">\n</span><span class="s">
        volume : default = 80
        </span><span class="sh">'''</span>
        <span class="k">for</span> <span class="n">each_cmd</span> <span class="ow">in</span> <span class="n">cmdlist</span><span class="p">:</span>

            <span class="n">sleep_time</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">default_sleep_time</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">each_cmd</span><span class="p">:</span>
                <span class="n">sleep_time</span> <span class="o">=</span> <span class="n">each_cmd</span><span class="p">[</span><span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">]</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">wav_path</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">play_one</span><span class="p">(</span><span class="n">cmdstr</span><span class="o">=</span><span class="n">each_cmd</span><span class="p">[</span><span class="sh">'</span><span class="s">cmd</span><span class="sh">'</span><span class="p">],</span> <span class="n">card</span><span class="o">=</span><span class="n">card</span><span class="p">,</span> <span class="n">volume</span><span class="o">=</span><span class="n">volume</span><span class="p">)</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">sleep : %fs</span><span class="sh">"</span> <span class="o">%</span> <span class="n">sleep_time</span><span class="p">)</span>
                <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">get_duration</span><span class="p">(</span><span class="n">wav_path</span><span class="p">)</span> <span class="o">+</span> <span class="n">sleep_time</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">BaseException</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">command input illegal</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span>

    <span class="c1"># Drive multiple sound cards at the same time
</span>    <span class="k">def</span> <span class="nf">play_parallel</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">playlist</span><span class="p">:</span> <span class="p">[{</span><span class="sh">"</span><span class="s">card</span><span class="sh">"</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="sh">"</span><span class="s">step</span><span class="sh">"</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="sh">"</span><span class="s">volume</span><span class="sh">"</span><span class="p">:</span> <span class="nb">int</span><span class="p">}])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">'''</span><span class="s">
        Drive multiple sound cards at the same time </span><span class="se">\n</span><span class="s">
        card : sound card number  </span><span class="se">\n</span><span class="s">
        step : eg. [{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">Basic/wakeup/adult_male_nature</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="s">: 2}]
        volume : default = 80
        </span><span class="sh">'''</span>
        <span class="n">thread_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">playlist</span><span class="p">))]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">playlist</span><span class="p">)):</span>
            <span class="n">card</span> <span class="o">=</span> <span class="n">playlist</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="sh">"</span><span class="s">card</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">step</span> <span class="o">=</span> <span class="n">playlist</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="sh">"</span><span class="s">step</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">volume</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">default_sound_volume</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">volume</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">playlist</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">volume</span> <span class="o">=</span> <span class="n">playlist</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="sh">"</span><span class="s">volume</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">thread_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">play_step</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">step</span><span class="p">,</span> <span class="n">card</span><span class="p">))</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">each_thread</span> <span class="ow">in</span> <span class="n">thread_list</span><span class="p">:</span>
                <span class="n">each_thread</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">thread error : </span><span class="sh">"</span> <span class="o">+</span> <span class="n">e</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="功能">功能</h2>

<ol>
  <li>单条指令播放</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">.</span><span class="nf">play_one</span><span class="p">(</span><span class="sh">"</span><span class="s">Basic/wakeup/adult_male_nature</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>多条指令连续播放
参数card, volume, sleep有预设值</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">.</span><span class="nf">play_step</span><span class="p">(</span>
    <span class="n">card</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
    <span class="n">volume</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
    <span class="n">cmdlist</span><span class="o">=</span><span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Basic/wakeup/adult_male_nature</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Control/open_window/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Control/close_window/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
    <span class="p">])</span>
</code></pre></div></div>

<ol>
  <li>多声卡并行播放
参数sleep, volumn有预设值</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">play_0</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Basic/wakeup/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Control/open_window/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Control/close_window/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">play_1</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Basic/wakeup/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">2</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Control/open_window/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">3</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Control/close_window/adult_male_nature</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sleep</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">a</span><span class="p">.</span><span class="nf">play_parallel</span><span class="p">([</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">card</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">step</span><span class="sh">"</span><span class="p">:</span> <span class="n">play_0</span><span class="p">,</span> <span class="sh">"</span><span class="s">volume</span><span class="sh">"</span><span class="p">:</span> <span class="mi">60</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">card</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">step</span><span class="sh">"</span><span class="p">:</span> <span class="n">play_1</span><span class="p">}</span>
<span class="p">])</span>
</code></pre></div></div>

<!-- ![引入图片](/image/python/2023-09-06-nio_voice_play/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[ubuntu命令行播放音频]]></summary></entry><entry><title type="html">ts: import红色波浪线</title><link href="/ts/ts_import/" rel="alternate" type="text/html" title="ts: import红色波浪线" /><published>2023-08-28T19:59:22+08:00</published><updated>2023-08-28T19:59:22+08:00</updated><id>/ts/ts_import</id><content type="html" xml:base="/ts/ts_import/"><![CDATA[<ul>
  <li>引入echarts时发现<code class="language-plaintext highlighter-rouge">import * as echarts from 'echarts';</code>有红色波浪线提示，但程序可以正常运行</li>
  <li>在tsconfig.json中添加path就好了</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">compilerOptions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">baseUrl</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">paths</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">echarts</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">node_modules/echarts/types/dist/index.d.ts</span><span class="dl">"</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>如果不行的话</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install @types/echarts

</code></pre></div></div>]]></content><author><name></name></author><category term="ts" /><summary type="html"><![CDATA[引入echarts时发现import * as echarts from 'echarts';有红色波浪线提示，但程序可以正常运行 在tsconfig.json中添加path就好了]]></summary></entry><entry><title type="html">vue: 组件入门</title><link href="/vue/vue_components/" rel="alternate" type="text/html" title="vue: 组件入门" /><published>2023-08-24T19:50:10+08:00</published><updated>2023-08-24T19:50:10+08:00</updated><id>/vue/vue_components</id><content type="html" xml:base="/vue/vue_components/"><![CDATA[<h2 id="组件传参">组件传参</h2>

<ul>
  <li>props官方：https://cn.vuejs.org/guide/components/props#prop-passing-details</li>
</ul>

<!-- 子组件类型定义 -->
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="nx">defineProps</span><span class="o">&lt;</span><span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="kr">string</span> 
<span class="p">}</span><span class="o">&gt;</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">props</span> <span class="o">=</span> <span class="nf">defineProps</span><span class="p">({</span>
    <span class="na">type</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
        <span class="na">require</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 父组件 --&gt;</span>
<span class="nt">&lt;MyComponent</span> <span class="na">greeting-message=</span><span class="s">"hello"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>defineProps不需要手动引入，但一些情况下可能报错 ‘defineProps’ is not defined  no-undef</li>
  <li>解决：在根目录下创建.eslintrc.js，写入以下内容</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">root</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">env</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">node</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">extends</span><span class="p">:</span> <span class="p">[</span>
      <span class="dl">'</span><span class="s1">plugin:vue/vue3-essential</span><span class="dl">'</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">@vue/typescript/recommended</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="na">parserOptions</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">parser</span><span class="p">:</span> <span class="dl">'</span><span class="s1">@typescript-eslint/parser</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">rules</span><span class="p">:</span> <span class="p">{</span>
      <span class="c1">// 自定义规则可以在这里添加</span>
    <span class="p">},</span>
  <span class="p">};</span>
</code></pre></div></div>

<h2 id="slot">slot</h2>
<ul>
  <li>官方：https://cn.vuejs.org/guide/components/slots.html#slots</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 组件 --&gt;</span>
<span class="nt">&lt;FancyButton&gt;</span>
  Click me! <span class="c">&lt;!-- 插槽内容 --&gt;</span>
<span class="nt">&lt;/FancyButton&gt;</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 模板 --&gt;</span>
<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"fancy-btn"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;slot&gt;&lt;/slot&gt;</span> <span class="c">&lt;!-- 插槽出口 --&gt;</span>
<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div>

<h2 id="动态导入文件夹下所有组件">动态导入文件夹下所有组件</h2>

<ul>
  <li>参考：https://stackoverflow.com/questions/54344164/how-to-import-all-vue-components-from-a-folder</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">ComponentContext</span> <span class="o">=</span> <span class="nx">require</span><span class="p">.</span><span class="nf">context</span><span class="p">(</span><span class="dl">'</span><span class="s1">./</span><span class="dl">'</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="sr">/</span><span class="se">\.</span><span class="sr">vue$/i</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lazy</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">ComponentContext</span><span class="p">.</span><span class="nf">keys</span><span class="p">().</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">componentFilePath</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">componentName</span> <span class="o">=</span> <span class="nx">componentFilePath</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">).</span><span class="nf">pop</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
    <span class="nx">Vue</span><span class="p">.</span><span class="nf">component</span><span class="p">(</span><span class="nx">componentName</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nc">ComponentContext</span><span class="p">(</span><span class="nx">componentFilePath</span><span class="p">));</span>

<span class="p">});</span>

</code></pre></div></div>

<ul>
  <li>其中<code class="language-plaintext highlighter-rouge">require.context(directory,useSubdirectories,regExp)</code>
    <ul>
      <li>directory:表示检索的目录</li>
      <li>useSubdirectories：表示是否检索子文件夹</li>
      <li>regExp:匹配文件的正则表达式,一般是文件名</li>
    </ul>
  </li>
  <li>如果目标是html文件，可能会需要附加插件
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install --s html-loader
</code></pre></div>    </div>
  </li>
  <li>然后在vue.config.js里加入</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">chainWebpack</span><span class="p">:</span> <span class="nx">config</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">config</span><span class="p">.</span><span class="nx">module</span>
      <span class="p">.</span><span class="nf">rule</span><span class="p">(</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">)</span> 
      <span class="p">.</span><span class="nf">test</span><span class="p">(</span><span class="sr">/</span><span class="se">\.</span><span class="sr">html$/</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">html-loader</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">loader</span><span class="p">(</span><span class="dl">'</span><span class="s1">html-loader</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
</code></pre></div></div>

<!-- ![引入图片](/image/vue/2023-08-24-vue_components/image_1.jpg) -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>]]></content><author><name></name></author><category term="vue" /><summary type="html"><![CDATA[组件传参]]></summary></entry><entry><title type="html">django: token认证</title><link href="/django/token/" rel="alternate" type="text/html" title="django: token认证" /><published>2023-08-23T22:21:32+08:00</published><updated>2023-08-23T22:21:32+08:00</updated><id>/django/token</id><content type="html" xml:base="/django/token/"><![CDATA[<h2 id="准备">准备</h2>

<ul>
  <li>安装
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install djangorestframework
</code></pre></div>    </div>
  </li>
  <li>settins.py</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># ...
</span>    <span class="sh">'</span><span class="s">rest_framework</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">rest_framework.authtoken</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 添加 Token 认证应用
</span>    <span class="c1"># ...
</span><span class="p">]</span>

<span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">DEFAULT_AUTHENTICATION_CLASSES</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span>
        <span class="sh">'</span><span class="s">rest_framework.authentication.TokenAuthentication</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 使用 Token 认证
</span>    <span class="p">],</span>
    <span class="sh">'</span><span class="s">DEFAULT_PERMISSION_CLASSES</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span>
        <span class="sh">'</span><span class="s">rest_framework.permissions.IsAuthenticated</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 限制只有认证用户能访问
</span>    <span class="p">],</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="生成token">生成token</h2>

<ul>
  <li>HMAC 是一种基于哈希函数和密钥的消息认证码算法。在生成 Token 时，Django 使用用户的密钥（通常是用户的密码的哈希值）与当前时间戳来计算 Token 的值</li>
  <li>默认生成的token是永久有效的，定期更新有空再说</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="n">rest_framework.authtoken.models</span> <span class="kn">import</span> <span class="n">Token</span>

<span class="k">def</span> <span class="nf">login_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c1"># 处理用户登录逻辑
</span>    <span class="c1"># ...
</span>
    <span class="c1"># 为已登录用户生成 Token
</span>    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">token</span><span class="p">,</span> <span class="n">created</span> <span class="o">=</span> <span class="n">Token</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get_or_create</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">)</span>
    <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">({</span><span class="sh">'</span><span class="s">token</span><span class="sh">'</span><span class="p">:</span> <span class="n">token</span><span class="p">.</span><span class="n">key</span><span class="p">})</span>
</code></pre></div></div>

<h2 id="验证token">验证token</h2>

<ul>
  <li>从数据库中获取与给定用户和给定 Token 键匹配的 Token 对象。如果找不到符合条件的 Token，将会引发 Token.DoesNotExist 异常。如果找到符合条件的 Token，它将被返回。
    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">rest_framework.authtoken.models</span> <span class="kn">import</span> <span class="n">Token</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">Token</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">token_key</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>一个简单的例子</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 验证token
</span><span class="n">token_key</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">META</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">HTTP_AUTHORIZATION</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">split</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span> 
<span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">)</span>
<span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">Token</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">token_key</span><span class="p">)</span>
<span class="k">except</span> <span class="n">Token</span><span class="p">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
    <span class="k">return</span> <span class="nc">HttpResponse</span><span class="p">(</span><span class="sh">"</span><span class="s">authentication failed</span><span class="sh">"</span><span class="p">,</span><span class="n">status</span><span class="o">=</span><span class="mi">401</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>前端发送请求时，以postman为例，需要在headers添加</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "Authorization" : "Bearer [token here]"
}
</code></pre></div></div>

<ul>
  <li>axios发送时需要配置headers，注意后端要允许跨域请求中包含 “Authorization” 字段</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// js</span>
<span class="nx">headers</span><span class="p">:</span> <span class="p">{</span> 
<span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Bearer [token here]</span><span class="dl">'</span><span class="p">,</span> 
<span class="p">},</span>
</code></pre></div></div>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># py
</span><span class="n">CORS_ALLOW_HEADERS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># ...
</span>    <span class="sh">'</span><span class="s">Authorization</span><span class="sh">'</span><span class="p">,</span>
    <span class="c1"># ...
</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="django" /><summary type="html"><![CDATA[准备]]></summary></entry><entry><title type="html">django: 用户认证</title><link href="/django/mysql_user/" rel="alternate" type="text/html" title="django: 用户认证" /><published>2023-08-23T14:21:32+08:00</published><updated>2023-08-23T14:21:32+08:00</updated><id>/django/mysql_user</id><content type="html" xml:base="/django/mysql_user/"><![CDATA[<h2 id="验证用户的一个例子">验证用户的一个例子</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>
<span class="kn">from</span> <span class="n">django.http</span> <span class="kn">import</span> <span class="n">JsonResponse</span>

<span class="k">def</span> <span class="nf">login_check</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">user</span> <span class="o">=</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
            <span class="n">response_data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">token</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">generated_token</span><span class="sh">"</span><span class="p">}</span>
            <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">(</span><span class="n">response_data</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">({</span><span class="sh">'</span><span class="s">error</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Invalid credentials</span><span class="sh">'</span><span class="p">},</span> <span class="n">status</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span>

</code></pre></div></div>

<ul>
  <li>postman发送请求时在body里选择”x-www-form-urlencoded”并添加key</li>
  <li>(因为使用postman时csrf报错不知道怎么解决所以在settings的MIDDLEWARE里先禁用了)</li>
  <li>前端axios数据发送时data字段使用qs.stringify而不是JSON.stringify，前者用于构造 URL 查询字符串
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// npm i -s qs</span>
<span class="c1">// import qs from 'qs';</span>
<span class="nx">inputData</span><span class="p">:</span> <span class="nx">qs</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span>
          <span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">:</span><span class="nx">username</span><span class="p">,</span>
          <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">:</span><span class="nx">password</span>
      <span class="p">})</span>
<span class="c1">// 结果："username=user123&amp;password=pass456"</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="部分官方文档搬运">部分官方文档搬运</h2>

<ul>
  <li>参考：
    <ul>
      <li>https://docs.djangoproject.com/en/4.2/topics/auth/default/</li>
    </ul>
  </li>
  <li>创建用户</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">create_user</span><span class="p">(</span><span class="sh">"</span><span class="s">john</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lennon@thebeatles.com</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">johnpassword</span><span class="sh">"</span><span class="p">)</span>
<span class="n">user</span><span class="p">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Lennon</span><span class="sh">"</span>
<span class="n">ser</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>创建super用户</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py createsuperuser --username=joe --email=joe@example.com
</code></pre></div></div>

<ul>
  <li>修改密码</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="n">u</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="sh">"</span><span class="s">john</span><span class="sh">"</span><span class="p">)</span>
<span class="n">u</span><span class="p">.</span><span class="nf">set_password</span><span class="p">(</span><span class="sh">"</span><span class="s">new password</span><span class="sh">"</span><span class="p">)</span>
<span class="n">u</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>身份验证</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span>

<span class="n">user</span> <span class="o">=</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="sh">"</span><span class="s">john</span><span class="sh">"</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">secret</span><span class="sh">"</span><span class="p">)</span>
<span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="c1"># A backend authenticated the credentials
</span>    <span class="bp">...</span>
<span class="k">else</span><span class="p">:</span>
    <span class="c1"># No backend authenticated the credentials
</span>    <span class="bp">...</span>
</code></pre></div></div>

<ul>
  <li>权限和用户组
    <ul>
      <li>略，参见官方文档</li>
    </ul>
  </li>
  <li>登录</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">authenticate</span><span class="p">,</span> <span class="n">login</span>


<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">user</span> <span class="o">=</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nf">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
        <span class="c1"># Redirect to a success page.
</span>        <span class="bp">...</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Return an 'invalid login' error message.
</span>        <span class="bp">...</span>
</code></pre></div></div>

<ul>
  <li>注销</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth</span> <span class="kn">import</span> <span class="n">logout</span>


<span class="k">def</span> <span class="nf">logout_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="nf">logout</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="c1"># Redirect to a success page.
</span></code></pre></div></div>

<ul>
  <li>使用装饰器来限制仅登录用户访问</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">django.contrib.auth.decorators</span> <span class="kn">import</span> <span class="n">login_required</span>

<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">xxx</span> <span class="bp">...</span>
</code></pre></div></div>

<ul>
  <li>可能会报错RuntimeError: ‘cryptography’ package is required for sha256_password or caching_sha2_password auth methods</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install cryptography
</code></pre></div></div>]]></content><author><name></name></author><category term="django" /><summary type="html"><![CDATA[验证用户的一个例子]]></summary></entry></feed>