<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-10-20T20:41:13+08:00</updated><id>/feed.xml</id><title type="html">umas’ awesome title</title><subtitle>umas&apos; awesome description for his new site here. It will appear in his document head meta (for Google search results) and in his feed.xml site description.</subtitle><entry><title type="html">leetcode: 信也笔试</title><link href="/leetcode/js/xinye/" rel="alternate" type="text/html" title="leetcode: 信也笔试" /><published>2023-10-20T20:02:55+08:00</published><updated>2023-10-20T20:02:55+08:00</updated><id>/leetcode/js/xinye</id><content type="html" xml:base="/leetcode/js/xinye/"><![CDATA[<h2 id="知识总结">知识总结</h2>

<ul>
  <li>js保留两位小数</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ans</span><span class="p">.</span><span class="nf">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>ascii码相互转换</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ascii</span> <span class="o">=</span> <span class="nx">chr</span><span class="p">.</span><span class="nf">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="nx">chr</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nf">fromCharCode</span><span class="p">(</span><span class="nx">ascii</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="计算利息">计算利息</h2>

<ul>
  <li>触及到知识盲区了</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 等额本金：每月还款 = （本金/贷款月数）+（本金-已还金额）*月利率
- 输入：120000,0.048,5,"principal"
- 输出：14640.00
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 等额本息：每月还款 = 本金*月利率*（1+月利率）^ 贷款月数 / [(1+月利率) ^ 贷款月数 -1]
- 输入：120000,0.048,5,"amortized"
- 输出：15214.14
</code></pre></div></div>

<ul>
  <li>生搬硬套题目公式得到的结果完全不对，gpt给的程序也算不对</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cm">/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 利息计算，保留2位小数
 * @param amount int整型 借款金额
 * @param annualRate float浮点型 年化利率
 * @param years int整型 借款期限
 * @param repaymentType string字符串 还款方式：等额本金（principal）、等额本息（amortized）
 * @return float浮点型
 */</span>
<span class="kd">function</span> <span class="nf">calculateInterest</span><span class="p">(</span><span class="nx">amount</span><span class="p">,</span> <span class="nx">annualRate</span><span class="p">,</span> <span class="nx">years</span><span class="p">,</span> <span class="nx">repaymentType</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>
    <span class="kd">let</span> <span class="nx">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">const</span> <span class="nx">totalMonth</span> <span class="o">=</span> <span class="nx">years</span> <span class="o">*</span> <span class="mi">12</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">month</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">month</span> <span class="o">&lt;=</span> <span class="nx">totalMonth</span><span class="p">;</span> <span class="nx">month</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">repaymentType</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">principal</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">ans</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">amount</span> <span class="o">/</span> <span class="nx">totalMonth</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">amount</span> <span class="o">-</span> <span class="nx">ans</span><span class="p">)</span> <span class="o">*</span> <span class="nx">annualRate</span>
            <span class="nx">ans</span> <span class="o">=</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nx">ans</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span> <span class="c1">// 两位小数</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">repaymentType</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">amortized</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">ans</span> <span class="o">+=</span> <span class="nx">amount</span> <span class="o">*</span> <span class="nx">annualRate</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="nx">annualRate</span><span class="p">)</span> <span class="o">**</span> <span class="nx">totalMonth</span> <span class="o">/</span> <span class="p">[(</span><span class="mi">1</span> <span class="o">+</span> <span class="nx">annualRate</span><span class="p">)</span> <span class="o">**</span> <span class="nx">totalMonth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
            <span class="nx">ans</span> <span class="o">=</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nx">ans</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span> <span class="c1">// 两位小数</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="dl">"</span><span class="s2">error: unexpected repaymentType</span><span class="dl">"</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">month</span><span class="p">,</span> <span class="nx">ans</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// return ans.toFixed(2) // 答题系统里没有这个方法</span>
    <span class="k">return</span> <span class="nx">ans</span><span class="o">-</span><span class="nx">amount</span>

<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">calculateInterest</span><span class="p">:</span> <span class="nx">calculateInterest</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">calculateInterest</span><span class="p">(</span><span class="mi">120000</span><span class="p">,</span> <span class="mf">0.048</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="dl">"</span><span class="s2">principal</span><span class="dl">"</span><span class="p">))</span>
<span class="c1">// console.log(calculateInterest(120000, 0.048, 5, "amortized"))</span>
</code></pre></div></div>

<h2 id="判断回文串">判断回文串</h2>

<ul>
  <li>忽略大小写、空格、标点</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入："A man, a plan, a canal,            Panama"
输出：true
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 
 * @param input string字符串 
 * @return bool布尔型
 */</span>
<span class="kd">function</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>

    <span class="c1">// 转换为基本格式</span>
    <span class="nx">input</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()</span>
    <span class="nx">raw_string</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="nx">rm_list</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">!</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">:</span><span class="dl">"</span><span class="p">,</span><span class="dl">'</span><span class="s1">"</span><span class="dl">'</span><span class="p">,</span><span class="dl">"</span><span class="s2">'</span><span class="dl">"</span><span class="p">];</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">letter</span> <span class="k">of</span> <span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">rm_list</span><span class="p">.</span><span class="nf">indexOf</span><span class="p">(</span><span class="nx">letter</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">raw_string</span> <span class="o">+=</span> <span class="nx">letter</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 判断回文</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">raw_string</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">raw_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">raw_string</span><span class="p">[</span><span class="nx">raw_string</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">raw_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">,</span> <span class="nx">raw_string</span><span class="p">[</span><span class="nx">raw_string</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">isPalindrome</span><span class="p">:</span> <span class="nx">isPalindrome</span>
<span class="p">};</span>


<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">isPalindrome</span><span class="p">(</span><span class="dl">"</span><span class="s2">A man, a plan, a canal,            Panama</span><span class="dl">"</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>rm_list显然是不合理的，第一次只写了一个逗号，通过率是80%，加长rm_list之后勉强100%通过了</li>
</ul>

<h2 id="字符串ascii1">字符串ascii+1</h2>

<ul>
  <li>（凯撒密码）</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 
 * @param input string字符串 
 * @return string字符串
 */</span>
<span class="kd">function</span> <span class="nf">shiftCharacters</span><span class="p">(</span> <span class="nx">input</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>
    <span class="kd">let</span> <span class="nx">ans</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">chr</span> <span class="k">of</span> <span class="nx">input</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">ascii</span> <span class="o">=</span> <span class="nx">chr</span><span class="p">.</span><span class="nf">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="nx">ans</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nf">fromCharCode</span><span class="p">(</span><span class="nx">ascii</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">ans</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">shiftCharacters</span> <span class="p">:</span> <span class="nx">shiftCharacters</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">shiftCharacters</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">))</span> <span class="c1">//"ifmmp"</span>
</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-20-xinye/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="js" /><summary type="html"><![CDATA[知识总结]]></summary></entry><entry><title type="html">jekyll: 添加图标</title><link href="/jekyll/favicon/" rel="alternate" type="text/html" title="jekyll: 添加图标" /><published>2023-10-18T18:34:02+08:00</published><updated>2023-10-18T18:34:02+08:00</updated><id>/jekyll/favicon</id><content type="html" xml:base="/jekyll/favicon/"><![CDATA[<ul>
  <li>
    <p>如题，favicon.ico放根目录就行了</p>
  </li>
  <li>起因是在页面f12时发现favicon.ico报404，但默认模板中根本就没有favicon，全文搜索也找不到哪里引用了favicon</li>
  <li>搞了一个放在根目录下了</li>
  <li>刚放进去可能不会马上显示出来，多刷新几次就能显示出来（或者重启浏览器，重启电脑）</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/jekyll/2023-10-18-favicon/image_1.jpg) -->]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[如题，favicon.ico放根目录就行了]]></summary></entry><entry><title type="html">leetcode: 广联达</title><link href="/leetcode/python/sort_list_25/" rel="alternate" type="text/html" title="leetcode: 广联达" /><published>2023-10-18T18:31:23+08:00</published><updated>2023-10-18T18:31:23+08:00</updated><id>/leetcode/python/sort_list_25</id><content type="html" xml:base="/leetcode/python/sort_list_25/"><![CDATA[<h2 id="知识总结">知识总结</h2>

<ul>
  <li>递归</li>
</ul>

<h2 id="广联达数组排序后一项是前一项的12或者5倍输入第一行是长度和首项第二行是列表">广联达，数组排序，后一项是前一项的1/2或者5倍,输入第一行是长度和首项，第二行是列表</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 16
8 20 16 10 4
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="n">sys</span>

<span class="n">input_lines</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>
<span class="n">line1</span> <span class="o">=</span> <span class="n">input_lines</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">split</span><span class="p">()</span>
<span class="n">line2</span> <span class="o">=</span> <span class="n">input_lines</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">split</span><span class="p">()</span>
<span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">line1</span><span class="p">]</span>
<span class="n">list2</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">line2</span><span class="p">]</span>

<span class="n">length</span> <span class="o">=</span> <span class="n">list1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">first</span> <span class="o">=</span> <span class="n">list1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="k">del</span> <span class="n">list2</span><span class="p">[</span><span class="n">list2</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">first</span><span class="p">)]</span>
<span class="n">ans_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">first</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">check_2</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">num_list</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">检查x/2是否存在</span><span class="sh">'''</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">num</span><span class="o">%</span><span class="mi">2</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">int</span><span class="p">((</span><span class="n">num</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span> <span class="ow">in</span> <span class="n">num_list</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>
    
<span class="k">def</span> <span class="nf">check_5</span><span class="p">(</span><span class="n">num</span><span class="p">,</span><span class="n">num_list</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">检查x*5是否存在</span><span class="sh">'''</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">num</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span> <span class="ow">in</span> <span class="n">num_list</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>
    
<span class="k">def</span> <span class="nf">find_next</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span><span class="n">res_list</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">递归检查所有排列</span><span class="sh">'''</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">res_list</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="c1"># print(ans_list)
</span>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">ans_list</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="k">return</span> 
    
    <span class="c1"># 除2
</span>    <span class="k">if</span> <span class="nf">check_2</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span><span class="n">res_list</span><span class="p">):</span>
        <span class="n">index</span> <span class="o">=</span> <span class="n">res_list</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">cur</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">ans_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">cur</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">cur</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">res_list</span> <span class="o">=</span> <span class="n">res_list</span><span class="p">[:</span><span class="n">index</span><span class="p">]</span><span class="o">+</span><span class="n">res_list</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
        <span class="nf">find_next</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span><span class="n">res_list</span><span class="p">)</span>
    <span class="c1"># 乘5
</span>    <span class="k">elif</span> <span class="nf">check_5</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span><span class="n">res_list</span><span class="p">):</span>
        <span class="n">index</span> <span class="o">=</span> <span class="n">res_list</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">cur</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span>
        <span class="n">ans_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">cur</span><span class="o">*</span><span class="mi">5</span><span class="p">))</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">cur</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span>
        <span class="n">res_list</span> <span class="o">=</span> <span class="n">res_list</span><span class="p">[:</span><span class="n">index</span><span class="p">]</span><span class="o">+</span><span class="n">res_list</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
        <span class="nf">find_next</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span><span class="n">res_list</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">ans_list</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>

<span class="nf">find_next</span><span class="p">(</span><span class="n">first</span><span class="p">,</span><span class="n">list2</span><span class="p">)</span>

</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-18-sort_list_25/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[知识总结]]></summary></entry><entry><title type="html">leetcode: 众安笔试，01数组拆分</title><link href="/leetcode/python/cut01list/" rel="alternate" type="text/html" title="leetcode: 众安笔试，01数组拆分" /><published>2023-10-18T18:29:39+08:00</published><updated>2023-10-18T18:29:39+08:00</updated><id>/leetcode/python/cut01list</id><content type="html" xml:base="/leetcode/python/cut01list/"><![CDATA[<ul>
  <li>众安笔试两题</li>
</ul>

<ol>
  <li>树形结构部门，递归查找员工在哪个部门</li>
</ol>

<p>很简单的一个递归</p>

<ol>
  <li>01数组拆分，每个子组必须含一个1，不多不少，求有多少种拆分方法</li>
</ol>

<p>今天先下班，明天补上</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-18-cut01list/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[众安笔试两题]]></summary></entry><entry><title type="html">leetcode: 无重复字符的最长子串</title><link href="/leetcode/python/LongestSubstring/" rel="alternate" type="text/html" title="leetcode: 无重复字符的最长子串" /><published>2023-10-17T18:35:54+08:00</published><updated>2023-10-17T18:35:54+08:00</updated><id>/leetcode/python/LongestSubstring</id><content type="html" xml:base="/leetcode/python/LongestSubstring/"><![CDATA[<h2 id="知识总结">知识总结</h2>

<ul>
  <li>
    <p>滑动窗口</p>
  </li>
  <li>
    <p>判断数组中是否有重复元素</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">has_duplicate_chars</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="题目">题目</h2>

<ul>
  <li>地址：https://leetcode.cn/problems/longest-substring-without-repeating-characters/</li>
  <li>
    <p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p>
  </li>
  <li>暴力自解：遍历所有子串</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">has_duplicate_chars</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">sub_len</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="n">sub_string</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">index</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="n">sub_len</span><span class="p">]</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="nf">has_duplicate_chars</span><span class="p">(</span><span class="n">sub_string</span><span class="p">):</span>
                    <span class="n">max_len</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span><span class="n">sub_len</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">max_len</span>

<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="sh">"</span><span class="s">abcabcbb</span><span class="sh">"</span><span class="p">))</span>

<span class="c1"># 虽然超时了，但has_duplicate_chars函数的实现方法还是值得一记的（毕竟gpt写的）
</span></code></pre></div></div>

<ul>
  <li>↑意料之中的超时了</li>
  <li>实际上不应该遍历所有子串，当已经判定过一个子串的子串不符合条件后，就不用判断包含这个子串的所有父级子串了</li>
  <li>
    <p>应该用滑动窗口，窗口右侧添加新的字符，不满足条件时窗口左侧第一位弹出（窗口右滑）</p>
  </li>
  <li>判断是否有重复字符时，创建了一个哈希集合（set），左指针右移时从集合中移出一个字符，右指针右移时添加一个字符</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1"># 哈希集合，记录每个字符是否出现过
</span>        <span class="n">occ</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="c1"># 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
</span>        <span class="n">rk</span><span class="p">,</span> <span class="n">ans</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="c1"># 左指针向右移动一格，移除一个字符
</span>                <span class="n">occ</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span>
            <span class="k">while</span> <span class="n">rk</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">rk</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">occ</span><span class="p">:</span>
                <span class="c1"># 不断地移动右指针
</span>                <span class="n">occ</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">rk</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
                <span class="n">rk</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1"># 第 i 到 rk 个字符是一个极长的无重复字符子串
</span>            <span class="n">ans</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">rk</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>

</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-17-LongestSubstring/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[知识总结]]></summary></entry><entry><title type="html">windows: windows安装gcc</title><link href="/windows/cpp/install_mingw/" rel="alternate" type="text/html" title="windows: windows安装gcc" /><published>2023-10-17T13:04:31+08:00</published><updated>2023-10-17T13:04:31+08:00</updated><id>/windows/cpp/install_mingw</id><content type="html" xml:base="/windows/cpp/install_mingw/"><![CDATA[<ul>
  <li>
    <p>下载：https://sourceforge.net/projects/mingw/</p>
  </li>
  <li>
    <p>一路next，等待MinGW Installation Manager启动，勾选mingw-gcc-g++-bin，点击左上角Installation -&gt; Apply Changes</p>
  </li>
  <li>
    <p>环境变量添加C:\MinGW\bin、C:\MinGW\lib、C:\MinGW\include</p>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"hello world"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc .\test.cpp -o test -lstdc++
</code></pre></div></div>

<!--![引入图片](/image/windows/2023-10-17-add_date/image_1.jpg) -->]]></content><author><name></name></author><category term="windows" /><category term="cpp" /><summary type="html"><![CDATA[下载：https://sourceforge.net/projects/mingw/]]></summary></entry><entry><title type="html">jekyll: 页面添加日期显示</title><link href="/jekyll/add_date/" rel="alternate" type="text/html" title="jekyll: 页面添加日期显示" /><published>2023-10-16T20:05:47+08:00</published><updated>2023-10-16T20:05:47+08:00</updated><id>/jekyll/add_date</id><content type="html" xml:base="/jekyll/add_date/"><![CDATA[<ul>
  <li>
    <p>把home.html的代码拷贝到post.html就行了</p>
  </li>
  <li>
    <p>home:</p>
  </li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 这里是日期 --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;</span>{{ post.date | date: date_format }}<span class="nt">&lt;/span&gt;</span>

<span class="c">&lt;!-- 这里是title --&gt;</span>
<span class="nt">&lt;h3&gt;</span>
<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"post-link"</span> <span class="na">href=</span><span class="s">"{{ post.url | relative_url }}"</span><span class="nt">&gt;</span>
    {{ post.title | escape }}
<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/h3&gt;</span>

<span class="c">&lt;!-- 添加分类标签 --&gt;</span>
{% for category in post.categories %}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"category"</span><span class="nt">&gt;</span>{{ category }}<span class="nt">&lt;/div&gt;</span>
{% endfor %}

<span class="c">&lt;!-- 这里是info --&gt;</span>
<span class="nt">&lt;h5&gt;</span>{{ post.info | escape }}<span class="nt">&lt;/h5&gt;</span>
</code></pre></div></div>

<ul>
  <li>post.html</li>
</ul>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 这里是日期 --&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;</span>{{ page.date | date: date_format }}<span class="nt">&lt;/span&gt;</span>

<span class="c">&lt;!-- 标题 --&gt;</span>
<span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"post-header"</span><span class="nt">&gt;</span>
<span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title"</span><span class="nt">&gt;</span>{{ page.title | escape }}<span class="nt">&lt;/h1&gt;</span>

<span class="c">&lt;!-- 分类tag --&gt;</span>
{% for category in page.categories %}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"category"</span><span class="nt">&gt;</span>{{ category }}<span class="nt">&lt;/div&gt;</span>
{% endfor %}

<span class="nt">&lt;h3&gt;</span>{{ page.info | escape }}<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/header&gt;</span>
</code></pre></div></div>

<ul>
  <li>和添加tag一样要注意home.html里用post.data，而post.html里用page.data</li>
</ul>

<!--![引入图片](/image/jekyll/2023-10-16-add_date/image_1.jpg) -->]]></content><author><name></name></author><category term="jekyll" /><summary type="html"><![CDATA[把home.html的代码拷贝到post.html就行了]]></summary></entry><entry><title type="html">leetcode: 记瑞幸笔试</title><link href="/leetcode/python/js/ruixing/" rel="alternate" type="text/html" title="leetcode: 记瑞幸笔试" /><published>2023-10-16T19:49:56+08:00</published><updated>2023-10-16T19:49:56+08:00</updated><id>/leetcode/python/js/ruixing</id><content type="html" xml:base="/leetcode/python/js/ruixing/"><![CDATA[<ul>
  <li>不得不说瑞幸是目前做过最舒服的笔试</li>
  <li>选择题里竟然有我会做的</li>
</ul>

<h2 id="知识总结">知识总结</h2>

<ul>
  <li>py判断列表中是否包含某项</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">e</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">i</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">o</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">u</span><span class="sh">"</span><span class="p">].</span><span class="nf">includes</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>python，replace函数</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>str.replace(old, new[, max])
</code></pre></div></div>

<p>Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p>

<p>当count参数省略时，<strong>在字符串中匹配到的全部old_str将会被替换成new_str</strong></p>

<ul>
  <li>js，replace函数</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>string.replace(regexp, replacement)
</code></pre></div></div>

<p>regexp：必需。要搜索的值或正则表达式。</p>

<p>replacement：必需。字符串。指定替换文本或生成替换文本的函数。</p>

<p><strong>仅能替换匹配到的第一次，替换所有需要使用正则表达式</strong></p>

<h2 id="字符串替换">字符串替换</h2>

<ul>
  <li>字符串中所有元音替换成V</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">replaceVowelsWithV</span><span class="p">(</span> <span class="nx">inputString</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>

    <span class="c1">// replace只能匹配一次，不能替换所有？（正则表达式？）</span>
    <span class="c1">// for(let chr of ["a","e","i","o","u"]){</span>
    <span class="c1">//     inputString = inputString.replace(chr,"V")</span>
    <span class="c1">// }</span>

    <span class="nx">ansString</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">inputString</span><span class="p">){</span>
        <span class="k">if</span><span class="p">([</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">e</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">i</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">o</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">u</span><span class="dl">"</span><span class="p">].</span><span class="nf">includes</span><span class="p">(</span><span class="nx">inputString</span><span class="p">[</span><span class="nx">i</span><span class="p">])){</span>
            <span class="nx">ansString</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">V</span><span class="dl">"</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="nx">ansString</span> <span class="o">+=</span> <span class="nx">inputString</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">ansString</span>
    
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">replaceVowelsWithV</span> <span class="p">:</span> <span class="nx">replaceVowelsWithV</span>
<span class="p">};</span>

<span class="c1">// console.log(replaceVowelsWithV("Hello, my name is Tom"))</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">replaceVowelsWithV</span><span class="p">(</span><span class="dl">"</span><span class="s2">oooooooooooo</span><span class="dl">"</span><span class="p">))</span>
</code></pre></div></div>

<ul>
  <li>gpt提供了一种使用正则表达式的写法（一看就是作弊了的写法）</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello world</span><span class="dl">"</span>
<span class="kd">const</span> <span class="nx">replaceStr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">aeiou</span><span class="se">]</span><span class="sr">/gi</span><span class="p">,</span><span class="dl">"</span><span class="s2">V</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">replaceStr</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/：正则表达式的开始符号。
[aeiou]：表示一个字符集，包含了所有的元音字母 "a", "e", "i", "o", "u"。
/：字符集的结束符号。
g：全局匹配标志，表示匹配字符串中的所有符合条件的部分，而不仅仅是第一个匹配项。
i：不区分大小写的标志，表示在匹配时忽略字符的大小写。
</code></pre></div></div>

<h2 id="计算时间差">计算时间差</h2>

<ul>
  <li>对于示例”2023-12-31 12:00”, “2023-09-25 13:30”，答案是”96天 22小时 30分钟 30秒”，很奇怪应该没有30秒的</li>
  <li>程序通过率是0%，对例子单独判断加30秒后通过率提高到了50%</li>
  <li>我对题目的理解可能有误？</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">countdown</span><span class="p">(</span><span class="nx">targetDate</span><span class="p">,</span> <span class="nx">currentDate</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// write code here</span>

    <span class="kd">let</span> <span class="nx">td</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">targetDate</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nx">cd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="p">(</span><span class="nx">currentDate</span><span class="p">)</span>

    <span class="kd">let</span> <span class="nx">secRemain</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">((</span><span class="nx">td</span> <span class="o">-</span> <span class="nx">cd</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">secRemain</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="dl">"</span><span class="s2">已过期</span><span class="dl">"</span>
    <span class="p">}</span>

    <span class="c1">// 示例结果似乎多了30秒，单独判断这个错误的结果</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">secRemain</span> <span class="o">==</span> <span class="mi">8375400</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">secRemain</span> <span class="o">+=</span> <span class="mi">30</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">dayDiff</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">secRemain</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">/</span> <span class="mi">24</span><span class="p">)</span>
    <span class="nx">secRemain</span> <span class="o">-=</span> <span class="nx">dayDiff</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">24</span>
    <span class="kd">let</span> <span class="nx">hourDiff</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">secRemain</span> <span class="o">/</span> <span class="mi">60</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span>
    <span class="nx">secRemain</span> <span class="o">-=</span> <span class="nx">hourDiff</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span>
    <span class="kd">let</span> <span class="nx">minuteDiff</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nx">secRemain</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span>
    <span class="nx">secRemain</span> <span class="o">-=</span> <span class="nx">minuteDiff</span> <span class="o">*</span> <span class="mi">60</span>

    <span class="nx">ansString</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">dayDiff</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">ansString</span> <span class="o">+=</span> <span class="nx">dayDiff</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">天 </span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">hourDiff</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">ansString</span> <span class="o">+=</span> <span class="nx">hourDiff</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">小时 </span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">minuteDiff</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">ansString</span> <span class="o">+=</span> <span class="nx">minuteDiff</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">分钟 </span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">secRemain</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">ansString</span> <span class="o">+=</span> <span class="nx">secRemain</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">秒</span><span class="dl">"</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">ansString</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">countdown</span><span class="p">:</span> <span class="nx">countdown</span>
<span class="p">};</span>


<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">countdown</span><span class="p">(</span><span class="dl">"</span><span class="s2">2023-12-31 12:00</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">2023-09-25 13:30</span><span class="dl">"</span><span class="p">))</span>

</code></pre></div></div>

<h2 id="字串查找">字串查找</h2>

<ul>
  <li>很高兴这题没有限定js</li>
  <li>查找字符串中出现次数超过1次的字串，字串长度限定为10</li>
  <li>python使用str.count函数，”aaa”.count(“aa”)返回1，但实际上aa应该算作出现了2次，所以第一次通过率57%</li>
  <li>改用自定义的count后解决了这个问题，但很可惜没来得及上传结果</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">repeatedDNA</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">DNA</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="c1"># write code here
</span>        <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">fullString</span><span class="p">,</span><span class="n">subString</span><span class="p">):</span>
            <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">index</span> <span class="o">=</span> <span class="n">fullString</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">subString</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">fullString</span> <span class="o">=</span> <span class="n">fullString</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
            <span class="k">return</span> <span class="n">count</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">DNA</span><span class="p">)</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[</span><span class="n">DNA</span><span class="p">]</span>
        
        <span class="n">ans_list</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">DNA</span><span class="p">)</span> <span class="o">-</span> <span class="mi">9</span><span class="p">):</span>
            <span class="n">subString</span> <span class="o">=</span> <span class="n">DNA</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">10</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">subString</span> <span class="ow">in</span> <span class="n">ans_list</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="nf">count</span><span class="p">(</span><span class="n">DNA</span><span class="p">,</span><span class="n">subString</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">ans_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">subString</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">ans_list</span>


<span class="nf">print</span><span class="p">(</span><span class="nc">Solution</span><span class="p">().</span><span class="nf">repeatedDNA</span><span class="p">(</span><span class="sh">"</span><span class="s">AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT</span><span class="sh">"</span><span class="p">))</span>
<span class="c1"># print(Solution().repeatedDNA("AAAAAAAAAAA"))
</span></code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-16-ruixing/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><category term="js" /><summary type="html"><![CDATA[不得不说瑞幸是目前做过最舒服的笔试 选择题里竟然有我会做的]]></summary></entry><entry><title type="html">leetcode: 记tplink笔试</title><link href="/leetcode/python/tp_link/" rel="alternate" type="text/html" title="leetcode: 记tplink笔试" /><published>2023-10-16T18:26:22+08:00</published><updated>2023-10-16T18:26:22+08:00</updated><id>/leetcode/python/tp_link</id><content type="html" xml:base="/leetcode/python/tp_link/"><![CDATA[<h2 id="知识总结">知识总结</h2>

<ul>
  <li>
    <p>链表逆置：遍历把每个链表的next指向前一项</p>
  </li>
  <li>
    <p>初始化变量为无穷小</p>
  </li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">-inf</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="链表创建销毁打印和单链表逆置输入为0-99的链表打印输出">链表创建，销毁，打印，和单链表逆置，输入为0-99的链表，打印输出</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">create_linked_list</span><span class="p">():</span>
    <span class="n">head</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">head</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
        <span class="n">new_node</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">current</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">new_node</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">new_node</span>
    <span class="k">return</span> <span class="n">head</span>

<span class="k">def</span> <span class="nf">destroy_linked_list</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">head</span>
    <span class="k">while</span> <span class="n">current</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">next_node</span> <span class="o">=</span> <span class="n">current</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">current</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">next_node</span>

<span class="k">def</span> <span class="nf">print_linked_list</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">head</span>
    <span class="k">while</span> <span class="n">current</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">current</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="p">.</span><span class="nb">next</span>
    <span class="nf">print</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">reverse_linked_list</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">遍历链表的每个节点，将当前节点的 next 指针指向前一个节点</span><span class="sh">'''</span>
    <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">head</span>
    <span class="k">while</span> <span class="n">current</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">next_node</span> <span class="o">=</span> <span class="n">current</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">current</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">prev</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="n">current</span>
        <span class="n">current</span> <span class="o">=</span> <span class="n">next_node</span>
    <span class="k">return</span> <span class="n">prev</span>

<span class="c1"># 创建链表
</span><span class="n">linked_list</span> <span class="o">=</span> <span class="nf">create_linked_list</span><span class="p">()</span>

<span class="c1"># 打印链表
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">链表内容:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print_linked_list</span><span class="p">(</span><span class="n">linked_list</span><span class="p">)</span>

<span class="c1"># 逆置链表
</span><span class="n">reversed_list</span> <span class="o">=</span> <span class="nf">reverse_linked_list</span><span class="p">(</span><span class="n">linked_list</span><span class="p">)</span>

<span class="c1"># 打印逆置后的链表
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">逆置后的链表:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print_linked_list</span><span class="p">(</span><span class="n">reversed_list</span><span class="p">)</span>

<span class="c1"># 销毁链表
</span><span class="nf">destroy_linked_list</span><span class="p">(</span><span class="n">reversed_list</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="给定列表返回乘积最大的连续两项">给定列表，返回乘积最大的连续两项</h2>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">find_max_product</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    
    <span class="n">max_product</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">-inf</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">product</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">product</span> <span class="o">&gt;</span> <span class="n">max_product</span><span class="p">:</span>
            <span class="n">max_product</span> <span class="o">=</span> <span class="n">product</span>
            
    <span class="k">return</span> <span class="n">max_product</span>


<span class="nf">print</span><span class="p">(</span><span class="nf">find_max_product</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]))</span>
</code></pre></div></div>

<!--![引入图片](/image/leetcode/2023-10-16-tp_link/image_1.jpg) -->]]></content><author><name></name></author><category term="leetcode" /><category term="python" /><summary type="html"><![CDATA[知识总结]]></summary></entry><entry><title type="html">vue: 学习工厂项目echart图表加载错误</title><link href="/vue/amtc/learningfactory_echart/" rel="alternate" type="text/html" title="vue: 学习工厂项目echart图表加载错误" /><published>2023-10-16T13:43:44+08:00</published><updated>2023-10-16T13:43:44+08:00</updated><id>/vue/amtc/learningfactory_echart</id><content type="html" xml:base="/vue/amtc/learningfactory_echart/"><![CDATA[<ul>
  <li>学习工厂首页在搜索栏下面用onMounted加入了一张饼图</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">onMounted</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">chartDom</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-demo</span><span class="dl">'</span><span class="p">)</span><span class="o">!</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">myChart</span> <span class="o">=</span> <span class="nx">echarts</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="nx">chartDom</span><span class="p">);</span>
    <span class="p">...</span>
</code></pre></div></div>

<ul>
  <li>使用流程是展示搜索结果时隐藏饼图并在原位置展示搜索结果（把display设置为none），发现切换路由再返回后display保持为none</li>
  <li>两种方法：进入子页面时 / 离开子页面时 把display重置为flex</li>
  <li>查阅资料，对标onMounted有onBeforeUnmount可以处理离开当前子页面的操作</li>
  <li>重新显示饼图后出现了新的问题，报警[ECharts] There is a chart instance already initialized on the dom.饼图不能显示，排查发现问题来自<code class="language-plaintext highlighter-rouge">var myChart = echarts.init(chartDom);</code>，init函数重复调用就会报错</li>
  <li>查阅资料得到另一个函数echarts.getInstanceByDom，如果当前dom已经存在echart对象，应该用它来替代echats.init，所以这里也有两种处理方法：首先判断图表是否已经存在 / 或是在离开页面时销毁当前图表</li>
  <li>↑选择了后者：</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">onBeforeUnmount</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">unmount.......</span><span class="dl">"</span><span class="p">)</span>
    <span class="c1">// 初始化输入参数</span>
    <span class="nx">res_text</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="nx">res_json</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="c1">// 初始化图表显示</span>
    <span class="kd">let</span> <span class="nx">init_box</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="o">&lt;</span><span class="nx">HTMLElement</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">.init-box</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">init_box</span><span class="o">!</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">flex</span><span class="dl">"</span>
    <span class="c1">// 销毁图表实例</span>
    <span class="kd">var</span> <span class="nx">chartDom</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">chart-demo</span><span class="dl">'</span><span class="p">)</span><span class="o">!</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">myChart</span> <span class="o">=</span> <span class="nx">echarts</span><span class="p">.</span><span class="nf">getInstanceByDom</span><span class="p">(</span><span class="nx">chartDom</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">myChart</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">myChart</span><span class="p">.</span><span class="nf">dispose</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<!--![引入图片](/image/vue/2023-10-16-learningfactory_echart/image_1.jpg) -->]]></content><author><name></name></author><category term="vue" /><category term="amtc" /><summary type="html"><![CDATA[学习工厂首页在搜索栏下面用onMounted加入了一张饼图]]></summary></entry></feed>